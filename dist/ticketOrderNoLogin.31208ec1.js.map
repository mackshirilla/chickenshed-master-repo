{"mappings":"C,A,S,C,C,C,C,C,C,C,C,C,E,I,E,A,a,O,W,W,A,a,O,K,K,A,a,O,O,O,A,a,O,O,O,C,E,E,A,Y,O,C,C,E,E,C,C,E,C,E,E,K,E,C,E,E,A,a,O,Q,A,Y,O,O,O,E,O,O,C,I,C,Q,S,E,C,C,C,E,G,C,C,C,E,C,C,G,C,C,C,E,C,C,I,E,A,Y,O,C,C,E,E,C,C,E,C,G,C,G,E,O,E,E,C,G,G,E,O,E,E,C,G,G,G,A,U,O,E,O,E,G,I,E,A,M,uB,E,I,O,E,I,C,mB,C,C,E,O,C,S,C,E,I,E,C,C,E,C,E,C,E,C,O,A,M,E,E,C,E,E,K,C,C,E,I,E,C,C,E,C,I,E,M,C,G,C,C,E,C,E,C,I,C,E,O,C,E,E,E,O,C,I,C,C,O,C,C,E,C,O,C,S,E,C,E,I,E,E,O,C,G,M,A,C,I,E,C,E,E,E,C,C,E,e,C,C,E,E,M,C,S,C,E,I,C,E,C,E,I,C,M,C,E,I,C,O,C,C,C,E,E,O,C,E,E,K,C,E,E,M,C,E,E,Q,C,S,C,C,C,E,C,C,E,C,C,S,C,C,C,E,E,O,C,C,E,C,E,A,E,O,c,C,E,O,C,I,W,O,C,C,E,A,C,G,C,C,E,C,E,I,I,E,E,E,E,M,C,I,E,C,C,E,C,E,C,Q,C,S,C,C,C,C,C,E,I,E,E,kD,E,iB,C,GCwGA,EAAA,MAAA,CAAA,EAAA,eAAA,IAAsB,GA8MtB,EAAA,MAAA,CAAA,EAAA,mCAAA,IAAsB,GApTtB,IAAA,EAAA,EAAA,eACA,EAAA,EAAA,gBACA,EAAA,EAAA,uBAoGO,eAAe,EAAa,CAAY,EAM7C,GAAI,CACF,IAAM,EAAa,AAAA,CAAA,EAAA,EAAA,SAAQ,AAAR,EAAU,GAAG,CAK7B,CAAC,qBAAqB,EAAE,mBAAmB,GAAM,CAAC,EAErD,OADiB,MAAM,EAAW,KAAK,EAEzC,CAAE,MAAO,EAAO,CAEd,OADA,QAAQ,KAAK,CAAC,0BAA2B,GAClC,IACT,CACF,CA4KA,IAAM,EAAe,IAGZ,CAAA,CAAE,KADI,AADE,IAAI,gBAAgB,OAAO,QAAQ,CAAC,MAAM,EACrC,GAAG,CAAC,OACV,CAAA,EAIV,EAAsB,AAAC,IAC3B,IAAM,EAAiB,SAAS,aAAa,CAA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","sources":["<anon>","src/modules/pages/ticketOrderNoLogin.ts","node_modules/.pnpm/@xatom+image@1.0.0_@xatom+core@1.0.12/node_modules/@xatom/image/dist/index.js"],"sourcesContent":["// modules are defined as an array\n// [ module function, map of requires ]\n//\n// map of requires is short require name -> numeric require\n//\n// anything defined in a previous bundle is accessed via the\n// orig method which is the require for previous bundles\n\n(function (modules, entry, mainEntry, parcelRequireName, globalName) {\n  /* eslint-disable no-undef */\n  var globalObject =\n    typeof globalThis !== 'undefined'\n      ? globalThis\n      : typeof self !== 'undefined'\n      ? self\n      : typeof window !== 'undefined'\n      ? window\n      : typeof global !== 'undefined'\n      ? global\n      : {};\n  /* eslint-enable no-undef */\n\n  // Save the require from previous bundle to this closure if any\n  var previousRequire =\n    typeof globalObject[parcelRequireName] === 'function' &&\n    globalObject[parcelRequireName];\n\n  var cache = previousRequire.cache || {};\n  // Do not use `require` to prevent Webpack from trying to bundle this call\n  var nodeRequire =\n    typeof module !== 'undefined' &&\n    typeof module.require === 'function' &&\n    module.require.bind(module);\n\n  function newRequire(name, jumped) {\n    if (!cache[name]) {\n      if (!modules[name]) {\n        // if we cannot find the module within our internal map or\n        // cache jump to the current global require ie. the last bundle\n        // that was added to the page.\n        var currentRequire =\n          typeof globalObject[parcelRequireName] === 'function' &&\n          globalObject[parcelRequireName];\n        if (!jumped && currentRequire) {\n          return currentRequire(name, true);\n        }\n\n        // If there are other bundles on this page the require from the\n        // previous one is saved to 'previousRequire'. Repeat this as\n        // many times as there are bundles until the module is found or\n        // we exhaust the require chain.\n        if (previousRequire) {\n          return previousRequire(name, true);\n        }\n\n        // Try the node require function if it exists.\n        if (nodeRequire && typeof name === 'string') {\n          return nodeRequire(name);\n        }\n\n        var err = new Error(\"Cannot find module '\" + name + \"'\");\n        err.code = 'MODULE_NOT_FOUND';\n        throw err;\n      }\n\n      localRequire.resolve = resolve;\n      localRequire.cache = {};\n\n      var module = (cache[name] = new newRequire.Module(name));\n\n      modules[name][0].call(\n        module.exports,\n        localRequire,\n        module,\n        module.exports,\n        this\n      );\n    }\n\n    return cache[name].exports;\n\n    function localRequire(x) {\n      var res = localRequire.resolve(x);\n      return res === false ? {} : newRequire(res);\n    }\n\n    function resolve(x) {\n      var id = modules[name][1][x];\n      return id != null ? id : x;\n    }\n  }\n\n  function Module(moduleName) {\n    this.id = moduleName;\n    this.bundle = newRequire;\n    this.exports = {};\n  }\n\n  newRequire.isParcelRequire = true;\n  newRequire.Module = Module;\n  newRequire.modules = modules;\n  newRequire.cache = cache;\n  newRequire.parent = previousRequire;\n  newRequire.register = function (id, exports) {\n    modules[id] = [\n      function (require, module) {\n        module.exports = exports;\n      },\n      {},\n    ];\n  };\n\n  Object.defineProperty(newRequire, 'root', {\n    get: function () {\n      return globalObject[parcelRequireName];\n    },\n  });\n\n  globalObject[parcelRequireName] = newRequire;\n\n  for (var i = 0; i < entry.length; i++) {\n    newRequire(entry[i]);\n  }\n\n  if (mainEntry) {\n    // Expose entry point to Node, AMD or browser globals\n    // Based on https://github.com/ForbesLindesay/umd/blob/master/template.js\n    var mainExports = newRequire(mainEntry);\n\n    // CommonJS\n    if (typeof exports === 'object' && typeof module !== 'undefined') {\n      module.exports = mainExports;\n\n      // RequireJS\n    } else if (typeof define === 'function' && define.amd) {\n      define(function () {\n        return mainExports;\n      });\n\n      // <script>\n    } else if (globalName) {\n      this[globalName] = mainExports;\n    }\n  }\n})({\"3n7Fz\":[function(require,module,exports) {\n// src/pages/ticketOrderNoLogin.ts\nvar parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\n// Function to fetch ticket details from the API using uuid\nparcelHelpers.export(exports, \"fetchTickets\", ()=>fetchTickets);\n// Main function to handle ticket order page for users without login\nparcelHelpers.export(exports, \"initializeTicketOrderNoLoginPage\", ()=>initializeTicketOrderNoLoginPage);\nvar _core = require(\"@xatom/core\");\nvar _image = require(\"@xatom/image\");\nvar _apiConfig = require(\"../../api/apiConfig\");\nasync function fetchTickets(uuid) {\n    try {\n        const getTickets = (0, _apiConfig.apiClient).get(`/tickets/get_tickets/${encodeURIComponent(uuid)}`);\n        const response = await getTickets.fetch();\n        return response;\n    } catch (error) {\n        console.error(\"Error fetching tickets:\", error);\n        return null;\n    }\n}\n// Define the TicketOrderCard component to manage the ticket card DOM\nclass TicketCard {\n    constructor(cardId, orderUuid){\n        const cardElement = document.getElementById(cardId);\n        if (!cardElement) throw new Error(`Element with id '${cardId}' not found.`);\n        // Initialize card and its child elements\n        this.card = new (0, _core.WFComponent)(cardElement);\n        this.image = new (0, _image.WFImage)(this.card.getChildAsComponent(\"#cardPerformanceImage\").getElement());\n        this.productionName = this.card.getChildAsComponent(\"#cardProductionName\");\n        this.performanceName = this.card.getChildAsComponent(\"#cardPerformanceName\");\n        this.performanceDate = this.card.getChildAsComponent(\"#cardPerformanceDate\");\n        this.quantity = this.card.getChildAsComponent(\"#quantity\");\n        // Initialize performanceId and orderUuid to an empty string\n        this.performanceId = \"\";\n        this.orderUuid = orderUuid;\n        // Log warnings if any essential child elements are missing\n        if (!this.productionName) console.warn(\"Element with id 'cardProductionName' not found within the ticket card.\");\n        if (!this.quantity) console.warn(\"Element with id 'quantity' not found within the ticket card.\");\n        if (!this.performanceName) console.warn(\"Element with id 'cardPerformanceName' not found within the ticket card.\");\n        if (!this.performanceDate) console.warn(\"Element with id 'cardPerformanceDate' not found within the ticket card.\");\n        if (!this.image) console.warn(\"Element with id 'cardPerformanceImage' not found within the ticket card.\");\n    }\n    // Method to populate the ticket card with data\n    populate(data) {\n        console.log(\"Populating ticket card with data.\");\n        // Set Performance ID\n        this.performanceId = data.performance_id;\n        console.log(\"Performance ID set to:\", this.performanceId);\n        // Set Production Name\n        if (this.productionName) {\n            this.productionName.setText(data.production_name);\n            console.log(\"Set productionName:\", data.production_name);\n        }\n        // Set Performance Name\n        if (this.performanceName) {\n            this.performanceName.setText(data.performance_name);\n            console.log(\"Set performanceName:\", data.performance_name);\n        }\n        // Set Performance Date\n        if (this.performanceDate) {\n            const formattedDate = new Date(data.performance_date_time).toLocaleString([], {\n                month: \"2-digit\",\n                day: \"2-digit\",\n                year: \"2-digit\",\n                hour: \"2-digit\",\n                minute: \"2-digit\"\n            });\n            this.performanceDate.setText(formattedDate);\n            console.log(\"Set performanceDate:\", formattedDate);\n        }\n        // Set Ticket Quantity\n        if (this.quantity) {\n            this.quantity.setText(data.quantity.toString());\n            console.log(\"Set ticket quantity:\", data.quantity);\n        }\n        // Set Performance Image (QR Code)\n        if (data.qr_code.url && this.image) {\n            this.image.setImage(data.qr_code.url);\n            const imgElement = this.image.getElement();\n            imgElement.alt = `${data.production_name} - QR Code`;\n            console.log(\"Set performance QR code URL and alt text.\");\n        }\n        // Add the `performance` or `uuid` parameter to the ticket order link\n        this.updateTicketOrderLink();\n    }\n    // Method to update the ticket order link with the appropriate parameters\n    updateTicketOrderLink() {\n        // Since #ticketOrderCard is the link element, manipulate its href directly\n        const ticketOrderLinkElement = this.card.getElement();\n        if (!ticketOrderLinkElement) {\n            console.warn(\"ticketOrderCard element is not an anchor element.\");\n            return;\n        }\n        const currentHref = ticketOrderLinkElement.getAttribute(\"href\") || \"#\";\n        console.log(\"Current href before update:\", currentHref);\n        try {\n            if (localStorage.getItem(\"auth_config\")) {\n                // User is authenticated, proceed with adding performance and order parameters\n                const url = new URL(currentHref, window.location.origin);\n                url.searchParams.set(\"performance\", this.performanceId);\n                url.searchParams.set(\"order\", this.orderUuid);\n                ticketOrderLinkElement.setAttribute(\"href\", url.toString());\n                console.log(\"Updated ticket order link with performance and order parameters:\", url.toString());\n            } else {\n                // User is not authenticated, set href to /ticket-order?uuid={uuid}\n                const newHref = `/ticket-order?uuid=${encodeURIComponent(this.orderUuid)}`;\n                ticketOrderLinkElement.setAttribute(\"href\", newHref);\n                console.log(\"Updated ticket order link to /ticket-order with uuid:\", newHref);\n                // Additionally, disable the link and make it non-interactive\n                ticketOrderLinkElement.style.pointerEvents = \"none\"; // Disable pointer events\n                ticketOrderLinkElement.style.opacity = \"0.5\"; // Visually indicate disabled state\n                ticketOrderLinkElement.style.cursor = \"not-allowed\"; // Change cursor to indicate non-interactivity\n                ticketOrderLinkElement.title = \"Please log in to proceed.\"; // Add tooltip\n            }\n        } catch (error) {\n            console.error(\"Error updating ticket order link:\", error);\n            alert(\"An error occurred while updating the ticket order link.\");\n        }\n    }\n    // Method to display the ticket card\n    show() {\n        const cardElement = this.card.getElement();\n        if (cardElement instanceof HTMLElement) {\n            cardElement.style.display = \"block\";\n            console.log(\"Displayed ticket card.\");\n        }\n    }\n}\n// Utility function to parse URL parameters\nconst getUrlParams = ()=>{\n    const params = new URLSearchParams(window.location.search);\n    const uuid = params.get(\"uuid\");\n    return {\n        uuid\n    };\n};\n// Function to trigger success event\nconst triggerSuccessEvent = (selector)=>{\n    const successTrigger = document.querySelector(selector);\n    if (successTrigger instanceof HTMLElement) successTrigger.click();\n};\nasync function initializeTicketOrderNoLoginPage() {\n    // Extract the uuid from the URL parameters\n    const { uuid } = getUrlParams();\n    if (!uuid) {\n        console.error(\"Invalid or missing uuid in URL\");\n        alert(\"Invalid or missing order UUID. Please check your link and try again.\");\n        return;\n    }\n    try {\n        // Fetch ticket details\n        const response = await fetchTickets(uuid);\n        if (!response) {\n            console.error(\"Failed to fetch ticket details\");\n            alert(\"Failed to retrieve ticket details. Please try again later.\");\n            return;\n        }\n        triggerSuccessEvent(\".success_trigger\");\n        const { tickets, order, sale, performance } = response;\n        // Set the production and performance details\n        const productionName = new (0, _core.WFComponent)(\"#productionName\");\n        productionName.setText(order.production_name);\n        const performanceName = new (0, _core.WFComponent)(\"#performanceName\");\n        performanceName.setText(order.performance_name);\n        const performanceLocation = new (0, _core.WFComponent)(\"#performanceLocation\");\n        performanceLocation.setText(order.location);\n        // Set the performance time and date separately\n        const performanceDate = new (0, _core.WFComponent)(\"#performanceDate\");\n        const date = new Date(order.performance_date_time);\n        performanceDate.setText(date.toLocaleDateString([], {\n            month: \"2-digit\",\n            day: \"2-digit\",\n            year: \"2-digit\"\n        }));\n        const performanceTime = new (0, _core.WFComponent)(\"#performanceTime\");\n        performanceTime.setText(date.toLocaleTimeString([], {\n            hour: \"2-digit\",\n            minute: \"2-digit\"\n        }));\n        // Set the location map\n        const performanceLocationMap = new (0, _core.WFComponent)(\"#performanceLocationMap\");\n        performanceLocationMap.getElement().innerHTML = performance.location.response.result.fieldData[\"map-embed\"];\n        // Apply styling to make sure the map and its container fill properly\n        const figureElement = document.querySelector(\"#performanceLocationMap figure\");\n        const iframeElement = document.querySelector(\"#performanceLocationMap iframe\");\n        const firstChildDiv = document.querySelector(\"#performanceLocationMap figure > div\");\n        if (figureElement) {\n            figureElement.style.width = \"100%\";\n            figureElement.style.height = \"100%\";\n            figureElement.style.padding = \"0\";\n            figureElement.style.margin = \"0\";\n        }\n        if (firstChildDiv) firstChildDiv.style.height = \"100%\";\n        if (iframeElement) {\n            iframeElement.style.width = \"100%\";\n            iframeElement.style.height = \"100%\";\n            iframeElement.style.border = \"0\";\n        }\n        // Set the description\n        const performanceShortDescription = new (0, _core.WFComponent)(\"#performanceShortDescription\");\n        performanceShortDescription.setText(performance.performance.response.result.fieldData[\"short-description\"] || \"Description not available.\");\n        // Set assistance requested status\n        const assistanceRequestedTrue = new (0, _core.WFComponent)(\"#assistanceRequestedTrue\");\n        const assistanceRequestedFalse = new (0, _core.WFComponent)(\"#assistanceRequestedFalse\");\n        if (order.assistance_required) {\n            assistanceRequestedTrue.setStyle({\n                display: \"block\"\n            });\n            assistanceRequestedFalse.setStyle({\n                display: \"none\"\n            });\n        } else {\n            assistanceRequestedTrue.setStyle({\n                display: \"none\"\n            });\n            assistanceRequestedFalse.setStyle({\n                display: \"block\"\n            });\n        }\n        const assistanceMessage = new (0, _core.WFComponent)(\"#assistanceMessage\");\n        assistanceMessage.setText(order.assistance_message || \"N/A\");\n        // Set the billing information\n        const invoiceDate = new (0, _core.WFComponent)(\"#invoiceDate\");\n        const saleDateFormatted = new Date(sale.created_at);\n        invoiceDate.setText(saleDateFormatted.toLocaleDateString([], {\n            month: \"2-digit\",\n            day: \"2-digit\",\n            year: \"2-digit\"\n        }));\n        const invoiceAmount = new (0, _core.WFComponent)(\"#invoiceAmount\");\n        invoiceAmount.setText(`$${sale.amount_total.toFixed(2)}`);\n        const receiptButton = new (0, _core.WFComponent)(\"#receiptButton\");\n        receiptButton.getElement().setAttribute(\"href\", sale.reciept_url);\n        // Initialize and render the list of tickets\n        const ticketList = new (0, _core.WFDynamicList)(\"#ticketList\", {\n            rowSelector: \"#ticketItem\"\n        });\n        // Sort tickets by ID\n        tickets.sort((a, b)=>a.id - b.id);\n        // Customize the rendering of list items (Ticket Cards)\n        ticketList.rowRenderer(({ rowData, rowElement })=>{\n            const ticketCard = new (0, _core.WFComponent)(rowElement);\n            // Set the QR code image\n            const qrCodeImage = new (0, _image.WFImage)(ticketCard.getChildAsComponent(\".ticket_qr\").getElement());\n            qrCodeImage.setImage(rowData.qr_code.url);\n            // Set the production name\n            const ticketProductionName = ticketCard.getChildAsComponent(\"#ticketProductionName\");\n            ticketProductionName.setText(rowData.production_name);\n            // Set the performance name\n            const ticketPerformanceName = ticketCard.getChildAsComponent(\"#ticketPerformanceName\");\n            ticketPerformanceName.setText(rowData.performance_name);\n            // Set the performance date\n            const ticketPerformanceDate = ticketCard.getChildAsComponent(\"#ticketPerformanceDate\");\n            const ticketDate = new Date(rowData.performance_date_time);\n            ticketPerformanceDate.setText(`${ticketDate.toLocaleDateString([], {\n                month: \"2-digit\",\n                day: \"2-digit\",\n                year: \"2-digit\"\n            })} at ${ticketDate.toLocaleTimeString([], {\n                hour: \"2-digit\",\n                minute: \"2-digit\"\n            })}`);\n            // Set the ticket tier\n            const ticketTier = ticketCard.getChildAsComponent(\"#ticketTicketTier\");\n            ticketTier.setText(rowData.ticket_tier_name);\n            // Set the seating assignment\n            const seatingAssignment = ticketCard.getChildAsComponent(\"#ticketSeatingAssignment\");\n            seatingAssignment.setText(rowData.seating_assignment);\n            return rowElement;\n        });\n        // Set the tickets data to the dynamic list\n        ticketList.setData(tickets);\n        // Add event listener for printing tickets\n        const printTicketsButton = new (0, _core.WFComponent)(\"#printTickets\");\n        printTicketsButton.on(\"click\", ()=>{\n            const ticketListElement = document.querySelector(\"#ticketList\");\n            if (ticketListElement) {\n                // Open a new window with specified size for printing\n                const printWindow = window.open(\"\", \"_blank\", \"width=800,height=600\");\n                if (printWindow) {\n                    // Get all stylesheets from the current document\n                    const styleSheets = Array.from(document.styleSheets).map((styleSheet)=>{\n                        try {\n                            return styleSheet.href ? `<link rel=\"stylesheet\" href=\"${styleSheet.href}\">` : \"\";\n                        } catch (e) {\n                            console.error(\"Error accessing stylesheet:\", e);\n                            return \"\";\n                        }\n                    }).join(\"\");\n                    // Extract production name, performance name, and performance date/time for hero section\n                    const productionName = document.querySelector(\"#productionName\")?.innerText || \"Production Name\";\n                    const performanceName = document.querySelector(\"#performanceName\")?.innerText || \"Performance Name\";\n                    const performanceDate = document.querySelector(\"#performanceDate\")?.innerText || \"Performance Date\";\n                    const performanceTime = document.querySelector(\"#performanceTime\")?.innerText || \"Performance Time\";\n                    // Create a printable HTML with styles included\n                    printWindow.document.write(`\n            <html>\n              <head>\n                <title>Print Tickets</title>\n                ${styleSheets}\n                <style>\n                  /* Additional print-specific styling to handle layout and formatting */\n                  body {\n                    background-color: var(--theme--background);\n                    font-family: var(--text-main--font-family);\n                    color: #121331;\n                    font-size: var(--text-main--font-size);\n                    line-height: var(--text-main--line-height);\n                    letter-spacing: var(--text-main--letter-spacing);\n                    overscroll-behavior: none;\n                    font-weight: var(--text--font-weight);\n                    text-transform: var(--text--text-transform);\n                    padding: 1rem 3rem; \n                  }\n                  \n                  #ticketList {\n                    display: grid; /* Set display to grid */\n                    grid-template-columns: repeat(3, 1fr); /* Create 3 columns */\n                    gap: 20px; /* Add some spacing between the grid items */\n                    color: black; /* Set color to black for ticket list */\n                  }\n\n                  .ticket_wrap {\n                    page-break-inside: avoid; /* Avoid breaking ticket content across pages */\n                  }\n\n                  * {\n                    box-sizing: border-box;\n                  }\n\n                  .hero-section {\n                    text-align: center;\n                    margin-bottom: 2rem;\n                  }\n\n                  .hero-section h1 {\n                    margin: 0;\n                    font-size: 2rem;\n                    font-weight: bold;\n                  }\n\n                  .hero-section p {\n                    margin: 0.5rem 0;\n                    font-size: 1.25rem;\n                  }\n                </style>\n              </head>\n              <body>\n                <div class=\"hero-section\">\n                  <h1>${productionName}</h1>\n                  <p><strong>${performanceName}</strong></p>\n                  <p>${performanceDate} at ${performanceTime}</p>\n                </div>\n                ${ticketListElement.outerHTML}\n              </body>\n            </html>\n          `);\n                    printWindow.document.close();\n                    printWindow.print();\n                }\n            }\n        });\n    } catch (error) {\n        console.error(\"Error initializing ticket order page:\", error);\n        alert(\"An error occurred while loading your ticket order. Please try again later.\");\n    }\n}\n\n},{\"@xatom/core\":\"65YBq\",\"@xatom/image\":\"bavwf\",\"../../api/apiConfig\":\"dUmIV\",\"@parcel/transformer-js/src/esmodule-helpers.js\":\"jiucr\"}],\"bavwf\":[function(require,module,exports) {\nvar t = require(\"d023971cccd819e3\");\nvar e, r, s, i, o, n, u = {};\ne = u, r = \"WFImage\", s = ()=>c, Object.defineProperty(e, r, {\n    get: s,\n    set: i,\n    enumerable: !0,\n    configurable: !0\n});\nclass c extends t.WFComponent {\n    constructor(t){\n        super(t);\n    }\n    getImageConfig() {\n        return this._config;\n    }\n    getSrc() {\n        return this.getAttribute(\"src\");\n    }\n    getSizes() {\n        return this.getAttribute(\"sizes\");\n    }\n    getSrcSet() {\n        return this.getAttribute(\"srcset\");\n    }\n    getLoading() {\n        return this.getAttribute(\"loading\");\n    }\n    onLoad(t) {\n        return this.on(\"load\", t), ()=>{\n            this.off(\"load\", t);\n        };\n    }\n    onLoadError(t) {\n        return this.on(\"error\", t), ()=>{\n            this.off(\"error\", t);\n        };\n    }\n    setImage(t) {\n        if (\"string\" == typeof t) this.setAttribute(\"src\", t), this.removeAttribute(\"srcset\"), this.removeAttribute(\"sizes\");\n        else {\n            if (this.setAttribute(\"src\", t.src), \"object\" == typeof t && t.srcSet && t.srcSet.length && t.sizes && t.sizes.length) {\n                const e = t.srcSet.map((t)=>`${t.url} ${t.size}`).join(\", \");\n                this.setAttribute(\"srcset\", e);\n            } else this.removeAttribute(\"srcset\"), this.removeAttribute(\"sizes\");\n            t.loading && this.setAttribute(\"loading\", t.loading);\n        }\n    }\n}\no = module.exports, n = u, Object.keys(n).forEach(function(t) {\n    \"default\" === t || \"__esModule\" === t || o.hasOwnProperty(t) || Object.defineProperty(o, t, {\n        enumerable: !0,\n        get: function() {\n            return n[t];\n        }\n    });\n});\n\n},{\"d023971cccd819e3\":\"65YBq\"}]},[], null, \"parcelRequired346\")\n\n//# sourceMappingURL=ticketOrderNoLogin.31208ec1.js.map\n","// src/pages/ticketOrderNoLogin.ts\n\nimport { WFComponent, WFDynamicList } from \"@xatom/core\";\nimport { WFImage } from \"@xatom/image\";\nimport { apiClient } from \"../../api/apiConfig\";\nimport { navigate } from \"@xatom/core\"; // Ensure navigate is imported for potential redirection\n\n// Define the Ticket interface based on the API response\ninterface Ticket {\n  id: number;\n  status: string;\n  production_name: string;\n  performance_name: string;\n  performance_date_time: number;\n  customer_first_name: string;\n  customer_last_name: string;\n  customer_email: string;\n  ticket_tier_name: string;\n  seating_assignment: string;\n  checked_in: boolean;\n  checked_in_time?: string | null;\n  ticket_order_id: number;\n  user_id: number;\n  contact_id: number;\n  ticket_tier_id: string;\n  performance_id: string;\n  tickets_available_id: string;\n  created_at: number;\n  quantity: number;\n  qr_code: {\n    url: string;\n  };\n}\n\n// Define the Ticket Order interface\ninterface TicketOrder {\n  id: number;\n  status: string;\n  production_name: string;\n  performance_name: string;\n  location: string;\n  performance_date_time: number;\n  customer_first_name: string;\n  customer_last_name: string;\n  customer_email: string;\n  custom_question_answer: string;\n  assistance_required: boolean;\n  assistance_message: string;\n  checked_in: boolean;\n  checked_in_time?: string | null;\n  user_id: number;\n  contact_id: number;\n  performance_id: string;\n  created_at: number;\n  sale_id: number;\n  image_url: string;\n}\n\n// Define the Sale interface\ninterface Sale {\n  id: number;\n  created_at: number;\n  contact_id: number;\n  user_id: number;\n  customer_first_name: string;\n  customer_last_name: string;\n  customer_email: string;\n  amount_total: number;\n  reciept_url: string;\n}\n\n// Define the Performance interface\ninterface Performance {\n  performance: {\n    response: {\n      result: {\n        fieldData: {\n          \"short-description\": string;\n        };\n      };\n    };\n  };\n  production: {\n    response: {\n      result: {\n        fieldData: {\n          name: string;\n          \"short-description\": string;\n        };\n      };\n    };\n  };\n  location: {\n    response: {\n      result: {\n        fieldData: {\n          \"map-embed\": string;\n        };\n      };\n    };\n  };\n}\n\n// Function to fetch ticket details from the API using uuid\nexport async function fetchTickets(uuid: string): Promise<{\n  tickets: Ticket[];\n  order: TicketOrder;\n  sale: Sale;\n  performance: Performance;\n} | null> {\n  try {\n    const getTickets = apiClient.get<{\n      tickets: Ticket[];\n      order: TicketOrder;\n      sale: Sale;\n      performance: Performance;\n    }>(`/tickets/get_tickets/${encodeURIComponent(uuid)}`);\n    const response = await getTickets.fetch();\n    return response;\n  } catch (error) {\n    console.error(\"Error fetching tickets:\", error);\n    return null;\n  }\n}\n\n// Define the TicketOrderCard component to manage the ticket card DOM\nclass TicketCard {\n  private card: WFComponent;\n  private image: WFImage;\n  private productionName: WFComponent;\n  private performanceName: WFComponent;\n  private performanceDate: WFComponent;\n  private performanceId: string; // Track performance ID\n  private quantity: WFComponent; // Track ticket quantity\n  private orderUuid: string; // Track order UUID\n\n  constructor(cardId: string, orderUuid: string) {\n    const cardElement = document.getElementById(cardId);\n    if (!cardElement) {\n      throw new Error(`Element with id '${cardId}' not found.`);\n    }\n\n    // Initialize card and its child elements\n    this.card = new WFComponent(cardElement);\n    this.image = new WFImage(\n      this.card.getChildAsComponent(\"#cardPerformanceImage\").getElement()\n    );\n    this.productionName = this.card.getChildAsComponent(\"#cardProductionName\");\n    this.performanceName = this.card.getChildAsComponent(\n      \"#cardPerformanceName\"\n    );\n    this.performanceDate = this.card.getChildAsComponent(\n      \"#cardPerformanceDate\"\n    );\n    this.quantity = this.card.getChildAsComponent(\"#quantity\");\n\n    // Initialize performanceId and orderUuid to an empty string\n    this.performanceId = \"\";\n    this.orderUuid = orderUuid;\n\n    // Log warnings if any essential child elements are missing\n    if (!this.productionName) {\n      console.warn(\n        \"Element with id 'cardProductionName' not found within the ticket card.\"\n      );\n    }\n    if (!this.quantity) {\n      console.warn(\n        \"Element with id 'quantity' not found within the ticket card.\"\n      );\n    }\n    if (!this.performanceName) {\n      console.warn(\n        \"Element with id 'cardPerformanceName' not found within the ticket card.\"\n      );\n    }\n    if (!this.performanceDate) {\n      console.warn(\n        \"Element with id 'cardPerformanceDate' not found within the ticket card.\"\n      );\n    }\n    if (!this.image) {\n      console.warn(\n        \"Element with id 'cardPerformanceImage' not found within the ticket card.\"\n      );\n    }\n  }\n\n  // Method to populate the ticket card with data\n  populate(data: Ticket) {\n    console.log(\"Populating ticket card with data.\");\n\n    // Set Performance ID\n    this.performanceId = data.performance_id;\n    console.log(\"Performance ID set to:\", this.performanceId);\n\n    // Set Production Name\n    if (this.productionName) {\n      this.productionName.setText(data.production_name);\n      console.log(\"Set productionName:\", data.production_name);\n    }\n\n    // Set Performance Name\n    if (this.performanceName) {\n      this.performanceName.setText(data.performance_name);\n      console.log(\"Set performanceName:\", data.performance_name);\n    }\n\n    // Set Performance Date\n    if (this.performanceDate) {\n      const formattedDate = new Date(data.performance_date_time).toLocaleString([], {\n        month: \"2-digit\",\n        day: \"2-digit\",\n        year: \"2-digit\",\n        hour: \"2-digit\",\n        minute: \"2-digit\",\n      });\n      this.performanceDate.setText(formattedDate);\n      console.log(\"Set performanceDate:\", formattedDate);\n    }\n\n    // Set Ticket Quantity\n    if (this.quantity) {\n      this.quantity.setText(data.quantity.toString());\n      console.log(\"Set ticket quantity:\", data.quantity);\n    }\n\n    // Set Performance Image (QR Code)\n    if (data.qr_code.url && this.image) {\n      this.image.setImage(data.qr_code.url);\n      const imgElement = this.image.getElement() as HTMLImageElement;\n      imgElement.alt = `${data.production_name} - QR Code`;\n      console.log(\"Set performance QR code URL and alt text.\");\n    }\n\n    // Add the `performance` or `uuid` parameter to the ticket order link\n    this.updateTicketOrderLink();\n  }\n\n  // Method to update the ticket order link with the appropriate parameters\n  private updateTicketOrderLink() {\n    // Since #ticketOrderCard is the link element, manipulate its href directly\n    const ticketOrderLinkElement = this.card.getElement() as HTMLAnchorElement;\n\n    if (!ticketOrderLinkElement) {\n      console.warn(\"ticketOrderCard element is not an anchor element.\");\n      return;\n    }\n\n    const currentHref = ticketOrderLinkElement.getAttribute(\"href\") || \"#\";\n    console.log(\"Current href before update:\", currentHref);\n\n    try {\n      if (localStorage.getItem(\"auth_config\")) {\n        // User is authenticated, proceed with adding performance and order parameters\n        const url = new URL(currentHref, window.location.origin);\n        url.searchParams.set(\"performance\", this.performanceId);\n        url.searchParams.set(\"order\", this.orderUuid);\n        ticketOrderLinkElement.setAttribute(\"href\", url.toString());\n        console.log(\n          \"Updated ticket order link with performance and order parameters:\",\n          url.toString()\n        );\n      } else {\n        // User is not authenticated, set href to /ticket-order?uuid={uuid}\n        const newHref = `/ticket-order?uuid=${encodeURIComponent(this.orderUuid)}`;\n        ticketOrderLinkElement.setAttribute(\"href\", newHref);\n        console.log(\n          \"Updated ticket order link to /ticket-order with uuid:\",\n          newHref\n        );\n\n        // Additionally, disable the link and make it non-interactive\n        ticketOrderLinkElement.style.pointerEvents = \"none\"; // Disable pointer events\n        ticketOrderLinkElement.style.opacity = \"0.5\"; // Visually indicate disabled state\n        ticketOrderLinkElement.style.cursor = \"not-allowed\"; // Change cursor to indicate non-interactivity\n        ticketOrderLinkElement.title = \"Please log in to proceed.\"; // Add tooltip\n      }\n    } catch (error) {\n      console.error(\"Error updating ticket order link:\", error);\n      alert(\"An error occurred while updating the ticket order link.\");\n    }\n  }\n\n  // Method to display the ticket card\n  show() {\n    const cardElement = this.card.getElement();\n    if (cardElement instanceof HTMLElement) {\n      cardElement.style.display = \"block\";\n      console.log(\"Displayed ticket card.\");\n    }\n  }\n}\n\n// Utility function to parse URL parameters\nconst getUrlParams = () => {\n  const params = new URLSearchParams(window.location.search);\n  const uuid = params.get(\"uuid\");\n  return { uuid };\n};\n\n// Function to trigger success event\nconst triggerSuccessEvent = (selector: string) => {\n  const successTrigger = document.querySelector(selector);\n  if (successTrigger instanceof HTMLElement) {\n    successTrigger.click();\n  }\n};\n\n// Main function to handle ticket order page for users without login\nexport async function initializeTicketOrderNoLoginPage() {\n  // Extract the uuid from the URL parameters\n  const { uuid } = getUrlParams();\n  if (!uuid) {\n    console.error(\"Invalid or missing uuid in URL\");\n    alert(\"Invalid or missing order UUID. Please check your link and try again.\");\n    return;\n  }\n\n  try {\n    // Fetch ticket details\n    const response = await fetchTickets(uuid);\n\n    if (!response) {\n      console.error(\"Failed to fetch ticket details\");\n      alert(\"Failed to retrieve ticket details. Please try again later.\");\n      return;\n    }\n\n    triggerSuccessEvent(\".success_trigger\");\n\n    const { tickets, order, sale, performance } = response;\n\n    // Set the production and performance details\n    const productionName = new WFComponent(\"#productionName\");\n    productionName.setText(order.production_name);\n\n    const performanceName = new WFComponent(\"#performanceName\");\n    performanceName.setText(order.performance_name);\n\n    const performanceLocation = new WFComponent(\"#performanceLocation\");\n    performanceLocation.setText(order.location);\n\n    // Set the performance time and date separately\n    const performanceDate = new WFComponent(\"#performanceDate\");\n    const date = new Date(order.performance_date_time);\n    performanceDate.setText(\n      date.toLocaleDateString([], {\n        month: \"2-digit\",\n        day: \"2-digit\",\n        year: \"2-digit\",\n      })\n    );\n\n    const performanceTime = new WFComponent(\"#performanceTime\");\n    performanceTime.setText(\n      date.toLocaleTimeString([], { hour: \"2-digit\", minute: \"2-digit\" })\n    );\n\n    // Set the location map\n    const performanceLocationMap = new WFComponent(\"#performanceLocationMap\");\n    performanceLocationMap.getElement().innerHTML =\n      performance.location.response.result.fieldData[\"map-embed\"];\n\n    // Apply styling to make sure the map and its container fill properly\n    const figureElement = document.querySelector(\n      \"#performanceLocationMap figure\"\n    ) as HTMLElement;\n    const iframeElement = document.querySelector(\n      \"#performanceLocationMap iframe\"\n    ) as HTMLElement;\n    const firstChildDiv = document.querySelector(\n      \"#performanceLocationMap figure > div\"\n    ) as HTMLElement;\n\n    if (figureElement) {\n      figureElement.style.width = \"100%\";\n      figureElement.style.height = \"100%\";\n      figureElement.style.padding = \"0\";\n      figureElement.style.margin = \"0\";\n    }\n\n    if (firstChildDiv) {\n      firstChildDiv.style.height = \"100%\";\n    }\n\n    if (iframeElement) {\n      iframeElement.style.width = \"100%\";\n      iframeElement.style.height = \"100%\";\n      iframeElement.style.border = \"0\";\n    }\n\n    // Set the description\n    const performanceShortDescription = new WFComponent(\n      \"#performanceShortDescription\"\n    );\n    performanceShortDescription.setText(\n      performance.performance.response.result.fieldData[\"short-description\"] ||\n        \"Description not available.\"\n    );\n\n    // Set assistance requested status\n    const assistanceRequestedTrue = new WFComponent(\"#assistanceRequestedTrue\");\n    const assistanceRequestedFalse = new WFComponent(\n      \"#assistanceRequestedFalse\"\n    );\n    if (order.assistance_required) {\n      assistanceRequestedTrue.setStyle({ display: \"block\" });\n      assistanceRequestedFalse.setStyle({ display: \"none\" });\n    } else {\n      assistanceRequestedTrue.setStyle({ display: \"none\" });\n      assistanceRequestedFalse.setStyle({ display: \"block\" });\n    }\n\n    const assistanceMessage = new WFComponent(\"#assistanceMessage\");\n    assistanceMessage.setText(order.assistance_message || \"N/A\");\n\n    // Set the billing information\n    const invoiceDate = new WFComponent(\"#invoiceDate\");\n    const saleDateFormatted = new Date(sale.created_at);\n    invoiceDate.setText(\n      saleDateFormatted.toLocaleDateString([], {\n        month: \"2-digit\",\n        day: \"2-digit\",\n        year: \"2-digit\",\n      })\n    );\n\n    const invoiceAmount = new WFComponent(\"#invoiceAmount\");\n    invoiceAmount.setText(`$${sale.amount_total.toFixed(2)}`);\n\n    const receiptButton = new WFComponent(\"#receiptButton\");\n    receiptButton.getElement().setAttribute(\"href\", sale.reciept_url);\n\n    // Initialize and render the list of tickets\n    const ticketList = new WFDynamicList<Ticket>(\"#ticketList\", {\n      rowSelector: \"#ticketItem\",\n    });\n\n    // Sort tickets by ID\n    tickets.sort((a, b) => a.id - b.id);\n\n    // Customize the rendering of list items (Ticket Cards)\n    ticketList.rowRenderer(({ rowData, rowElement }) => {\n      const ticketCard = new WFComponent(rowElement);\n\n      // Set the QR code image\n      const qrCodeImage = new WFImage(\n        ticketCard.getChildAsComponent(\".ticket_qr\").getElement()\n      );\n      qrCodeImage.setImage(rowData.qr_code.url);\n\n      // Set the production name\n      const ticketProductionName = ticketCard.getChildAsComponent(\n        \"#ticketProductionName\"\n      );\n      ticketProductionName.setText(rowData.production_name);\n\n      // Set the performance name\n      const ticketPerformanceName = ticketCard.getChildAsComponent(\n        \"#ticketPerformanceName\"\n      );\n      ticketPerformanceName.setText(rowData.performance_name);\n\n      // Set the performance date\n      const ticketPerformanceDate = ticketCard.getChildAsComponent(\n        \"#ticketPerformanceDate\"\n      );\n      const ticketDate = new Date(rowData.performance_date_time);\n      ticketPerformanceDate.setText(\n        `${ticketDate.toLocaleDateString([], {\n          month: \"2-digit\",\n          day: \"2-digit\",\n          year: \"2-digit\",\n        })} at ${ticketDate.toLocaleTimeString([], {\n          hour: \"2-digit\",\n          minute: \"2-digit\",\n        })}`\n      );\n\n      // Set the ticket tier\n      const ticketTier = ticketCard.getChildAsComponent(\"#ticketTicketTier\");\n      ticketTier.setText(rowData.ticket_tier_name);\n\n      // Set the seating assignment\n      const seatingAssignment = ticketCard.getChildAsComponent(\n        \"#ticketSeatingAssignment\"\n      );\n      seatingAssignment.setText(rowData.seating_assignment);\n\n      return rowElement;\n    });\n\n    // Set the tickets data to the dynamic list\n    ticketList.setData(tickets);\n\n    // Add event listener for printing tickets\n    const printTicketsButton = new WFComponent(\"#printTickets\");\n    printTicketsButton.on(\"click\", () => {\n      const ticketListElement = document.querySelector(\n        \"#ticketList\"\n      ) as HTMLElement;\n\n      if (ticketListElement) {\n        // Open a new window with specified size for printing\n        const printWindow = window.open(\"\", \"_blank\", \"width=800,height=600\");\n        if (printWindow) {\n          // Get all stylesheets from the current document\n          const styleSheets = Array.from(document.styleSheets)\n            .map((styleSheet) => {\n              try {\n                return styleSheet.href\n                  ? `<link rel=\"stylesheet\" href=\"${styleSheet.href}\">`\n                  : \"\";\n              } catch (e) {\n                console.error(\"Error accessing stylesheet:\", e);\n                return \"\";\n              }\n            })\n            .join(\"\");\n\n          // Extract production name, performance name, and performance date/time for hero section\n          const productionName =\n            (document.querySelector(\"#productionName\") as HTMLElement)\n              ?.innerText || \"Production Name\";\n          const performanceName =\n            (document.querySelector(\"#performanceName\") as HTMLElement)\n              ?.innerText || \"Performance Name\";\n          const performanceDate =\n            (document.querySelector(\"#performanceDate\") as HTMLElement)\n              ?.innerText || \"Performance Date\";\n          const performanceTime =\n            (document.querySelector(\"#performanceTime\") as HTMLElement)\n              ?.innerText || \"Performance Time\";\n\n          // Create a printable HTML with styles included\n          printWindow.document.write(`\n            <html>\n              <head>\n                <title>Print Tickets</title>\n                ${styleSheets}\n                <style>\n                  /* Additional print-specific styling to handle layout and formatting */\n                  body {\n                    background-color: var(--theme--background);\n                    font-family: var(--text-main--font-family);\n                    color: #121331;\n                    font-size: var(--text-main--font-size);\n                    line-height: var(--text-main--line-height);\n                    letter-spacing: var(--text-main--letter-spacing);\n                    overscroll-behavior: none;\n                    font-weight: var(--text--font-weight);\n                    text-transform: var(--text--text-transform);\n                    padding: 1rem 3rem; \n                  }\n                  \n                  #ticketList {\n                    display: grid; /* Set display to grid */\n                    grid-template-columns: repeat(3, 1fr); /* Create 3 columns */\n                    gap: 20px; /* Add some spacing between the grid items */\n                    color: black; /* Set color to black for ticket list */\n                  }\n\n                  .ticket_wrap {\n                    page-break-inside: avoid; /* Avoid breaking ticket content across pages */\n                  }\n\n                  * {\n                    box-sizing: border-box;\n                  }\n\n                  .hero-section {\n                    text-align: center;\n                    margin-bottom: 2rem;\n                  }\n\n                  .hero-section h1 {\n                    margin: 0;\n                    font-size: 2rem;\n                    font-weight: bold;\n                  }\n\n                  .hero-section p {\n                    margin: 0.5rem 0;\n                    font-size: 1.25rem;\n                  }\n                </style>\n              </head>\n              <body>\n                <div class=\"hero-section\">\n                  <h1>${productionName}</h1>\n                  <p><strong>${performanceName}</strong></p>\n                  <p>${performanceDate} at ${performanceTime}</p>\n                </div>\n                ${ticketListElement.outerHTML}\n              </body>\n            </html>\n          `);\n\n          printWindow.document.close();\n          printWindow.print();\n        }\n      }\n    });\n  } catch (error) {\n    console.error(\"Error initializing ticket order page:\", error);\n    alert(\"An error occurred while loading your ticket order. Please try again later.\");\n  }\n}\n","var t=require(\"@xatom/core\");var e,r,s,i,o,n,u={};e=u,r=\"WFImage\",s=()=>c,Object.defineProperty(e,r,{get:s,set:i,enumerable:!0,configurable:!0});class c extends t.WFComponent{constructor(t){super(t)}getImageConfig(){return this._config}getSrc(){return this.getAttribute(\"src\")}getSizes(){return this.getAttribute(\"sizes\")}getSrcSet(){return this.getAttribute(\"srcset\")}getLoading(){return this.getAttribute(\"loading\")}onLoad(t){return this.on(\"load\",t),()=>{this.off(\"load\",t)}}onLoadError(t){return this.on(\"error\",t),()=>{this.off(\"error\",t)}}setImage(t){if(\"string\"==typeof t)this.setAttribute(\"src\",t),this.removeAttribute(\"srcset\"),this.removeAttribute(\"sizes\");else{if(this.setAttribute(\"src\",t.src),\"object\"==typeof t&&t.srcSet&&t.srcSet.length&&t.sizes&&t.sizes.length){const e=t.srcSet.map((t=>`${t.url} ${t.size}`)).join(\", \");this.setAttribute(\"srcset\",e)}else this.removeAttribute(\"srcset\"),this.removeAttribute(\"sizes\");t.loading&&this.setAttribute(\"loading\",t.loading)}}}o=module.exports,n=u,Object.keys(n).forEach((function(t){\"default\"===t||\"__esModule\"===t||o.hasOwnProperty(t)||Object.defineProperty(o,t,{enumerable:!0,get:function(){return n[t]}})}));"],"names":["modules","entry","mainEntry","parcelRequireName","globalName","globalObject","globalThis","self","window","global","previousRequire","cache","nodeRequire","module","require","bind","newRequire","name","jumped","currentRequire","err","Error","code","localRequire","resolve","x","id","Module","call","exports","res","isParcelRequire","moduleName","bundle","parent","register","Object","defineProperty","get","i","length","parcelHelpers","defineInteropFlag","export","fetchTickets","initializeTicketOrderNoLoginPage","_core","_image","_apiConfig","uuid","getTickets","apiClient","encodeURIComponent","fetch","error","console","getUrlParams","params","URLSearchParams","location","search","triggerSuccessEvent","selector","successTrigger","document","querySelector","HTMLElement","click","alert","response","tickets","order","sale","performance","productionName","WFComponent","setText","production_name","performanceName","performance_name","performanceLocation","performanceDate","date","Date","performance_date_time","toLocaleDateString","month","day","year","performanceTime","toLocaleTimeString","hour","minute","performanceLocationMap","getElement","innerHTML","result","fieldData","figureElement","iframeElement","firstChildDiv","style","width","height","padding","margin","border","performanceShortDescription","assistanceRequestedTrue","assistanceRequestedFalse","assistance_required","setStyle","display","assistanceMessage","assistance_message","invoiceDate","saleDateFormatted","created_at","invoiceAmount","amount_total","toFixed","receiptButton","setAttribute","reciept_url","ticketList","WFDynamicList","rowSelector","sort","a","b","rowRenderer","rowData","rowElement","ticketCard","qrCodeImage","WFImage","getChildAsComponent","setImage","qr_code","url","ticketProductionName","ticketPerformanceName","ticketPerformanceDate","ticketDate","ticketTier","ticket_tier_name","seatingAssignment","seating_assignment","setData","printTicketsButton","on","ticketListElement","printWindow","open","styleSheets","Array","from","map","styleSheet","href","e","join","innerText","write","outerHTML","close","print","o","t","u","c","set","enumerable","configurable","constructor","getImageConfig","_config","getSrc","getAttribute","getSizes","getSrcSet","getLoading","onLoad","off","onLoadError","removeAttribute","src","srcSet","sizes","size","loading","keys","forEach","hasOwnProperty","n"],"version":3,"file":"ticketOrderNoLogin.31208ec1.js.map"}