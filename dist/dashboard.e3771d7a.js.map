{"mappings":"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","sources":["src/modules/dashboard/dashboard.ts","src/modules/dashboard/listCaregiverNotifications.ts","src/modules/dashboard/listFiles.ts","src/utils/formUtils.ts","src/utils/validationUtils.ts","src/utils/recaptchaUtils.ts"],"sourcesContent":["// src/pages/dashboard.ts\n\nimport { initializeDynamicStudentList } from \"./listStudents\";\nimport { initializeDynamicAdditionalStudentList } from \"./listAdditionalStudents\";\nimport { initializeDynamicCaregiverList } from \"./listCaregivers\";\nimport { initializeDynamicSubscriptionList } from \"./listRegistration\";\nimport { initializeDynamicTicketOrderList } from \"./listTicketOrders\";\nimport { initializeDynamicDonationList } from \"./listDonations\";\nimport { initializeCaregiverNotifications } from \"./listCaregiverNotifications\";\nimport { initializeDynamicFileList } from \"./listFiles\";\nimport { WFComponent } from \"@xatom/core\";\nimport { userAuth } from \"../../auth/authConfig\";\n\nexport const dashboard = async () => {\n  const firstNameText = new WFComponent(\"#firstNameText\");\n  firstNameText.setText(userAuth.getUser().profile.first_name);\n\n  try {\n    await initializeDynamicStudentList(\"#listStudentProfiles\");\n    await initializeDynamicAdditionalStudentList(\n      \"#listAdditionalStudentProfiles\"\n    );\n    await initializeDynamicFileList(\"#filesList\"); // Corrected selector here\n    await initializeDynamicCaregiverList(\"#caregiversList\");\n    initializeDynamicSubscriptionList(\"#listRegistration\");\n    await initializeDynamicTicketOrderList(\"#listTickets\");\n    await initializeDynamicDonationList(\"#listDonations\");\n    initializeCaregiverNotifications(\"caregiverNotificationList\");\n    triggerSuccessEvent(\".success_trigger\");\n  } catch (error) {\n    // Handle error if needed\n  }\n};\n\nconst triggerSuccessEvent = (selector: string) => {\n  const successTrigger = document.querySelector(selector);\n  if (successTrigger instanceof HTMLElement) {\n    successTrigger.click();\n  }\n};\n","// src/modules/dashboard/listCaregiverNotifications.ts\n\nimport { WFDynamicList, WFComponent } from \"@xatom/core\";\nimport { apiClient } from \"../../api/apiConfig\";\n\n/**\n * Interface representing a single caregiver invite.\n */\ninterface CaregiverInvite {\n  id: number;\n  user_one_id: number;\n  user_two_id: number;\n  initiated_by: number;\n  email_invited: string;\n  status: string;\n  created_at: number;\n  updated_at: number | null;\n  user_one_name: string;\n}\n\n/**\n * Interface representing the API response structure for caregiver invites.\n */\ninterface CaregiverInvitesResponse {\n  caregivers: CaregiverInvite[];\n}\n\n/**\n * Interface representing the API response structure for accept/decline actions.\n */\ninterface ActionResponse {\n  status: string;\n  message?: string; // Made message optional to handle its absence\n}\n\n/**\n * Initializes the caregiver notifications dynamic list.\n * @param containerId - ID of the caregiver notifications container.\n */\nexport async function initializeCaregiverNotifications(containerId: string) {\n  // Select the caregiver notifications container by ID\n  const container = document.getElementById(containerId);\n  if (!container) {\n    console.error(\"Caregiver notifications container not found:\", containerId);\n    return;\n  }\n\n  // Initially hide the container\n  container.style.display = \"none\";\n\n  // Initialize a new WFDynamicList instance with ID selector for rows\n  const list = new WFDynamicList<CaregiverInvite>(`#${containerId}`, {\n    rowSelector: \"#caregiverNotificationRow\", // ID selector\n    // No loaderSelector or emptySelector as per your requirement\n  });\n\n  /**\n   * Array to hold the current caregiver invites.\n   */\n  let caregiverInvites: CaregiverInvite[] = [];\n\n  /**\n   * Customizes the rendering of each caregiver notification row.\n   * @param rowData - Data for the current caregiver invite.\n   * @param rowElement - The HTML element representing the notification row.\n   * @returns The modified rowElement.\n   */\n  list.rowRenderer(({ rowData, rowElement }) => {\n    const notificationCard = new WFComponent(rowElement);\n\n    // Populate the caregiver's name\n    const notificationName = notificationCard.getChildAsComponent(\n      \"#caregiverNotificationName\" // ID selector\n    );\n    notificationName.setText(rowData.user_one_name);\n\n    // Handle the Accept button\n    const acceptButton =\n      notificationCard.getChildAsComponent(\"#acceptCaregiver\"); // ID selector\n    acceptButton.on(\"click\", async () => {\n      try {\n        console.log(`Accepting caregiver invite with ID: ${rowData.id}`);\n\n        // Show loading animation on Accept button\n        const loadingAnimation = notificationCard.getChildAsComponent(\n          \"#requestingAnimationAccept\" // ID selector\n        );\n        if (loadingAnimation) {\n          loadingAnimation.setStyle({ display: \"block\" });\n        } else {\n          console.warn(\n            \"Loading animation element not found: #requestingAnimationAccept\"\n          );\n        }\n\n        // Make API call to accept the invite\n        const response = await apiClient\n          .post<ActionResponse>(`/caregivers/invites/${rowData.id}/accept`)\n          .fetch();\n\n        console.log(\"API response:\", response);\n\n        if (response.status === \"success\") {\n          console.log(\"Caregiver invite accepted successfully.\");\n\n          // Instead of updating the list locally, refresh the page\n          console.log(\"Refreshing the page to reflect changes.\");\n          location.reload();\n        } else {\n          console.warn(\"API response unsuccessful:\", response);\n          alert(response.message || \"Failed to accept caregiver invite.\");\n        }\n      } catch (error) {\n        console.error(\"Error accepting caregiver invite:\", error);\n        alert(\"An error occurred while accepting the invite.\");\n      } finally {\n        // Hide loading animation\n        const loadingAnimation = notificationCard.getChildAsComponent(\n          \"#requestingAnimationAccept\" // ID selector\n        );\n        if (loadingAnimation) {\n          loadingAnimation.setStyle({ display: \"none\" });\n        } else {\n          console.warn(\n            \"Loading animation element not found: #requestingAnimationAccept\"\n          );\n        }\n      }\n    });\n\n    // Handle the Decline button\n    const declineButton =\n      notificationCard.getChildAsComponent(\"#declineCaregiver\"); // ID selector\n    declineButton.on(\"click\", async () => {\n      try {\n        console.log(`Declining caregiver invite with ID: ${rowData.id}`);\n\n        // Show loading animation on Decline button\n        const loadingAnimation = notificationCard.getChildAsComponent(\n          \"#requestingAnimationDecline\" // ID selector\n        );\n        if (loadingAnimation) {\n          loadingAnimation.setStyle({ display: \"block\" });\n        } else {\n          console.warn(\n            \"Loading animation element not found: #requestingAnimationDecline\"\n          );\n        }\n\n        // Make API call to decline the invite\n        const response = await apiClient\n          .post<ActionResponse>(`/caregivers/invites/${rowData.id}/decline`)\n          .fetch();\n\n        console.log(\"API response:\", response);\n\n        if (response.status === \"success\") {\n          console.log(\"Caregiver invite declined successfully.\");\n\n          // Instead of updating the list locally, refresh the page\n          console.log(\"Refreshing the page to reflect changes.\");\n          location.reload();\n        } else {\n          console.warn(\"API response unsuccessful:\", response);\n          alert(response.message || \"Failed to decline caregiver invite.\");\n        }\n      } catch (error) {\n        console.error(\"Error declining caregiver invite:\", error);\n        alert(\"An error occurred while declining the invite.\");\n      } finally {\n        // Hide loading animation\n        const loadingAnimation = notificationCard.getChildAsComponent(\n          \"#requestingAnimationDecline\" // ID selector\n        );\n        if (loadingAnimation) {\n          loadingAnimation.setStyle({ display: \"none\" });\n        } else {\n          console.warn(\n            \"Loading animation element not found: #requestingAnimationDecline\"\n          );\n        }\n      }\n    });\n\n    return rowElement;\n  });\n\n  /**\n   * Fetches caregiver invites from the API and populates the dynamic list.\n   */\n  async function loadCaregiverInvites() {\n    try {\n      console.log(\"Fetching caregiver invites...\");\n      const response = await apiClient\n        .get<CaregiverInvitesResponse>(\"/caregivers/invites\")\n        .fetch();\n\n      console.log(\"Fetched caregiver invites:\", response);\n\n      if (response.caregivers && Array.isArray(response.caregivers)) {\n        // Sort caregivers by creation date (newest first)\n        caregiverInvites = response.caregivers.sort(\n          (a, b) => b.created_at - a.created_at\n        );\n        list.setData(caregiverInvites);\n\n        // Update the container's display based on the fetched invites\n        updateContainerDisplay();\n      } else {\n        console.error(\n          \"Invalid response structure for caregiver invites:\",\n          response\n        );\n        // Do not show anything if the list is empty\n        caregiverInvites = [];\n        list.setData(caregiverInvites);\n\n        // Ensure the container is hidden\n        container.style.display = \"none\";\n      }\n    } catch (error) {\n      console.error(\"Error fetching caregiver invites:\", error);\n      // Do not show anything if the list is empty\n      caregiverInvites = [];\n      list.setData(caregiverInvites);\n\n      // Ensure the container is hidden\n      container.style.display = \"none\";\n    }\n  }\n\n  /**\n   * Updates the container's display property based on the current list.\n   */\n  function updateContainerDisplay() {\n    if (caregiverInvites.length > 0) {\n      container.style.display = \"flex\";\n    } else {\n      container.style.display = \"none\";\n    }\n  }\n\n  // Load caregiver invites when initializing\n  await loadCaregiverInvites();\n}\n","// src/pages/listFiles.ts\n\nimport { WFDynamicList, WFComponent } from \"@xatom/core\";\nimport { apiClient } from \"../../api/apiConfig\";\n\n// Define the FileItem interface based on the API response\ninterface FileItem {\n  id: number;\n  file_name: string;\n  file_url: string;\n  program_id?: string | null;\n  workshop_id?: string | null;\n  session_id?: string | null;\n  user_id: number;\n  created_at: number;\n}\n\n// Function to fetch files from the API\nexport async function fetchFiles(): Promise<FileItem[]> {\n  try {\n    const getFiles = apiClient.get<FileItem[]>(\"/student_files\");\n    const response = await getFiles.fetch();\n    return response;\n  } catch (error) {\n    console.error(\"Error fetching files:\", error);\n    throw error;\n  }\n}\n\n// Function to initialize and render the dynamic file list\nexport async function initializeDynamicFileList(containerSelector: string) {\n  // Initialize a new instance of WFDynamicList for Files\n  const list = new WFDynamicList<FileItem>(containerSelector, {\n    rowSelector: \"#fileCard\", // Using ID selector for template\n    loaderSelector: \"#filesloading\", // Selector for the loader\n    emptySelector: \"#filesEmpty\", // Selector for the empty state\n  });\n\n  // Customize the rendering of the loader\n  list.loaderRenderer((loaderElement) => {\n    loaderElement.setStyle({\n      display: \"flex\",\n    });\n    return loaderElement;\n  });\n\n  // Customize the rendering of the empty state\n  list.emptyRenderer((emptyElement) => {\n    emptyElement.setStyle({\n      display: \"flex\",\n    });\n    return emptyElement;\n  });\n\n  // Customize the rendering of list items (File Cards)\n  list.rowRenderer(({ rowData, rowElement }) => {\n    const fileCard = new WFComponent(rowElement);\n\n    // Set the fileCard's href to file_url\n    fileCard.setAttribute(\"href\", rowData.file_url);\n\n    // Set the fileName to file_name\n    const fileName = fileCard.getChildAsComponent(\"#fileName\");\n    fileName.setText(rowData.file_name);\n\n    // Show the list item\n    rowElement.setStyle({\n      display: \"block\",\n    });\n\n    return rowElement;\n  });\n\n  // Load and display file data\n  try {\n    // Enable the loading state\n    list.changeLoadingStatus(true);\n\n    const files = await fetchFiles();\n\n    // Sort files alphabetically by file_name\n    files.sort((a, b) => a.file_name.localeCompare(b.file_name));\n\n    // Set the data to be displayed in the dynamic list\n    list.setData(files);\n\n    // Disable the loading state\n    list.changeLoadingStatus(false);\n  } catch (error) {\n    console.error(\"Error loading files:\", error);\n\n    // If there's an error, set an empty array to trigger the empty state\n    list.setData([]);\n\n    // Disable the loading state\n    list.changeLoadingStatus(false);\n  }\n}\n","import { WFComponent } from \"@xatom/core\";\nimport { WFImage } from \"@xatom/image\";\nimport { apiClient } from \"../api/apiConfig\";\nimport { userAuth } from \"../auth/authConfig\";\n\nexport function toggleError(\n  errorMessageComponent: WFComponent<any>,\n  message: string,\n  show: boolean\n): void {\n  errorMessageComponent.updateTextViaAttrVar({ text: show ? message : \"\" });\n  errorMessageComponent.setStyle({ display: show ? \"flex\" : \"none\" });\n}\n\nexport function setupValidation(\n  inputComponent: WFComponent,\n  errorComponent: WFComponent,\n  validate: () => string,\n  requestErrorComponent?: WFComponent // Optional component to clear on input change\n) {\n  const validateAndUpdate = () => {\n    const errorMessage = validate();\n    toggleError(errorComponent, errorMessage, !!errorMessage);\n    if (requestErrorComponent && errorMessage === \"\") {\n      // Clear request error message when the user is correcting the input\n      toggleError(requestErrorComponent, \"\", false);\n    }\n  };\n\n  // Attach event listeners for real-time validation\n  inputComponent.on(\"input\", validateAndUpdate);\n  inputComponent.on(\"blur\", validateAndUpdate);\n  inputComponent.on(\"change\", validateAndUpdate);\n}\n\nexport function createValidationFunction(\n  inputComponent: WFComponent,\n  validationFn: (input: string) => boolean,\n  errorMessage: string\n): () => string {\n  return () => {\n    const inputElement = inputComponent.getElement() as HTMLInputElement;\n    const isValid = validationFn(inputElement.value);\n    return isValid ? \"\" : errorMessage;\n  };\n}\n\nexport function createCheckboxValidationFunction(\n  checkboxComponent: WFComponent,\n  errorMessage: string\n): () => string {\n  return () => {\n    const checkbox = checkboxComponent.getElement() as HTMLInputElement;\n    return checkbox.checked ? \"\" : errorMessage;\n  };\n}\n\nexport function setupCheckboxValidation(\n  checkboxComponent: WFComponent,\n  checkboxErrorComponent: WFComponent,\n  errorMessage: string\n) {\n  const validate = createCheckboxValidationFunction(\n    checkboxComponent,\n    errorMessage\n  );\n  setupValidation(checkboxComponent, checkboxErrorComponent, validate);\n}\n\nexport function validateSelectedSessions(\n  selectedSessions: { sessionId: string; studentIds: string[] }[],\n  errorMessageComponent: WFComponent<any>,\n  errorMessage: string\n): boolean {\n  const isValid =\n    selectedSessions.length > 0 &&\n    selectedSessions.some((session) => session.studentIds.length > 0);\n\n  if (!isValid) {\n    toggleError(errorMessageComponent, errorMessage, true);\n  } else {\n    toggleError(errorMessageComponent, \"\", false);\n  }\n\n  return isValid;\n}\n\ntype fileUploadResponse = {\n  status: string;\n  url: {\n    profile_pic: {\n      url: string;\n    };\n  };\n};\n\n/**\n * Updates the user's profile picture URL in the authentication system.\n * @param {string} imageUrl - The URL of the uploaded image.\n */\nexport function setProfilePicUrl(imageUrl: string): void {\n  const user = userAuth.getUser();\n  if (user && user.profile) {\n    // Ensure the profile_picture object exists\n    user.profile.profile_pic = user.profile.profile_pic || { url: \"\" };\n\n    // Set the profile picture URL\n    user.profile.profile_pic.url = imageUrl;\n    userAuth.setUser(user);\n    localStorage.setItem(\"auth_user\", JSON.stringify(user));\n  }\n}\n\n/**\n * Handles file upload and displays the uploaded image.\n * @param {WFComponent} fileInput - The WFComponent instance for the file input field.\n * @param {WFComponent} fileInputError - The WFComponent instance for displaying error messages.\n * @param {WFComponent} fileInputSuccess - The WFComponent instance for displaying success messages.\n * @param {string} uploadEndpoint - The endpoint to which the file is sent.\n * @returns {Promise<string>} A promise that resolves with the URL of the uploaded image.\n */\n/**\n * Handles file upload and displays the uploaded image.\n * Only JPEG files less than 2 MB can be uploaded.\n * @param {WFComponent} fileInput - The WFComponent instance for the file input field.\n * @param {WFComponent} fileInputError - The WFComponent instance for displaying error messages.\n * @param {WFComponent} fileInputSuccess - The WFComponent instance for displaying success messages.\n * @param {string} uploadEndpoint - The endpoint to which the file is sent.\n * @returns {Promise<string>} A promise that resolves with the URL of the uploaded image.\n */\nexport function setupFileUpload(\n  fileInput: WFComponent,\n  fileInputError: WFComponent,\n  fileInputSuccess: WFComponent,\n  uploadEndpoint: string\n): Promise<string> {\n  const profilePictureImage = new WFImage(\"#profilePictureImage\");\n  const uploadAnimation = new WFComponent(\"#uploadAnimation\");\n\n  const overlay = new WFComponent(\".drop-zone\");\n  let dragCounter = 0;\n\n  return new Promise<string>((resolve) => {\n    const handleFile = (file: File) => {\n      // Validate file type and size\n      const validTypes = [\"image/jpeg\", \"image/jpg\"];\n      const maxSizeInBytes = 2 * 1024 * 1024; // 2 MB\n\n      if (\n        !validTypes.includes(file.type) &&\n        !/\\.(jpg|jpeg)$/i.test(file.name)\n      ) {\n        const errorMessage = \"Only JPEG images are allowed.\";\n        toggleError(fileInputError, errorMessage, true);\n        // Reset file input value\n        (fileInput.getElement() as HTMLInputElement).value = \"\";\n        return;\n      }\n\n      if (file.size > maxSizeInBytes) {\n        const errorMessage = \"File size must be less than 2 MB.\";\n        toggleError(fileInputError, errorMessage, true);\n        // Reset file input value\n        (fileInput.getElement() as HTMLInputElement).value = \"\";\n        return;\n      }\n\n      // Show upload animation immediately\n      uploadAnimation.setStyle({ display: \"flex\" });\n\n      // Hide error and success messages\n      fileInputError.setStyle({ display: \"none\" });\n      fileInputSuccess.setStyle({ display: \"none\" });\n\n      const reader = new FileReader();\n\n      // Display preview image as soon as the file is loaded into memory\n      reader.onload = (event) => {\n        // Set the preview image for the profile picture\n        const result = event.target?.result as string;\n        profilePictureImage.setImage(result);\n\n        // Hide overlay once the image is set\n        overlay.setStyle({ display: \"none\" });\n      };\n\n      reader.readAsDataURL(file);\n\n      const formData = new FormData();\n      formData.append(\"profile_picture\", file);\n\n      const existingStudent = localStorage.getItem(\"current_student\");\n      if (existingStudent) {\n        const student = JSON.parse(existingStudent);\n        formData.append(\"student_profile_id\", student.id.toString());\n      }\n\n      // Send the file to the server\n      const postRequest = apiClient.post<fileUploadResponse>(uploadEndpoint, {\n        data: formData,\n      });\n\n      postRequest.onData((response) => {\n        if (response.status === \"success\") {\n          const imageUrl = response.url.profile_pic.url;\n\n          // Update the profile picture URL in the user session and local storage\n          setProfilePicUrl(imageUrl);\n\n          // Update the image for other parts of the UI as well\n          profilePictureImage.setImage(imageUrl);\n\n          // Store the URL in local storage\n          localStorage.setItem(\"image_upload\", imageUrl);\n\n          // Show success message and hide upload animation\n          fileInputSuccess.setStyle({ display: \"flex\" });\n          uploadAnimation.setStyle({ display: \"none\" });\n\n          // Resolve with the uploaded image URL\n          resolve(imageUrl);\n        } else {\n          const errorMessage = \"Failed to upload profile picture.\";\n          toggleError(fileInputError, errorMessage, true);\n          uploadAnimation.setStyle({ display: \"none\" });\n          overlay.setStyle({ display: \"none\" });\n          dragCounter = 0;\n          // Reset file input value\n          (fileInput.getElement() as HTMLInputElement).value = \"\";\n        }\n      });\n\n      postRequest.onError((error) => {\n        let errorMessage = \"An error occurred during image upload.\";\n        if (error.response && error.response.data) {\n          errorMessage = error.response.data.message || errorMessage;\n        } else if (error.message) {\n          errorMessage = error.message;\n        }\n\n        // Show error message and hide upload animation\n        toggleError(fileInputError, errorMessage, true);\n        uploadAnimation.setStyle({ display: \"none\" });\n        overlay.setStyle({ display: \"none\" });\n        dragCounter = 0;\n        // Reset file input value\n        (fileInput.getElement() as HTMLInputElement).value = \"\";\n      });\n\n      // Make the API call\n      postRequest.fetch();\n    };\n\n    // Event listener for file input changes\n    fileInput.on(\"change\", () => {\n      const file = (fileInput.getElement() as HTMLInputElement).files?.[0];\n      if (file) {\n        handleFile(file);\n      }\n    });\n\n    // Event listeners for drag-and-drop\n    const dragZoneElement = document.body;\n    dragZoneElement.addEventListener(\"dragenter\", (event) => {\n      event.preventDefault();\n      dragCounter++;\n      if (dragCounter === 1) {\n        overlay.setStyle({ display: \"flex\" });\n      }\n    });\n\n    dragZoneElement.addEventListener(\"dragleave\", () => {\n      dragCounter--;\n      if (dragCounter <= 0) {\n        overlay.setStyle({ display: \"none\" });\n        dragCounter = 0;\n      }\n    });\n\n    dragZoneElement.addEventListener(\"dragover\", (event) => {\n      event.preventDefault();\n    });\n\n    dragZoneElement.addEventListener(\"drop\", (event) => {\n      event.preventDefault();\n\n      const files = event.dataTransfer?.files;\n      if (files?.length) {\n        handleFile(files[0]);\n      }\n\n      overlay.setStyle({ display: \"none\" });\n      dragCounter = 0;\n    });\n  });\n}\n\n// src/utils/formUtils.ts\n\n/**\n * Formats a phone number string to the format (xxx) xxx-xxxx.\n * If the input contains more than 10 digits, it truncates the extra digits.\n * If it contains fewer, it formats as much as possible.\n *\n * @param value - The raw phone number string.\n * @returns The formatted phone number string.\n */\nexport const formatPhoneNumber = (value: string): string => {\n  const cleaned = value.replace(/\\D/g, \"\"); // Remove all non-digit characters\n\n  if (cleaned.length <= 3) {\n    return cleaned;\n  } else if (cleaned.length <= 6) {\n    return `(${cleaned.slice(0, 3)}) ${cleaned.slice(3)}`;\n  } else if (cleaned.length <= 10) {\n    return `(${cleaned.slice(0, 3)}) ${cleaned.slice(3, 6)}-${cleaned.slice(\n      6\n    )}`;\n  } else {\n    // If more than 10 digits, truncate the extra digits\n    return `(${cleaned.slice(0, 3)}) ${cleaned.slice(3, 6)}-${cleaned.slice(\n      6,\n      10\n    )}`;\n  }\n};\n","import { WFComponent } from \"@xatom/core\";\nimport { toggleError } from \"./formUtils\";\n\nexport function validateNotEmpty(input: string | undefined): boolean {\n  return input !== undefined && input.trim() !== \"\";\n}\n\nexport function validateEmail(input: string): boolean {\n  const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n  return emailRegex.test(input);\n}\n\n/**\n * Validates that the email is either empty or correctly formatted.\n * @param value The email input value.\n * @returns True if valid, false otherwise.\n */\nexport const validateEmailOptional = (value: string): boolean => {\n  if (value.trim() === \"\") {\n    // Email is optional, so empty string is valid\n    return true;\n  }\n  // Validate the email format if not empty\n  return validateEmail(value);\n};\n\nexport function validatePasswordRequirements(password: string): boolean {\n  const hasLowercase = /[a-z]/.test(password);\n  const hasUppercase = /[A-Z]/.test(password);\n  const hasDigit = /\\d/.test(password);\n  const hasSpecialChar = /[!@#$%^&*(),.?\":{}|<>]/.test(password);\n  const hasValidLength = password.length >= 8;\n  return (\n    hasLowercase && hasUppercase && hasDigit && hasSpecialChar && hasValidLength\n  );\n}\n\nexport function validateCheckbox(checked: boolean): boolean {\n  return checked;\n}\n\nexport function validatePasswordsMatch(\n  originalPassword: string,\n  confirmPassword: string\n): boolean {\n  return originalPassword === confirmPassword;\n}\n\nexport function validateSelectField(input: string | undefined): boolean {\n  return input !== undefined && input !== \"N/A\";\n}\n\nexport function validatePhoneNumber(input: string): boolean {\n  const phoneRegex = /^\\(\\d{3}\\)\\s\\d{3}-\\d{4}$/;\n  return phoneRegex.test(input);\n}\n\nexport const validatePhoneNumberOptional = (value: string): boolean => {\n  if (value.trim() === \"\") {\n    // Phone number is optional, so empty string is valid\n    return true;\n  }\n  // Validate the phone number format if not empty\n  return validatePhoneNumber(value);\n};\n","//../../utils/recaptchaUtils.ts\nimport { apiClient } from \"../api/apiConfig\";\n\n// Declaration for the global reCAPTCHA variable.\ndeclare const grecaptcha: any;\n\n/**\n * Asynchronously obtains a reCAPTCHA token for a specified action.\n * @param {string} action - The action name for which the reCAPTCHA token is requested.\n * @returns {Promise<string>} A promise that resolves with the reCAPTCHA token.\n */\nexport async function getRecaptchaToken(action: string): Promise<string> {\n  return new Promise<string>((resolve, reject) => {\n    // Ensure grecaptcha is ready and execute the token request.\n    grecaptcha.ready(() => {\n      grecaptcha\n        .execute(\"6Lekaa8pAAAAAN6qiq0LSP5Akckql4Blg6K5ToUq\", { action: action })\n        .then((token: string) => {\n          resolve(token); // Resolve with the obtained token.\n        }, reject); // Reject the promise if there is an error.\n    });\n  });\n}\n\n/**\n * Validates a reCAPTCHA token with the backend server.\n * @param {string} token - The reCAPTCHA token to validate.\n * @returns {Promise<any>} A promise that resolves with the validation response from the server.\n */\nexport async function validateRecaptchaToken(token: string): Promise<any> {\n  try {\n    // Send the reCAPTCHA token to the server for validation.\n    const response = await apiClient\n      .post(\"/recaptcha/validate\", {\n        data: { \"g-recaptcha-response\": token },\n      })\n      .fetch();\n\n    // Return the server's response directly assuming it's already in JSON format.\n    return response; // Assume response is the direct JSON body.\n  } catch (error) {\n    throw new Error(`ReCAPTCHA validation failed: ${error}`);\n  }\n}\n\n/**\n * Handles the full reCAPTCHA verification flow from obtaining the token to validating it.\n * @param {string} action - The action name for which the reCAPTCHA should be processed.\n * @returns {Promise<boolean>} A promise that resolves with true if the reCAPTCHA verification is successful.\n */\nexport async function handleRecaptcha(action: string): Promise<boolean> {\n  try {\n    const token = await getRecaptchaToken(action);\n    const validationResponse = await validateRecaptchaToken(token);\n    return validationResponse.status === \"success\";\n  } catch (error) {\n    console.error(\"ReCAPTCHA handling failed:\", error);\n    // If error has a response, log it for more context\n    if (error.response) {\n      console.error(\"Error response:\", error.response);\n    }\n    return false;\n  }\n}\n"],"names":[],"version":3,"file":"dashboard.e3771d7a.js.map","sourceRoot":"../"}