{"mappings":"C,A,S,C,C,C,C,C,C,C,C,C,E,I,E,A,a,O,W,W,A,a,O,K,K,A,a,O,O,O,A,a,O,O,O,C,E,E,A,Y,O,C,C,E,E,C,C,E,C,E,E,K,E,C,E,E,A,a,O,Q,A,Y,O,O,O,E,O,O,C,I,C,Q,S,E,C,C,C,E,G,C,C,C,E,C,C,G,C,C,C,E,C,C,I,E,A,Y,O,C,C,E,E,C,C,E,C,G,C,G,E,O,E,E,C,G,G,E,O,E,E,C,G,G,G,A,U,O,E,O,E,G,I,E,A,M,uB,E,I,O,E,I,C,mB,C,C,E,O,C,S,C,E,I,E,C,C,E,C,E,C,E,C,O,A,M,E,E,C,E,E,K,C,C,E,I,E,C,C,E,C,I,E,M,C,G,C,C,E,C,E,C,I,C,E,O,C,E,E,E,O,C,I,C,C,O,C,C,E,C,O,C,S,E,C,E,I,E,E,O,C,G,M,A,C,I,E,C,E,E,E,C,C,E,e,C,C,E,E,M,C,S,C,E,I,C,E,C,E,I,C,M,C,E,I,C,O,C,C,C,E,E,O,C,E,E,K,C,E,E,M,C,E,E,Q,C,S,C,C,C,E,C,C,E,C,C,S,C,C,C,E,E,O,C,C,E,C,E,A,E,O,c,C,E,O,C,I,W,O,C,C,E,A,C,G,C,C,E,C,E,I,I,E,E,E,E,M,C,I,E,C,C,E,C,E,C,Q,C,S,C,C,C,C,C,E,I,E,E,kD,E,iB,C,GCsBA,EAAA,MAAA,CAAA,EAAA,uBAAA,IAAsB,GAatB,EAAA,MAAA,CAAA,EAAA,+BAAA,IAAsB,GAjCtB,IAAA,EAAA,EAAA,eACA,EAAA,EAAA,gBACA,EAAA,EAAA,uBAkBO,eAAe,IACpB,GAAI,CACF,IAAM,EAAc,AAAA,CAAA,EAAA,EAAA,SAAS,AAAT,EAAU,GAAG,CAC/B,8BAGF,MAAO,AADU,CAAA,MAAM,EAAY,KAAK,EAAxC,EACgB,QAAQ,AAC1B,CAAE,MAAO,EAAO,CAEd,MADA,QAAQ,KAAK,CAAC,mCAAoC,GAC5C,CACR,CACF,CAEO,eAAe,EAA6B,CAAyB,EAE1E,IAAM,EAAO,IAAI,EAAA,aAAY,CAAW,EAAmB,CACzD,YAAa,mBACb,eAAgB,8BAChB,cAAe,2BACjB,GAGA,EAAK,cAAc,CAAC,AAAC,IACnB,EAAc,QAAQ,CAAC,CACrB,QAAS,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","sources":["<anon>","src/modules/dashboard/listStudents.ts","src/modules/dashboard/listAdditionalStudents.ts","src/modules/dashboard/listCaregivers.ts"],"sourcesContent":["// modules are defined as an array\n// [ module function, map of requires ]\n//\n// map of requires is short require name -> numeric require\n//\n// anything defined in a previous bundle is accessed via the\n// orig method which is the require for previous bundles\n\n(function (modules, entry, mainEntry, parcelRequireName, globalName) {\n  /* eslint-disable no-undef */\n  var globalObject =\n    typeof globalThis !== 'undefined'\n      ? globalThis\n      : typeof self !== 'undefined'\n      ? self\n      : typeof window !== 'undefined'\n      ? window\n      : typeof global !== 'undefined'\n      ? global\n      : {};\n  /* eslint-enable no-undef */\n\n  // Save the require from previous bundle to this closure if any\n  var previousRequire =\n    typeof globalObject[parcelRequireName] === 'function' &&\n    globalObject[parcelRequireName];\n\n  var cache = previousRequire.cache || {};\n  // Do not use `require` to prevent Webpack from trying to bundle this call\n  var nodeRequire =\n    typeof module !== 'undefined' &&\n    typeof module.require === 'function' &&\n    module.require.bind(module);\n\n  function newRequire(name, jumped) {\n    if (!cache[name]) {\n      if (!modules[name]) {\n        // if we cannot find the module within our internal map or\n        // cache jump to the current global require ie. the last bundle\n        // that was added to the page.\n        var currentRequire =\n          typeof globalObject[parcelRequireName] === 'function' &&\n          globalObject[parcelRequireName];\n        if (!jumped && currentRequire) {\n          return currentRequire(name, true);\n        }\n\n        // If there are other bundles on this page the require from the\n        // previous one is saved to 'previousRequire'. Repeat this as\n        // many times as there are bundles until the module is found or\n        // we exhaust the require chain.\n        if (previousRequire) {\n          return previousRequire(name, true);\n        }\n\n        // Try the node require function if it exists.\n        if (nodeRequire && typeof name === 'string') {\n          return nodeRequire(name);\n        }\n\n        var err = new Error(\"Cannot find module '\" + name + \"'\");\n        err.code = 'MODULE_NOT_FOUND';\n        throw err;\n      }\n\n      localRequire.resolve = resolve;\n      localRequire.cache = {};\n\n      var module = (cache[name] = new newRequire.Module(name));\n\n      modules[name][0].call(\n        module.exports,\n        localRequire,\n        module,\n        module.exports,\n        this\n      );\n    }\n\n    return cache[name].exports;\n\n    function localRequire(x) {\n      var res = localRequire.resolve(x);\n      return res === false ? {} : newRequire(res);\n    }\n\n    function resolve(x) {\n      var id = modules[name][1][x];\n      return id != null ? id : x;\n    }\n  }\n\n  function Module(moduleName) {\n    this.id = moduleName;\n    this.bundle = newRequire;\n    this.exports = {};\n  }\n\n  newRequire.isParcelRequire = true;\n  newRequire.Module = Module;\n  newRequire.modules = modules;\n  newRequire.cache = cache;\n  newRequire.parent = previousRequire;\n  newRequire.register = function (id, exports) {\n    modules[id] = [\n      function (require, module) {\n        module.exports = exports;\n      },\n      {},\n    ];\n  };\n\n  Object.defineProperty(newRequire, 'root', {\n    get: function () {\n      return globalObject[parcelRequireName];\n    },\n  });\n\n  globalObject[parcelRequireName] = newRequire;\n\n  for (var i = 0; i < entry.length; i++) {\n    newRequire(entry[i]);\n  }\n\n  if (mainEntry) {\n    // Expose entry point to Node, AMD or browser globals\n    // Based on https://github.com/ForbesLindesay/umd/blob/master/template.js\n    var mainExports = newRequire(mainEntry);\n\n    // CommonJS\n    if (typeof exports === 'object' && typeof module !== 'undefined') {\n      module.exports = mainExports;\n\n      // RequireJS\n    } else if (typeof define === 'function' && define.amd) {\n      define(function () {\n        return mainExports;\n      });\n\n      // <script>\n    } else if (globalName) {\n      this[globalName] = mainExports;\n    }\n  }\n})({\"5D5Dr\":[function(require,module,exports) {\n// src/modules/pages/studentProfile/listStudents.ts\nvar parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"fetchStudentProfiles\", ()=>fetchStudentProfiles);\nparcelHelpers.export(exports, \"initializeDynamicStudentList\", ()=>initializeDynamicStudentList);\nvar _core = require(\"@xatom/core\");\nvar _image = require(\"@xatom/image\");\nvar _apiConfig = require(\"../../api/apiConfig\");\nasync function fetchStudentProfiles() {\n    try {\n        const getStudents = (0, _apiConfig.apiClient).get(\"/profiles/student_profiles\");\n        const response = await getStudents.fetch();\n        return response.students;\n    } catch (error) {\n        console.error(\"Error fetching student profiles:\", error);\n        throw error;\n    }\n}\nasync function initializeDynamicStudentList(containerSelector) {\n    // Initialize a new instance of WFDynamicList\n    const list = new (0, _core.WFDynamicList)(containerSelector, {\n        rowSelector: \"#listStudentCard\",\n        loaderSelector: \"#listStudentProfilesloading\",\n        emptySelector: \"#listStudentProfilesEmpty\"\n    });\n    // Customize the rendering of the loader\n    list.loaderRenderer((loaderElement)=>{\n        loaderElement.setStyle({\n            display: \"flex\"\n        });\n        return loaderElement;\n    });\n    // Customize the rendering of the empty state\n    list.emptyRenderer((emptyElement)=>{\n        emptyElement.setStyle({\n            display: \"flex\"\n        });\n        return emptyElement;\n    });\n    // Customize the rendering of list items\n    list.rowRenderer(({ rowData, rowElement })=>{\n        const studentCard = new (0, _core.WFComponent)(rowElement);\n        // Get the existing href attribute\n        const existingHref = studentCard.getAttribute(\"href\") || \"#\";\n        // Create a URL object to manipulate the URL and query parameters\n        let updatedHref;\n        try {\n            // If the existingHref is a relative URL, we need to provide a base URL\n            const baseUrl = window.location.origin;\n            const url = new URL(existingHref, baseUrl);\n            // Set or update the 'id' query parameter\n            url.searchParams.set(\"id\", rowData.id.toString());\n            // Convert the URL object back to a string, relative to the base URL\n            updatedHref = url.pathname + url.search + url.hash;\n        } catch (error) {\n            // If there's an error parsing the URL, default to adding ?id={student_id} directly\n            console.error(\"Error parsing URL:\", error);\n            updatedHref = `${existingHref}?id=${rowData.id}`;\n        }\n        // Set the updated href back to the student card\n        studentCard.setAttribute(\"href\", updatedHref);\n        // Set up the rest of the card components\n        const studentImage = new (0, _image.WFImage)(studentCard.getChildAsComponent(\"#listStudentCardImage\").getElement());\n        const studentName = studentCard.getChildAsComponent(\"#studentName\");\n        if (rowData.profile_pic && rowData.profile_pic.url) studentImage.setImage(rowData.profile_pic.url);\n        else studentImage.setImage(\"https://cdn.prod.website-files.com/667f080f36260b9afbdc46b2/682bd6f6403a5cb7582db055_Profile_avatar_placeholder_large.png\");\n        studentName.setText(`${rowData.first_name} ${rowData.last_name}`);\n        // Show the list item\n        rowElement.setStyle({\n            display: \"block\"\n        });\n        // Show status pills based on student approval status\n        const approvedPill = studentCard.getChildAsComponent(\"#studentApprovedPill\");\n        const pendingPill = studentCard.getChildAsComponent(\"#studentPendingPill\");\n        const status = rowData.Status?.toUpperCase() || \"\"; // Note capital 'S'\n        if (status === \"APPROVED\") {\n            approvedPill.setStyle({\n                display: \"block\"\n            });\n            pendingPill.setStyle({\n                display: \"none\"\n            });\n        } else {\n            approvedPill.setStyle({\n                display: \"none\"\n            });\n            pendingPill.setStyle({\n                display: \"block\"\n            });\n        }\n        return rowElement;\n    });\n    // Load and display student profiles\n    try {\n        // Enable the loading state\n        list.changeLoadingStatus(true);\n        const students = await fetchStudentProfiles();\n        // Sort students alphabetically by last name\n        students.sort((a, b)=>a.last_name.localeCompare(b.last_name));\n        // Set the data to be displayed in the dynamic list\n        list.setData(students);\n        // Disable the loading state\n        list.changeLoadingStatus(false);\n    } catch (error) {\n        console.error(\"Error loading student profiles:\", error);\n        // If there's an error, set an empty array to trigger the empty state\n        list.setData([]);\n        // Disable the loading state\n        list.changeLoadingStatus(false);\n    }\n}\n\n},{\"@xatom/core\":\"65YBq\",\"@xatom/image\":\"bavwf\",\"../../api/apiConfig\":\"dUmIV\",\"@parcel/transformer-js/src/esmodule-helpers.js\":\"jiucr\"}],\"3njZO\":[function(require,module,exports) {\n// src/modules/pages/studentProfile/listAdditionalStudents.ts\nvar parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"fetchAdditionalStudentProfiles\", ()=>fetchAdditionalStudentProfiles);\nparcelHelpers.export(exports, \"initializeDynamicAdditionalStudentList\", ()=>initializeDynamicAdditionalStudentList);\nparcelHelpers.export(exports, \"reloadAdditionalStudentList\", ()=>reloadAdditionalStudentList);\nvar _core = require(\"@xatom/core\");\nvar _image = require(\"@xatom/image\");\nvar _apiConfig = require(\"../../api/apiConfig\");\nlet additionalStudentList = null;\nasync function fetchAdditionalStudentProfiles() {\n    try {\n        const getAdditionalStudents = (0, _apiConfig.apiClient).get(\"/profiles/additional_students\");\n        const response = await getAdditionalStudents.fetch();\n        return response.additional_students;\n    } catch (error) {\n        console.error(\"Error fetching additional student profiles:\", error);\n        throw error;\n    }\n}\nasync function initializeDynamicAdditionalStudentList(containerSelector) {\n    // Initialize a new instance of WFDynamicList if not already initialized\n    if (!additionalStudentList) {\n        additionalStudentList = new (0, _core.WFDynamicList)(containerSelector, {\n            rowSelector: \"#listAdditionalStudentCard\",\n            loaderSelector: \"#listAdditionalStudentProfilesloading\",\n            emptySelector: \"#listAdditionalStudentProfilesEmpty\"\n        });\n        // Customize the rendering of the loader\n        additionalStudentList.loaderRenderer((loaderElement)=>{\n            loaderElement.setStyle({\n                display: \"flex\"\n            });\n            return loaderElement;\n        });\n        // Customize the rendering of the empty state\n        additionalStudentList.emptyRenderer((emptyElement)=>{\n            emptyElement.setStyle({\n                display: \"flex\"\n            });\n            return emptyElement;\n        });\n        // Customize the rendering of list items\n        additionalStudentList.rowRenderer(({ rowData, rowElement })=>{\n            const studentCard = new (0, _core.WFComponent)(rowElement);\n            // Get the existing href attribute or set a default\n            const existingHref = studentCard.getAttribute(\"href\") || \"#\";\n            // Initialize the updatedHref variable\n            let updatedHref;\n            try {\n                // If the existingHref is a relative URL, provide a base URL\n                const baseUrl = window.location.origin;\n                const url = new URL(existingHref, baseUrl);\n                // Set or update the 'id' query parameter with the additional student's ID\n                url.searchParams.set(\"id\", rowData.id.toString());\n                // Convert the URL object back to a relative URL string\n                updatedHref = url.pathname + url.search + url.hash;\n            } catch (error) {\n                // If there's an error parsing the URL, default to adding ?id={additional_student_id} directly\n                console.error(\"Error parsing URL:\", error);\n                updatedHref = `${existingHref}?id=${rowData.id}`;\n            }\n            // Set the updated href back to the student card\n            studentCard.setAttribute(\"href\", updatedHref);\n            // Update the student image\n            const studentImage = new (0, _image.WFImage)(studentCard.getChildAsComponent(\"#listAdditionalStudentCardImage\").getElement());\n            if (rowData.profile_pic && rowData.profile_pic.url) studentImage.setImage(rowData.profile_pic.url);\n            else studentImage.setImage(\"https://cdn.prod.website-files.com/66102236c16b61185de61fe3/66102236c16b61185de6204e_placeholder.svg\");\n            // Update the student name\n            const studentName = studentCard.getChildAsComponent(\"#additionalStudentName\");\n            studentName.setText(`${rowData.first_name} ${rowData.last_name}`);\n            // Update the parent name\n            const parentName = studentCard.getChildAsComponent(\"#parentName\");\n            parentName.setText(rowData.parent_name);\n            // Show the list item\n            rowElement.setStyle({\n                display: \"flex\"\n            });\n            return rowElement;\n        });\n        // Load and display additional student profiles\n        try {\n            // Enable the loading state\n            additionalStudentList.changeLoadingStatus(true);\n            const additionalStudents = await fetchAdditionalStudentProfiles();\n            // Sort additional students alphabetically by last name\n            additionalStudents.sort((a, b)=>a.last_name.localeCompare(b.last_name));\n            // Set the data to be displayed in the dynamic list\n            additionalStudentList.setData(additionalStudents);\n            // Disable the loading state\n            additionalStudentList.changeLoadingStatus(false);\n        } catch (error) {\n            console.error(\"Error loading additional student profiles:\", error);\n            // If there's an error, set an empty array to trigger the empty state\n            additionalStudentList.setData([]);\n            // Disable the loading state\n            additionalStudentList.changeLoadingStatus(false);\n        }\n    }\n}\nasync function reloadAdditionalStudentList() {\n    if (!additionalStudentList) {\n        console.error(\"Additional student list is not initialized.\");\n        return;\n    }\n    try {\n        additionalStudentList.changeLoadingStatus(true);\n        const additionalStudents = await fetchAdditionalStudentProfiles();\n        // Sort additional students alphabetically by last name\n        additionalStudents.sort((a, b)=>a.last_name.localeCompare(b.last_name));\n        // Update the data in the dynamic list\n        additionalStudentList.setData(additionalStudents);\n        additionalStudentList.changeLoadingStatus(false);\n    } catch (error) {\n        console.error(\"Error reloading additional student profiles:\", error);\n        additionalStudentList.setData([]);\n        additionalStudentList.changeLoadingStatus(false);\n    }\n}\n\n},{\"@xatom/core\":\"65YBq\",\"@xatom/image\":\"bavwf\",\"../../api/apiConfig\":\"dUmIV\",\"@parcel/transformer-js/src/esmodule-helpers.js\":\"jiucr\"}],\"A7Qq7\":[function(require,module,exports) {\n// src/modules/pages/caregivers/listCaregivers.ts\nvar parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"fetchCaregiverProfiles\", ()=>fetchCaregiverProfiles);\nparcelHelpers.export(exports, \"initializeDynamicCaregiverList\", ()=>initializeDynamicCaregiverList);\n// Function to reload the caregiver list\nparcelHelpers.export(exports, \"reloadCaregiverList\", ()=>reloadCaregiverList);\nvar _core = require(\"@xatom/core\");\nvar _apiConfig = require(\"../../api/apiConfig\");\nvar _recaptchaUtils = require(\"../../utils/recaptchaUtils\");\nvar _formUtils = require(\"../../utils/formUtils\");\nvar _validationUtils = require(\"../../utils/validationUtils\");\nvar _listAdditionalStudents = require(\"./listAdditionalStudents\");\n// Declare dialog forms and reset buttons first\nconst resendInviteForm = new (0, _core.WFFormComponent)(\"#resendCaregiverInviteForm\");\nconst deleteCaregiverForm = new (0, _core.WFFormComponent)(\"#deleteCaregiverForm\");\nconst inviteCaregiverForm = new (0, _core.WFFormComponent)(\"#inviteCaregiverForm\");\nconst resetCaregiverForm = new (0, _core.WFComponent)(\"#resetCaregiverForm\");\nconst resetDeleteCaregiverForm = new (0, _core.WFComponent)(\"#resetDeleteCaregiverForm\");\nconst resetResendInviteForm = new (0, _core.WFComponent)(\"#resetResendCaregiverInviteForm\");\n// Declare success triggers\nconst resendCaregiverInviteSuccessTrigger = new (0, _core.WFComponent)(\"#resendCaregiverInviteSuccessTrigger\");\nconst deleteCaregiverSuccessTrigger = new (0, _core.WFComponent)(\"#deleteCaregiverSuccessTrigger\");\nconst inviteCaregiverSuccessTrigger = new (0, _core.WFComponent)(\"#inviteCaregiverSuccessTrigger\");\n// Flags to track success state\nlet isResendInviteSuccess = false;\nlet isDeleteCaregiverSuccess = false;\nlet isInviteCaregiverSuccess = false;\n// Attach reset button event listeners\nresetCaregiverForm.on(\"click\", ()=>{\n    console.log(\"Reset Caregiver Form clicked\");\n    inviteCaregiverForm.resetForm();\n    inviteCaregiverForm.showForm();\n    if (isInviteCaregiverSuccess) {\n        inviteCaregiverSuccessTrigger.getElement().click();\n        isInviteCaregiverSuccess = false;\n    }\n});\nresetDeleteCaregiverForm.on(\"click\", ()=>{\n    console.log(\"Reset Delete Caregiver Form clicked\");\n    deleteCaregiverForm.resetForm();\n    deleteCaregiverForm.showForm();\n    if (isDeleteCaregiverSuccess) {\n        deleteCaregiverSuccessTrigger.getElement().click();\n        isDeleteCaregiverSuccess = false;\n    }\n});\nresetResendInviteForm.on(\"click\", ()=>{\n    console.log(\"Reset Resend Invite Form clicked\");\n    resendInviteForm.resetForm();\n    resendInviteForm.showForm();\n    if (isResendInviteSuccess) {\n        resendCaregiverInviteSuccessTrigger.getElement().click();\n        isResendInviteSuccess = false;\n    }\n});\nasync function fetchCaregiverProfiles() {\n    try {\n        const getCaregivers = (0, _apiConfig.apiClient).get(\"/caregivers\");\n        const response = await getCaregivers.fetch();\n        console.log(\"API response:\", response); // Log the entire response for debugging\n        if (response.caregivers && Array.isArray(response.caregivers)) return response.caregivers;\n        else throw new Error(\"Invalid response structure\");\n    } catch (error) {\n        console.error(\"Error fetching caregiver profiles:\", error);\n        throw error;\n    }\n}\nasync function initializeDynamicCaregiverList(containerSelector) {\n    // Ensure the container exists before initializing the list\n    const container = document.querySelector(containerSelector);\n    if (!container) {\n        console.error(\"Container not found for selector:\", containerSelector);\n        return;\n    }\n    // Initialize a new instance of WFDynamicList\n    const list = new (0, _core.WFDynamicList)(containerSelector, {\n        rowSelector: \"#caregiverCard\",\n        loaderSelector: \"#caregiversLoading\",\n        emptySelector: \"#caregiversEmpty\"\n    });\n    // Initialize the additional student list\n    (0, _listAdditionalStudents.initializeDynamicAdditionalStudentList)(\"#listAdditionalStudentProfiles\");\n    let selectedEmail = null;\n    let selectedCaregiverId = null;\n    // Customize the rendering of the loader\n    list.loaderRenderer((loaderElement)=>{\n        loaderElement.setStyle({\n            display: \"flex\"\n        });\n        return loaderElement;\n    });\n    // Customize the rendering of the empty state\n    list.emptyRenderer((emptyElement)=>{\n        emptyElement.setStyle({\n            display: \"block\"\n        });\n        return emptyElement;\n    });\n    // Customize the rendering of list items\n    list.rowRenderer(({ rowData, rowElement })=>{\n        const caregiverCard = new (0, _core.WFComponent)(rowElement);\n        // Element to display name or email\n        const caregiverDisplayName = caregiverCard.getChildAsComponent(\"#caregiverEmail\");\n        // Conditional display of name or email\n        const displayName = rowData.name ? rowData.name : rowData.email;\n        caregiverDisplayName.setText(displayName);\n        // Status and buttons\n        const caregiverStatus = caregiverCard.getChildAsComponent(\"#caregiverStatus\");\n        const resendButton = caregiverCard.getChildAsComponent(\".resend-invite-btn\");\n        const deleteButton = caregiverCard.getChildAsComponent(\".delete-caregiver-btn\");\n        caregiverStatus.setText(rowData.status);\n        // Hide the resend button if the status is \"Active\"\n        if (rowData.status === \"Active\") resendButton.setStyle({\n            display: \"none\"\n        });\n        // Attach event listener to the resend button\n        resendButton.on(\"click\", ()=>{\n            const dialog = document.getElementById(\"resendCaregiverInviteDialog\");\n            if (dialog) {\n                selectedEmail = rowData.email; // Store the email for later use\n                console.log(\"Selected email:\", selectedEmail);\n                dialog.showModal();\n                document.body.style.overflow = \"hidden\"; // Prevent page scroll\n                const closeDialog = ()=>{\n                    dialog.close();\n                    document.body.style.overflow = \"auto\"; // Restore page scroll\n                    resetResendInviteForm.getElement().click();\n                };\n                // Close dialog when clicking outside of it\n                const closeOutsideClick = (event)=>{\n                    if (event.target === dialog) closeDialog();\n                };\n                dialog.addEventListener(\"click\", closeOutsideClick);\n                // Close dialog on pressing ESC key\n                const closeOnEsc = (event)=>{\n                    if (event.key === \"Escape\" && dialog.open) closeDialog();\n                };\n                document.addEventListener(\"keydown\", closeOnEsc);\n                // Close dialog when clicking the close button\n                const closeDialogBtn = dialog.querySelector(\"#close-dialog-btn\");\n                if (closeDialogBtn) closeDialogBtn.addEventListener(\"click\", ()=>{\n                    closeDialog();\n                });\n                // Remove event listeners when the dialog is closed\n                dialog.addEventListener(\"close\", ()=>{\n                    dialog.removeEventListener(\"click\", closeOutsideClick);\n                    document.removeEventListener(\"keydown\", closeOnEsc);\n                }, {\n                    once: true\n                });\n            } else console.error(\"Dialog element not found\");\n        });\n        // Attach event listener to the delete button\n        const dashboardWrapper = new (0, _core.WFComponent)(\".page_main\");\n        deleteButton.on(\"click\", ()=>{\n            dashboardWrapper.setAttribute(\"data-brand\", \"6\");\n            const dialog = document.getElementById(\"deleteCaregiverDialog\");\n            if (dialog) {\n                selectedCaregiverId = rowData.id; // Store the caregiver ID for later use\n                console.log(\"Selected caregiver ID:\", selectedCaregiverId);\n                dialog.showModal();\n                document.body.style.overflow = \"hidden\"; // Prevent page scroll\n                const closeDialog = ()=>{\n                    dialog.close();\n                    document.body.style.overflow = \"auto\"; // Restore page scroll\n                    resetDeleteCaregiverForm.getElement().click();\n                    dashboardWrapper.setAttribute(\"data-brand\", \"2\");\n                };\n                // Close dialog when clicking outside of it\n                const closeOutsideClick = (event)=>{\n                    if (event.target === dialog) {\n                        closeDialog();\n                        dashboardWrapper.setAttribute(\"data-brand\", \"2\");\n                    }\n                };\n                dialog.addEventListener(\"click\", closeOutsideClick);\n                // Close dialog on pressing ESC key\n                const closeOnEsc = (event)=>{\n                    if (event.key === \"Escape\" && dialog.open) {\n                        closeDialog();\n                        dashboardWrapper.setAttribute(\"data-brand\", \"2\");\n                    }\n                };\n                document.addEventListener(\"keydown\", closeOnEsc);\n                // Close dialog when clicking the close button\n                const closeDialogBtn = dialog.querySelector(\"#close-dialog-btn\");\n                if (closeDialogBtn) closeDialogBtn.addEventListener(\"click\", ()=>{\n                    closeDialog();\n                    dashboardWrapper.setAttribute(\"data-brand\", \"2\");\n                }, {\n                    once: true\n                });\n                // Remove event listeners when the dialog is closed\n                dialog.addEventListener(\"close\", ()=>{\n                    dialog.removeEventListener(\"click\", closeOutsideClick);\n                    document.removeEventListener(\"keydown\", closeOnEsc);\n                }, {\n                    once: true\n                });\n            } else console.error(\"Dialog element not found\");\n        });\n        // Show the list item\n        rowElement.setStyle({\n            display: \"block\"\n        });\n        return rowElement;\n    });\n    // Handle resend invite form submission\n    const caregiverRequestingAnimation = new (0, _core.WFComponent)(\"#caregiverRequestingAnimation\");\n    const submitCaregiverError = new (0, _core.WFComponent)(\"#submitCaregiverError\");\n    const onSuccessTrigger = new (0, _core.WFComponent)(\"#resendCaregiverInviteSuccessTrigger\");\n    resendInviteForm.onFormSubmit(async (formData, event)=>{\n        event.preventDefault(); // Stop the form from submitting normally\n        caregiverRequestingAnimation.setStyle({\n            display: \"block\"\n        }); // Show loading animation\n        if (!selectedEmail) {\n            console.error(\"No email selected\");\n            (0, _formUtils.toggleError)(submitCaregiverError, \"No email selected. Please try again.\", true);\n            caregiverRequestingAnimation.setStyle({\n                display: \"none\"\n            }); // Hide loading animation\n            return;\n        }\n        console.log(\"Selected email before sending:\", selectedEmail);\n        // Handle reCAPTCHA verification\n        const recaptchaAction = \"resend_caregiver_invite\";\n        const isRecaptchaValid = await (0, _recaptchaUtils.handleRecaptcha)(recaptchaAction);\n        if (!isRecaptchaValid) {\n            (0, _formUtils.toggleError)(submitCaregiverError, \"reCAPTCHA verification failed. Please try again.\", true);\n            caregiverRequestingAnimation.setStyle({\n                display: \"none\"\n            }); // Hide loading animation\n            return;\n        }\n        // Post data to a server endpoint\n        try {\n            console.log(\"Sending request to /caregivers/invite with data:\", {\n                caregiver_email: selectedEmail\n            });\n            const response = await (0, _apiConfig.apiClient).post(\"/caregivers/invite\", {\n                data: {\n                    caregiver_email: selectedEmail\n                }\n            }).fetch();\n            console.log(\"Invite sent successfully:\", response);\n            resendInviteForm.showSuccessState(); // Show success state\n            isResendInviteSuccess = true;\n            onSuccessTrigger.getElement().click(); // Trigger the resend success action\n            caregiverRequestingAnimation.setStyle({\n                display: \"none\"\n            }); // Hide loading animation\n            // Reload the caregiver list\n            await reloadCaregiverList(list);\n            // Reload the additional student list\n            await (0, _listAdditionalStudents.reloadAdditionalStudentList)();\n        } catch (error) {\n            console.error(\"Error sending invite:\", error);\n            (0, _formUtils.toggleError)(submitCaregiverError, error.response?.data?.message || \"Failed to send invite.\", true);\n            caregiverRequestingAnimation.setStyle({\n                display: \"none\"\n            }); // Hide loading animation\n        }\n    });\n    // Handle delete caregiver form submission\n    const caregiverDeletingAnimation = new (0, _core.WFComponent)(\"#caregiverDeletingAnimation\");\n    const submitDeleteCaregiverError = new (0, _core.WFComponent)(\"#submitDeleteCaregiverError\");\n    const onDeleteSuccessTrigger = new (0, _core.WFComponent)(\"#deleteCaregiverSuccessTrigger\");\n    deleteCaregiverForm.onFormSubmit(async (formData, event)=>{\n        event.preventDefault(); // Stop the form from submitting normally\n        caregiverDeletingAnimation.setStyle({\n            display: \"block\"\n        }); // Show loading animation\n        if (!selectedCaregiverId) {\n            console.error(\"No caregiver ID selected\");\n            (0, _formUtils.toggleError)(submitDeleteCaregiverError, \"No caregiver ID selected. Please try again.\", true);\n            caregiverDeletingAnimation.setStyle({\n                display: \"none\"\n            }); // Hide loading animation\n            return;\n        }\n        console.log(\"Selected caregiver ID before deleting:\", selectedCaregiverId);\n        // Handle reCAPTCHA verification\n        const recaptchaAction = \"delete_caregiver\";\n        const isRecaptchaValid = await (0, _recaptchaUtils.handleRecaptcha)(recaptchaAction);\n        if (!isRecaptchaValid) {\n            (0, _formUtils.toggleError)(submitDeleteCaregiverError, \"reCAPTCHA verification failed. Please try again.\", true);\n            caregiverDeletingAnimation.setStyle({\n                display: \"none\"\n            }); // Hide loading animation\n            return;\n        }\n        // Delete data from the server endpoint\n        try {\n            console.log(`Sending delete request to /caregivers/${selectedCaregiverId}`);\n            const response = await (0, _apiConfig.apiClient).delete(`/caregivers/${selectedCaregiverId}`).fetch();\n            console.log(\"Caregiver deleted successfully:\", response);\n            deleteCaregiverForm.showSuccessState(); // Show success state\n            isDeleteCaregiverSuccess = true;\n            onDeleteSuccessTrigger.getElement().click(); // Trigger the delete success action\n            caregiverDeletingAnimation.setStyle({\n                display: \"none\"\n            }); // Hide loading animation\n            // Reload the caregiver list\n            await reloadCaregiverList(list);\n            // Reload the additional student list\n            await (0, _listAdditionalStudents.reloadAdditionalStudentList)();\n        } catch (error) {\n            console.error(\"Error deleting caregiver:\", error);\n            (0, _formUtils.toggleError)(submitDeleteCaregiverError, error.response?.data?.message || \"Failed to delete caregiver.\", true);\n            caregiverDeletingAnimation.setStyle({\n                display: \"none\"\n            }); // Hide loading animation\n        }\n    });\n    // Initialize the form components\n    const fieldsCaregiver = [\n        {\n            input: new (0, _core.WFComponent)(\"#caregiverEmailInput\"),\n            error: new (0, _core.WFComponent)(\"#caregiverEmailInputError\"),\n            validationFn: (0, _validationUtils.validateEmail),\n            message: \"Please enter a valid email address\"\n        }\n    ];\n    // Handle invite caregiver form submission\n    const caregiverInviteAnimation = new (0, _core.WFComponent)(\"#caregiverRequestingAnimation\");\n    const submitInviteCaregiverError = new (0, _core.WFComponent)(\"#submitInviteCaregiverError\");\n    const inviteSuccessTrigger = new (0, _core.WFComponent)(\"#inviteCaregiverSuccessTrigger\");\n    inviteCaregiverForm.onFormSubmit(async (formData, event)=>{\n        event.preventDefault(); // Stop the form from submitting normally\n        caregiverInviteAnimation.setStyle({\n            display: \"block\"\n        }); // Show loading animation\n        let isFormValid = true;\n        // Validate all fields before proceeding\n        fieldsCaregiver.forEach(({ input, error, validationFn, message })=>{\n            const errorMessage = (0, _formUtils.createValidationFunction)(input, validationFn, message)();\n            if (errorMessage) {\n                (0, _formUtils.toggleError)(error, errorMessage, true);\n                isFormValid = false;\n            } else (0, _formUtils.toggleError)(error, \"\", false);\n        });\n        if (!isFormValid) {\n            console.log(\"Validation failed:\", formData);\n            (0, _formUtils.toggleError)(submitInviteCaregiverError, \"Please correct all errors above.\", true);\n            caregiverInviteAnimation.setStyle({\n                display: \"none\"\n            }); // Hide loading animation\n            return;\n        }\n        // Handle reCAPTCHA verification\n        const recaptchaAction = \"invite_caregiver\";\n        const isRecaptchaValid = await (0, _recaptchaUtils.handleRecaptcha)(recaptchaAction);\n        if (!isRecaptchaValid) {\n            (0, _formUtils.toggleError)(submitInviteCaregiverError, \"reCAPTCHA verification failed. Please try again.\", true);\n            caregiverInviteAnimation.setStyle({\n                display: \"none\"\n            }); // Hide loading animation\n            return;\n        }\n        // Post data to a server endpoint\n        try {\n            console.log(\"Sending request to /caregivers/invite with data:\", formData);\n            const response = await (0, _apiConfig.apiClient).post(\"/caregivers/invite\", {\n                data: formData\n            }).fetch();\n            if (response.status === \"success\") {\n                inviteCaregiverForm.showSuccessState();\n                isInviteCaregiverSuccess = true;\n                inviteSuccessTrigger.getElement().click();\n                caregiverInviteAnimation.setStyle({\n                    display: \"none\"\n                }); // Hide loading animation\n                // Reload the caregiver list\n                await reloadCaregiverList(list);\n                // Reload the additional student list\n                await (0, _listAdditionalStudents.reloadAdditionalStudentList)();\n            }\n        } catch (error) {\n            (0, _formUtils.toggleError)(submitInviteCaregiverError, error.response?.data?.message || \"Failed to send invite.\", true);\n            caregiverInviteAnimation.setStyle({\n                display: \"none\"\n            }); // Hide loading animation\n        }\n    });\n    // Load and display caregiver profiles\n    try {\n        await reloadCaregiverList(list);\n    } catch (error) {\n        console.error(\"Error loading caregiver profiles:\", error);\n    }\n    // Attach event listener to the invite caregiver button\n    const inviteCaregiverButton = document.getElementById(\"inviteCaregiver\");\n    if (inviteCaregiverButton) inviteCaregiverButton.addEventListener(\"click\", ()=>{\n        const dialog = document.getElementById(\"inviteCaregiverDialog\");\n        if (dialog) {\n            dialog.showModal();\n            document.body.style.overflow = \"hidden\"; // Prevent page scroll\n            const closeDialog = ()=>{\n                dialog.close();\n                document.body.style.overflow = \"auto\"; // Restore page scroll\n                resetCaregiverForm.getElement().click();\n            };\n            // Close dialog when clicking outside of it\n            const closeOutsideClick = (event)=>{\n                if (event.target === dialog) closeDialog();\n            };\n            dialog.addEventListener(\"click\", closeOutsideClick);\n            // Close dialog on pressing ESC key\n            const closeOnEsc = (event)=>{\n                if (event.key === \"Escape\" && dialog.open) closeDialog();\n            };\n            document.addEventListener(\"keydown\", closeOnEsc);\n            // Close dialog when clicking the close button\n            const closeDialogBtn = dialog.querySelector(\"#close-dialog-btn\");\n            if (closeDialogBtn) closeDialogBtn.addEventListener(\"click\", ()=>{\n                closeDialog();\n            }, {\n                once: true\n            });\n            // Remove event listeners when the dialog is closed\n            dialog.addEventListener(\"close\", ()=>{\n                dialog.removeEventListener(\"click\", closeOutsideClick);\n                document.removeEventListener(\"keydown\", closeOnEsc);\n            }, {\n                once: true\n            });\n        } else console.error(\"Dialog element not found\");\n    });\n    else console.error(\"Invite caregiver button not found\");\n}\nasync function reloadCaregiverList(list) {\n    try {\n        const caregivers = await fetchCaregiverProfiles();\n        console.log(\"Fetched caregivers:\", caregivers); // Log the fetched caregivers for debugging\n        // Sort caregivers alphabetically by email\n        caregivers.sort((a, b)=>a.email.localeCompare(b.email));\n        list.setData(caregivers);\n        // Log all resend buttons found in the dynamic list\n        const resendButtons = list.getElement().querySelectorAll(\".resend-invite-btn\");\n        console.log(\"Resend buttons found:\", resendButtons);\n        // Log all delete buttons found in the dynamic list\n        const deleteButtons = list.getElement().querySelectorAll(\".delete-caregiver-btn\");\n        console.log(\"Delete buttons found:\", deleteButtons);\n    } catch (error) {\n        console.error(\"Error reloading caregiver profiles:\", error);\n    }\n}\n\n},{\"@xatom/core\":\"65YBq\",\"../../api/apiConfig\":\"dUmIV\",\"../../utils/recaptchaUtils\":\"Jsdel\",\"../../utils/formUtils\":\"gepHz\",\"../../utils/validationUtils\":\"gu2z7\",\"./listAdditionalStudents\":\"3njZO\",\"@parcel/transformer-js/src/esmodule-helpers.js\":\"jiucr\"}]},[], null, \"parcelRequired346\")\n\n//# sourceMappingURL=dashboard.3510344e.js.map\n","// src/modules/pages/studentProfile/listStudents.ts\n\nimport { WFDynamicList, WFComponent } from \"@xatom/core\";\nimport { WFImage } from \"@xatom/image\";\nimport { apiClient } from \"../../api/apiConfig\";\n\ninterface Student {\n  id: number;\n  first_name: string;\n  last_name: string;\n  email: string;\n  phone: string;\n  Status: string; // ← add this\n  profile_pic: {\n    url: string;\n  } | null;\n}\n\ninterface StudentApiResponse {\n  students: Student[];\n}\n\nexport async function fetchStudentProfiles(): Promise<Student[]> {\n  try {\n    const getStudents = apiClient.get<StudentApiResponse>(\n      \"/profiles/student_profiles\"\n    );\n    const response = await getStudents.fetch();\n    return response.students;\n  } catch (error) {\n    console.error(\"Error fetching student profiles:\", error);\n    throw error;\n  }\n}\n\nexport async function initializeDynamicStudentList(containerSelector: string) {\n  // Initialize a new instance of WFDynamicList\n  const list = new WFDynamicList<Student>(containerSelector, {\n    rowSelector: \"#listStudentCard\",\n    loaderSelector: \"#listStudentProfilesloading\",\n    emptySelector: \"#listStudentProfilesEmpty\",\n  });\n\n  // Customize the rendering of the loader\n  list.loaderRenderer((loaderElement) => {\n    loaderElement.setStyle({\n      display: \"flex\",\n    });\n    return loaderElement;\n  });\n\n  // Customize the rendering of the empty state\n  list.emptyRenderer((emptyElement) => {\n    emptyElement.setStyle({\n      display: \"flex\",\n    });\n    return emptyElement;\n  });\n\n  // Customize the rendering of list items\n  list.rowRenderer(({ rowData, rowElement }) => {\n    const studentCard = new WFComponent(rowElement);\n\n    // Get the existing href attribute\n    const existingHref = studentCard.getAttribute(\"href\") || \"#\";\n\n    // Create a URL object to manipulate the URL and query parameters\n    let updatedHref: string;\n\n    try {\n      // If the existingHref is a relative URL, we need to provide a base URL\n      const baseUrl = window.location.origin;\n      const url = new URL(existingHref, baseUrl);\n\n      // Set or update the 'id' query parameter\n      url.searchParams.set(\"id\", rowData.id.toString());\n\n      // Convert the URL object back to a string, relative to the base URL\n      updatedHref = url.pathname + url.search + url.hash;\n    } catch (error) {\n      // If there's an error parsing the URL, default to adding ?id={student_id} directly\n      console.error(\"Error parsing URL:\", error);\n      updatedHref = `${existingHref}?id=${rowData.id}`;\n    }\n\n    // Set the updated href back to the student card\n    studentCard.setAttribute(\"href\", updatedHref);\n\n    // Set up the rest of the card components\n    const studentImage = new WFImage(\n      studentCard.getChildAsComponent(\"#listStudentCardImage\").getElement()\n    );\n    const studentName = studentCard.getChildAsComponent(\"#studentName\");\n\n    if (rowData.profile_pic && rowData.profile_pic.url) {\n      studentImage.setImage(rowData.profile_pic.url);\n    } else {\n      studentImage.setImage(\n        \"https://cdn.prod.website-files.com/667f080f36260b9afbdc46b2/682bd6f6403a5cb7582db055_Profile_avatar_placeholder_large.png\"\n      );\n    }\n    studentName.setText(`${rowData.first_name} ${rowData.last_name}`);\n\n    // Show the list item\n    rowElement.setStyle({\n      display: \"block\",\n    });\n    // Show status pills based on student approval status\nconst approvedPill = studentCard.getChildAsComponent(\"#studentApprovedPill\");\nconst pendingPill = studentCard.getChildAsComponent(\"#studentPendingPill\");\n\nconst status = rowData.Status?.toUpperCase() || \"\"; // Note capital 'S'\n\nif (status === \"APPROVED\") {\n  approvedPill.setStyle({ display: \"block\" });\n  pendingPill.setStyle({ display: \"none\" });\n} else {\n  approvedPill.setStyle({ display: \"none\" });\n  pendingPill.setStyle({ display: \"block\" });\n}\n\n    return rowElement;\n  });\n\n  // Load and display student profiles\n  try {\n    // Enable the loading state\n    list.changeLoadingStatus(true);\n\n    const students = await fetchStudentProfiles();\n\n    // Sort students alphabetically by last name\n    students.sort((a, b) => a.last_name.localeCompare(b.last_name));\n\n    // Set the data to be displayed in the dynamic list\n    list.setData(students);\n\n    // Disable the loading state\n    list.changeLoadingStatus(false);\n  } catch (error) {\n    console.error(\"Error loading student profiles:\", error);\n\n    // If there's an error, set an empty array to trigger the empty state\n    list.setData([]);\n\n    // Disable the loading state\n    list.changeLoadingStatus(false);\n  }\n}\n","// src/modules/pages/studentProfile/listAdditionalStudents.ts\n\nimport { WFDynamicList, WFComponent } from \"@xatom/core\";\nimport { WFImage } from \"@xatom/image\";\nimport { apiClient } from \"../../api/apiConfig\";\n\ninterface AdditionalStudent {\n  id: number;\n  first_name: string;\n  last_name: string;\n  email: string;\n  phone: string;\n  profile_pic: {\n    url: string;\n  } | null;\n  parent_name: string;\n}\n\ninterface AdditionalStudentApiResponse {\n  additional_students: AdditionalStudent[];\n}\n\nlet additionalStudentList: WFDynamicList<AdditionalStudent> | null = null;\n\nexport async function fetchAdditionalStudentProfiles(): Promise<\n  AdditionalStudent[]\n> {\n  try {\n    const getAdditionalStudents = apiClient.get<AdditionalStudentApiResponse>(\n      \"/profiles/additional_students\"\n    );\n    const response = await getAdditionalStudents.fetch();\n    return response.additional_students;\n  } catch (error) {\n    console.error(\"Error fetching additional student profiles:\", error);\n    throw error;\n  }\n}\n\nexport async function initializeDynamicAdditionalStudentList(\n  containerSelector: string\n) {\n  // Initialize a new instance of WFDynamicList if not already initialized\n  if (!additionalStudentList) {\n    additionalStudentList = new WFDynamicList<AdditionalStudent>(\n      containerSelector,\n      {\n        rowSelector: \"#listAdditionalStudentCard\",\n        loaderSelector: \"#listAdditionalStudentProfilesloading\",\n        emptySelector: \"#listAdditionalStudentProfilesEmpty\",\n      }\n    );\n\n    // Customize the rendering of the loader\n    additionalStudentList.loaderRenderer((loaderElement) => {\n      loaderElement.setStyle({\n        display: \"flex\",\n      });\n      return loaderElement;\n    });\n\n    // Customize the rendering of the empty state\n    additionalStudentList.emptyRenderer((emptyElement) => {\n      emptyElement.setStyle({\n        display: \"flex\",\n      });\n      return emptyElement;\n    });\n\n    // Customize the rendering of list items\n    additionalStudentList.rowRenderer(({ rowData, rowElement }) => {\n      const studentCard = new WFComponent(rowElement);\n\n      // Get the existing href attribute or set a default\n      const existingHref = studentCard.getAttribute(\"href\") || \"#\";\n\n      // Initialize the updatedHref variable\n      let updatedHref: string;\n\n      try {\n        // If the existingHref is a relative URL, provide a base URL\n        const baseUrl = window.location.origin;\n        const url = new URL(existingHref, baseUrl);\n\n        // Set or update the 'id' query parameter with the additional student's ID\n        url.searchParams.set(\"id\", rowData.id.toString());\n\n        // Convert the URL object back to a relative URL string\n        updatedHref = url.pathname + url.search + url.hash;\n      } catch (error) {\n        // If there's an error parsing the URL, default to adding ?id={additional_student_id} directly\n        console.error(\"Error parsing URL:\", error);\n        updatedHref = `${existingHref}?id=${rowData.id}`;\n      }\n\n      // Set the updated href back to the student card\n      studentCard.setAttribute(\"href\", updatedHref);\n\n      // Update the student image\n      const studentImage = new WFImage(\n        studentCard\n          .getChildAsComponent(\"#listAdditionalStudentCardImage\")\n          .getElement()\n      );\n\n      if (rowData.profile_pic && rowData.profile_pic.url) {\n        studentImage.setImage(rowData.profile_pic.url);\n      } else {\n        studentImage.setImage(\n          \"https://cdn.prod.website-files.com/66102236c16b61185de61fe3/66102236c16b61185de6204e_placeholder.svg\"\n        );\n      }\n\n      // Update the student name\n      const studentName = studentCard.getChildAsComponent(\n        \"#additionalStudentName\"\n      );\n      studentName.setText(`${rowData.first_name} ${rowData.last_name}`);\n\n      // Update the parent name\n      const parentName = studentCard.getChildAsComponent(\"#parentName\");\n      parentName.setText(rowData.parent_name);\n\n      // Show the list item\n      rowElement.setStyle({\n        display: \"flex\",\n      });\n\n      return rowElement;\n    });\n\n    // Load and display additional student profiles\n    try {\n      // Enable the loading state\n      additionalStudentList.changeLoadingStatus(true);\n\n      const additionalStudents = await fetchAdditionalStudentProfiles();\n\n      // Sort additional students alphabetically by last name\n      additionalStudents.sort((a, b) => a.last_name.localeCompare(b.last_name));\n\n      // Set the data to be displayed in the dynamic list\n      additionalStudentList.setData(additionalStudents);\n\n      // Disable the loading state\n      additionalStudentList.changeLoadingStatus(false);\n    } catch (error) {\n      console.error(\"Error loading additional student profiles:\", error);\n\n      // If there's an error, set an empty array to trigger the empty state\n      additionalStudentList.setData([]);\n\n      // Disable the loading state\n      additionalStudentList.changeLoadingStatus(false);\n    }\n  }\n}\n\nexport async function reloadAdditionalStudentList() {\n  if (!additionalStudentList) {\n    console.error(\"Additional student list is not initialized.\");\n    return;\n  }\n\n  try {\n    additionalStudentList.changeLoadingStatus(true);\n\n    const additionalStudents = await fetchAdditionalStudentProfiles();\n\n    // Sort additional students alphabetically by last name\n    additionalStudents.sort((a, b) => a.last_name.localeCompare(b.last_name));\n\n    // Update the data in the dynamic list\n    additionalStudentList.setData(additionalStudents);\n\n    additionalStudentList.changeLoadingStatus(false);\n  } catch (error) {\n    console.error(\"Error reloading additional student profiles:\", error);\n    additionalStudentList.setData([]);\n    additionalStudentList.changeLoadingStatus(false);\n  }\n}\n","// src/modules/pages/caregivers/listCaregivers.ts\n\nimport { WFDynamicList, WFComponent, WFFormComponent } from \"@xatom/core\";\nimport { apiClient } from \"../../api/apiConfig\";\nimport { handleRecaptcha } from \"../../utils/recaptchaUtils\";\nimport { toggleError, createValidationFunction } from \"../../utils/formUtils\";\nimport { validateEmail } from \"../../utils/validationUtils\";\nimport {\n  initializeDynamicAdditionalStudentList,\n  reloadAdditionalStudentList,\n} from \"./listAdditionalStudents\";\n\ninterface Caregiver {\n  id: number;\n  status: string;\n  name: string;\n  email: string;\n}\n\ninterface CaregiverApiResponse {\n  caregivers: Caregiver[];\n}\n\ninterface CaregiverResponse {\n  status: string;\n  message: string;\n}\n\n// Declare dialog forms and reset buttons first\nconst resendInviteForm = new WFFormComponent(\"#resendCaregiverInviteForm\");\nconst deleteCaregiverForm = new WFFormComponent(\"#deleteCaregiverForm\");\nconst inviteCaregiverForm = new WFFormComponent(\"#inviteCaregiverForm\");\n\nconst resetCaregiverForm = new WFComponent(\"#resetCaregiverForm\");\nconst resetDeleteCaregiverForm = new WFComponent(\"#resetDeleteCaregiverForm\");\nconst resetResendInviteForm = new WFComponent(\n  \"#resetResendCaregiverInviteForm\"\n);\n\n// Declare success triggers\nconst resendCaregiverInviteSuccessTrigger = new WFComponent(\n  \"#resendCaregiverInviteSuccessTrigger\"\n);\nconst deleteCaregiverSuccessTrigger = new WFComponent(\n  \"#deleteCaregiverSuccessTrigger\"\n);\nconst inviteCaregiverSuccessTrigger = new WFComponent(\n  \"#inviteCaregiverSuccessTrigger\"\n);\n\n// Flags to track success state\nlet isResendInviteSuccess = false;\nlet isDeleteCaregiverSuccess = false;\nlet isInviteCaregiverSuccess = false;\n\n// Attach reset button event listeners\nresetCaregiverForm.on(\"click\", () => {\n  console.log(\"Reset Caregiver Form clicked\");\n  inviteCaregiverForm.resetForm();\n  inviteCaregiverForm.showForm();\n  if (isInviteCaregiverSuccess) {\n    inviteCaregiverSuccessTrigger.getElement().click();\n    isInviteCaregiverSuccess = false;\n  }\n});\n\nresetDeleteCaregiverForm.on(\"click\", () => {\n  console.log(\"Reset Delete Caregiver Form clicked\");\n  deleteCaregiverForm.resetForm();\n  deleteCaregiverForm.showForm();\n  if (isDeleteCaregiverSuccess) {\n    deleteCaregiverSuccessTrigger.getElement().click();\n    isDeleteCaregiverSuccess = false;\n  }\n});\n\nresetResendInviteForm.on(\"click\", () => {\n  console.log(\"Reset Resend Invite Form clicked\");\n  resendInviteForm.resetForm();\n  resendInviteForm.showForm();\n  if (isResendInviteSuccess) {\n    resendCaregiverInviteSuccessTrigger.getElement().click();\n    isResendInviteSuccess = false;\n  }\n});\n\nexport async function fetchCaregiverProfiles(): Promise<Caregiver[]> {\n  try {\n    const getCaregivers = apiClient.get<CaregiverApiResponse>(\"/caregivers\");\n    const response = await getCaregivers.fetch();\n    console.log(\"API response:\", response); // Log the entire response for debugging\n\n    if (response.caregivers && Array.isArray(response.caregivers)) {\n      return response.caregivers;\n    } else {\n      throw new Error(\"Invalid response structure\");\n    }\n  } catch (error) {\n    console.error(\"Error fetching caregiver profiles:\", error);\n    throw error;\n  }\n}\n\nexport async function initializeDynamicCaregiverList(\n  containerSelector: string\n) {\n  // Ensure the container exists before initializing the list\n  const container = document.querySelector(containerSelector);\n  if (!container) {\n    console.error(\"Container not found for selector:\", containerSelector);\n    return;\n  }\n\n  // Initialize a new instance of WFDynamicList\n  const list = new WFDynamicList<Caregiver>(containerSelector, {\n    rowSelector: \"#caregiverCard\",\n    loaderSelector: \"#caregiversLoading\",\n    emptySelector: \"#caregiversEmpty\",\n  });\n\n  // Initialize the additional student list\n  initializeDynamicAdditionalStudentList(\"#listAdditionalStudentProfiles\");\n\n  let selectedEmail: string | null = null;\n  let selectedCaregiverId: number | null = null;\n\n  // Customize the rendering of the loader\n  list.loaderRenderer((loaderElement) => {\n    loaderElement.setStyle({\n      display: \"flex\",\n    });\n    return loaderElement;\n  });\n\n  // Customize the rendering of the empty state\n  list.emptyRenderer((emptyElement) => {\n    emptyElement.setStyle({\n      display: \"block\",\n    });\n    return emptyElement;\n  });\n\n  // Customize the rendering of list items\n  list.rowRenderer(({ rowData, rowElement }) => {\n    const caregiverCard = new WFComponent(rowElement);\n\n    // Element to display name or email\n    const caregiverDisplayName =\n      caregiverCard.getChildAsComponent(\"#caregiverEmail\");\n\n    // Conditional display of name or email\n    const displayName = rowData.name ? rowData.name : rowData.email;\n    caregiverDisplayName.setText(displayName);\n\n    // Status and buttons\n    const caregiverStatus =\n      caregiverCard.getChildAsComponent(\"#caregiverStatus\");\n    const resendButton =\n      caregiverCard.getChildAsComponent(\".resend-invite-btn\");\n    const deleteButton = caregiverCard.getChildAsComponent(\n      \".delete-caregiver-btn\"\n    );\n\n    caregiverStatus.setText(rowData.status);\n\n    // Hide the resend button if the status is \"Active\"\n    if (rowData.status === \"Active\") {\n      resendButton.setStyle({ display: \"none\" });\n    }\n\n    // Attach event listener to the resend button\n    resendButton.on(\"click\", () => {\n      const dialog = document.getElementById(\n        \"resendCaregiverInviteDialog\"\n      ) as HTMLDialogElement;\n      if (dialog) {\n        selectedEmail = rowData.email; // Store the email for later use\n        console.log(\"Selected email:\", selectedEmail);\n        dialog.showModal();\n        document.body.style.overflow = \"hidden\"; // Prevent page scroll\n\n        const closeDialog = () => {\n          dialog.close();\n          document.body.style.overflow = \"auto\"; // Restore page scroll\n          resetResendInviteForm.getElement().click();\n        };\n\n        // Close dialog when clicking outside of it\n        const closeOutsideClick = (event: MouseEvent) => {\n          if (event.target === dialog) {\n            closeDialog();\n          }\n        };\n        dialog.addEventListener(\"click\", closeOutsideClick);\n\n        // Close dialog on pressing ESC key\n        const closeOnEsc = (event: KeyboardEvent) => {\n          if (event.key === \"Escape\" && dialog.open) {\n            closeDialog();\n          }\n        };\n        document.addEventListener(\"keydown\", closeOnEsc);\n\n        // Close dialog when clicking the close button\n        const closeDialogBtn = dialog.querySelector(\n          \"#close-dialog-btn\"\n        ) as HTMLButtonElement;\n        if (closeDialogBtn) {\n          closeDialogBtn.addEventListener(\"click\", () => {\n            closeDialog();\n          });\n        }\n\n        // Remove event listeners when the dialog is closed\n        dialog.addEventListener(\n          \"close\",\n          () => {\n            dialog.removeEventListener(\"click\", closeOutsideClick);\n            document.removeEventListener(\"keydown\", closeOnEsc);\n          },\n          { once: true }\n        );\n      } else {\n        console.error(\"Dialog element not found\");\n      }\n    });\n\n    // Attach event listener to the delete button\n    const dashboardWrapper = new WFComponent(\".page_main\");\n\n    deleteButton.on(\"click\", () => {\n      dashboardWrapper.setAttribute(\"data-brand\", \"6\");\n      const dialog = document.getElementById(\n        \"deleteCaregiverDialog\"\n      ) as HTMLDialogElement;\n      if (dialog) {\n        selectedCaregiverId = rowData.id; // Store the caregiver ID for later use\n        console.log(\"Selected caregiver ID:\", selectedCaregiverId);\n        dialog.showModal();\n        document.body.style.overflow = \"hidden\"; // Prevent page scroll\n\n        const closeDialog = () => {\n          dialog.close();\n          document.body.style.overflow = \"auto\"; // Restore page scroll\n          resetDeleteCaregiverForm.getElement().click();\n          dashboardWrapper.setAttribute(\"data-brand\", \"2\");\n        };\n\n        // Close dialog when clicking outside of it\n        const closeOutsideClick = (event: MouseEvent) => {\n          if (event.target === dialog) {\n            closeDialog();\n            dashboardWrapper.setAttribute(\"data-brand\", \"2\");\n          }\n        };\n        dialog.addEventListener(\"click\", closeOutsideClick);\n\n        // Close dialog on pressing ESC key\n        const closeOnEsc = (event: KeyboardEvent) => {\n          if (event.key === \"Escape\" && dialog.open) {\n            closeDialog();\n            dashboardWrapper.setAttribute(\"data-brand\", \"2\");\n          }\n        };\n        document.addEventListener(\"keydown\", closeOnEsc);\n\n        // Close dialog when clicking the close button\n        const closeDialogBtn = dialog.querySelector(\n          \"#close-dialog-btn\"\n        ) as HTMLButtonElement;\n        if (closeDialogBtn) {\n          closeDialogBtn.addEventListener(\n            \"click\",\n            () => {\n              closeDialog();\n              dashboardWrapper.setAttribute(\"data-brand\", \"2\");\n            },\n            { once: true }\n          );\n        }\n\n        // Remove event listeners when the dialog is closed\n        dialog.addEventListener(\n          \"close\",\n          () => {\n            dialog.removeEventListener(\"click\", closeOutsideClick);\n            document.removeEventListener(\"keydown\", closeOnEsc);\n          },\n          { once: true }\n        );\n      } else {\n        console.error(\"Dialog element not found\");\n      }\n    });\n\n    // Show the list item\n    rowElement.setStyle({\n      display: \"block\",\n    });\n\n    return rowElement;\n  });\n\n  // Handle resend invite form submission\n  const caregiverRequestingAnimation = new WFComponent(\n    \"#caregiverRequestingAnimation\"\n  );\n  const submitCaregiverError = new WFComponent(\"#submitCaregiverError\");\n  const onSuccessTrigger = new WFComponent(\n    \"#resendCaregiverInviteSuccessTrigger\"\n  );\n\n  resendInviteForm.onFormSubmit(async (formData, event) => {\n    event.preventDefault(); // Stop the form from submitting normally\n    caregiverRequestingAnimation.setStyle({ display: \"block\" }); // Show loading animation\n\n    if (!selectedEmail) {\n      console.error(\"No email selected\");\n      toggleError(\n        submitCaregiverError,\n        \"No email selected. Please try again.\",\n        true\n      );\n      caregiverRequestingAnimation.setStyle({ display: \"none\" }); // Hide loading animation\n      return;\n    }\n\n    console.log(\"Selected email before sending:\", selectedEmail);\n\n    // Handle reCAPTCHA verification\n    const recaptchaAction = \"resend_caregiver_invite\";\n    const isRecaptchaValid = await handleRecaptcha(recaptchaAction);\n\n    if (!isRecaptchaValid) {\n      toggleError(\n        submitCaregiverError,\n        \"reCAPTCHA verification failed. Please try again.\",\n        true\n      );\n      caregiverRequestingAnimation.setStyle({ display: \"none\" }); // Hide loading animation\n      return;\n    }\n\n    // Post data to a server endpoint\n    try {\n      console.log(\"Sending request to /caregivers/invite with data:\", {\n        caregiver_email: selectedEmail,\n      });\n      const response = await apiClient\n        .post(\"/caregivers/invite\", {\n          data: { caregiver_email: selectedEmail },\n        })\n        .fetch();\n\n      console.log(\"Invite sent successfully:\", response);\n      resendInviteForm.showSuccessState(); // Show success state\n      isResendInviteSuccess = true;\n      onSuccessTrigger.getElement().click(); // Trigger the resend success action\n      caregiverRequestingAnimation.setStyle({ display: \"none\" }); // Hide loading animation\n\n      // Reload the caregiver list\n      await reloadCaregiverList(list);\n\n      // Reload the additional student list\n      await reloadAdditionalStudentList();\n    } catch (error) {\n      console.error(\"Error sending invite:\", error);\n      toggleError(\n        submitCaregiverError,\n        error.response?.data?.message || \"Failed to send invite.\",\n        true\n      );\n      caregiverRequestingAnimation.setStyle({ display: \"none\" }); // Hide loading animation\n    }\n  });\n\n  // Handle delete caregiver form submission\n  const caregiverDeletingAnimation = new WFComponent(\n    \"#caregiverDeletingAnimation\"\n  );\n  const submitDeleteCaregiverError = new WFComponent(\n    \"#submitDeleteCaregiverError\"\n  );\n  const onDeleteSuccessTrigger = new WFComponent(\n    \"#deleteCaregiverSuccessTrigger\"\n  );\n\n  deleteCaregiverForm.onFormSubmit(async (formData, event) => {\n    event.preventDefault(); // Stop the form from submitting normally\n    caregiverDeletingAnimation.setStyle({ display: \"block\" }); // Show loading animation\n\n    if (!selectedCaregiverId) {\n      console.error(\"No caregiver ID selected\");\n      toggleError(\n        submitDeleteCaregiverError,\n        \"No caregiver ID selected. Please try again.\",\n        true\n      );\n      caregiverDeletingAnimation.setStyle({ display: \"none\" }); // Hide loading animation\n      return;\n    }\n\n    console.log(\"Selected caregiver ID before deleting:\", selectedCaregiverId);\n\n    // Handle reCAPTCHA verification\n    const recaptchaAction = \"delete_caregiver\";\n    const isRecaptchaValid = await handleRecaptcha(recaptchaAction);\n\n    if (!isRecaptchaValid) {\n      toggleError(\n        submitDeleteCaregiverError,\n        \"reCAPTCHA verification failed. Please try again.\",\n        true\n      );\n      caregiverDeletingAnimation.setStyle({ display: \"none\" }); // Hide loading animation\n      return;\n    }\n\n    // Delete data from the server endpoint\n    try {\n      console.log(\n        `Sending delete request to /caregivers/${selectedCaregiverId}`\n      );\n      const response = await apiClient\n        .delete(`/caregivers/${selectedCaregiverId}`)\n        .fetch();\n\n      console.log(\"Caregiver deleted successfully:\", response);\n      deleteCaregiverForm.showSuccessState(); // Show success state\n      isDeleteCaregiverSuccess = true;\n      onDeleteSuccessTrigger.getElement().click(); // Trigger the delete success action\n      caregiverDeletingAnimation.setStyle({ display: \"none\" }); // Hide loading animation\n\n      // Reload the caregiver list\n      await reloadCaregiverList(list);\n\n      // Reload the additional student list\n      await reloadAdditionalStudentList();\n    } catch (error) {\n      console.error(\"Error deleting caregiver:\", error);\n      toggleError(\n        submitDeleteCaregiverError,\n        error.response?.data?.message || \"Failed to delete caregiver.\",\n        true\n      );\n      caregiverDeletingAnimation.setStyle({ display: \"none\" }); // Hide loading animation\n    }\n  });\n\n  // Initialize the form components\n\n  const fieldsCaregiver = [\n    {\n      input: new WFComponent(\"#caregiverEmailInput\"),\n      error: new WFComponent(\"#caregiverEmailInputError\"),\n      validationFn: validateEmail,\n      message: \"Please enter a valid email address\",\n    },\n  ];\n\n  // Handle invite caregiver form submission\n  const caregiverInviteAnimation = new WFComponent(\n    \"#caregiverRequestingAnimation\"\n  );\n  const submitInviteCaregiverError = new WFComponent(\n    \"#submitInviteCaregiverError\"\n  );\n  const inviteSuccessTrigger = new WFComponent(\n    \"#inviteCaregiverSuccessTrigger\"\n  );\n\n  inviteCaregiverForm.onFormSubmit(async (formData, event) => {\n    event.preventDefault(); // Stop the form from submitting normally\n    caregiverInviteAnimation.setStyle({ display: \"block\" }); // Show loading animation\n\n    let isFormValid = true;\n    // Validate all fields before proceeding\n    fieldsCaregiver.forEach(({ input, error, validationFn, message }) => {\n      const errorMessage = createValidationFunction(\n        input,\n        validationFn,\n        message\n      )();\n\n      if (errorMessage) {\n        toggleError(error, errorMessage, true);\n        isFormValid = false;\n      } else {\n        toggleError(error, \"\", false);\n      }\n    });\n\n    if (!isFormValid) {\n      console.log(\"Validation failed:\", formData);\n      toggleError(\n        submitInviteCaregiverError,\n        \"Please correct all errors above.\",\n        true\n      );\n      caregiverInviteAnimation.setStyle({ display: \"none\" }); // Hide loading animation\n      return;\n    }\n\n    // Handle reCAPTCHA verification\n    const recaptchaAction = \"invite_caregiver\";\n    const isRecaptchaValid = await handleRecaptcha(recaptchaAction);\n\n    if (!isRecaptchaValid) {\n      toggleError(\n        submitInviteCaregiverError,\n        \"reCAPTCHA verification failed. Please try again.\",\n        true\n      );\n      caregiverInviteAnimation.setStyle({ display: \"none\" }); // Hide loading animation\n      return;\n    }\n\n    // Post data to a server endpoint\n    try {\n      console.log(\"Sending request to /caregivers/invite with data:\", formData);\n      const response = await apiClient\n        .post<CaregiverResponse>(\"/caregivers/invite\", { data: formData })\n        .fetch();\n\n      if (response.status === \"success\") {\n        inviteCaregiverForm.showSuccessState();\n        isInviteCaregiverSuccess = true;\n        inviteSuccessTrigger.getElement().click();\n        caregiverInviteAnimation.setStyle({ display: \"none\" }); // Hide loading animation\n\n        // Reload the caregiver list\n        await reloadCaregiverList(list);\n\n        // Reload the additional student list\n        await reloadAdditionalStudentList();\n      }\n    } catch (error) {\n      toggleError(\n        submitInviteCaregiverError,\n        error.response?.data?.message || \"Failed to send invite.\",\n        true\n      );\n      caregiverInviteAnimation.setStyle({ display: \"none\" }); // Hide loading animation\n    }\n  });\n\n  // Load and display caregiver profiles\n  try {\n    await reloadCaregiverList(list);\n  } catch (error) {\n    console.error(\"Error loading caregiver profiles:\", error);\n  }\n\n  // Attach event listener to the invite caregiver button\n  const inviteCaregiverButton = document.getElementById(\"inviteCaregiver\");\n  if (inviteCaregiverButton) {\n    inviteCaregiverButton.addEventListener(\"click\", () => {\n      const dialog = document.getElementById(\n        \"inviteCaregiverDialog\"\n      ) as HTMLDialogElement;\n      if (dialog) {\n        dialog.showModal();\n        document.body.style.overflow = \"hidden\"; // Prevent page scroll\n\n        const closeDialog = () => {\n          dialog.close();\n          document.body.style.overflow = \"auto\"; // Restore page scroll\n          resetCaregiverForm.getElement().click();\n        };\n\n        // Close dialog when clicking outside of it\n        const closeOutsideClick = (event: MouseEvent) => {\n          if (event.target === dialog) {\n            closeDialog();\n          }\n        };\n        dialog.addEventListener(\"click\", closeOutsideClick);\n\n        // Close dialog on pressing ESC key\n        const closeOnEsc = (event: KeyboardEvent) => {\n          if (event.key === \"Escape\" && dialog.open) {\n            closeDialog();\n          }\n        };\n        document.addEventListener(\"keydown\", closeOnEsc);\n\n        // Close dialog when clicking the close button\n        const closeDialogBtn = dialog.querySelector(\n          \"#close-dialog-btn\"\n        ) as HTMLButtonElement;\n        if (closeDialogBtn) {\n          closeDialogBtn.addEventListener(\n            \"click\",\n            () => {\n              closeDialog();\n            },\n            { once: true }\n          );\n        }\n\n        // Remove event listeners when the dialog is closed\n        dialog.addEventListener(\n          \"close\",\n          () => {\n            dialog.removeEventListener(\"click\", closeOutsideClick);\n            document.removeEventListener(\"keydown\", closeOnEsc);\n          },\n          { once: true }\n        );\n      } else {\n        console.error(\"Dialog element not found\");\n      }\n    });\n  } else {\n    console.error(\"Invite caregiver button not found\");\n  }\n}\n\n// Function to reload the caregiver list\nexport async function reloadCaregiverList(list: WFDynamicList<Caregiver>) {\n  try {\n    const caregivers = await fetchCaregiverProfiles();\n\n    console.log(\"Fetched caregivers:\", caregivers); // Log the fetched caregivers for debugging\n\n    // Sort caregivers alphabetically by email\n    caregivers.sort((a, b) => a.email.localeCompare(b.email));\n\n    list.setData(caregivers);\n\n    // Log all resend buttons found in the dynamic list\n    const resendButtons = list\n      .getElement()\n      .querySelectorAll(\".resend-invite-btn\");\n    console.log(\"Resend buttons found:\", resendButtons);\n\n    // Log all delete buttons found in the dynamic list\n    const deleteButtons = list\n      .getElement()\n      .querySelectorAll(\".delete-caregiver-btn\");\n    console.log(\"Delete buttons found:\", deleteButtons);\n  } catch (error) {\n    console.error(\"Error reloading caregiver profiles:\", error);\n  }\n}\n"],"names":["modules","entry","mainEntry","parcelRequireName","globalName","globalObject","globalThis","self","window","global","previousRequire","cache","nodeRequire","module","require","bind","newRequire","name","jumped","currentRequire","err","Error","code","localRequire","resolve","x","id","Module","call","exports","res","isParcelRequire","moduleName","bundle","parent","register","Object","defineProperty","get","i","length","parcelHelpers","defineInteropFlag","export","fetchStudentProfiles","initializeDynamicStudentList","_core","_image","_apiConfig","getStudents","apiClient","response","fetch","students","error","console","containerSelector","list","WFDynamicList","rowSelector","loaderSelector","emptySelector","loaderRenderer","loaderElement","setStyle","display","emptyRenderer","emptyElement","rowRenderer","rowData","rowElement","updatedHref","studentCard","WFComponent","existingHref","getAttribute","baseUrl","location","origin","url","URL","searchParams","set","toString","pathname","search","hash","setAttribute","studentImage","WFImage","getChildAsComponent","getElement","studentName","profile_pic","setImage","setText","first_name","last_name","approvedPill","pendingPill","status","Status","toUpperCase","changeLoadingStatus","sort","a","b","localeCompare","setData","fetchAdditionalStudentProfiles","initializeDynamicAdditionalStudentList","reloadAdditionalStudentList","additionalStudentList","getAdditionalStudents","additional_students","parentName","parent_name","additionalStudents","fetchCaregiverProfiles","initializeDynamicCaregiverList","reloadCaregiverList","_recaptchaUtils","_formUtils","_validationUtils","_listAdditionalStudents","resendInviteForm","WFFormComponent","deleteCaregiverForm","inviteCaregiverForm","resetCaregiverForm","resetDeleteCaregiverForm","resetResendInviteForm","resendCaregiverInviteSuccessTrigger","deleteCaregiverSuccessTrigger","inviteCaregiverSuccessTrigger","isResendInviteSuccess","isDeleteCaregiverSuccess","isInviteCaregiverSuccess","getCaregivers","log","caregivers","Array","isArray","document","querySelector","selectedEmail","selectedCaregiverId","caregiverCard","caregiverDisplayName","displayName","email","caregiverStatus","resendButton","deleteButton","on","dialog","getElementById","showModal","body","style","overflow","closeDialog","close","click","closeOutsideClick","event","target","addEventListener","closeOnEsc","key","open","closeDialogBtn","removeEventListener","once","dashboardWrapper","caregiverRequestingAnimation","submitCaregiverError","onSuccessTrigger","onFormSubmit","formData","preventDefault","toggleError","handleRecaptcha","caregiver_email","post","data","showSuccessState","message","caregiverDeletingAnimation","submitDeleteCaregiverError","onDeleteSuccessTrigger","delete","fieldsCaregiver","input","validationFn","validateEmail","caregiverInviteAnimation","submitInviteCaregiverError","inviteSuccessTrigger","isFormValid","forEach","errorMessage","createValidationFunction","inviteCaregiverButton","resendButtons","querySelectorAll","deleteButtons","resetForm","showForm"],"version":3,"file":"dashboard.3510344e.js.map"}