{"mappings":"C,A,S,C,C,C,C,C,C,C,C,C,E,I,E,A,a,O,W,W,A,a,O,K,K,A,a,O,O,O,A,a,O,O,O,C,E,E,A,Y,O,C,C,E,E,C,C,E,C,E,E,K,E,C,E,E,A,a,O,Q,A,Y,O,O,O,E,O,O,C,I,C,Q,S,E,C,C,C,E,G,C,C,C,E,C,C,G,C,C,C,E,C,C,I,E,A,Y,O,C,C,E,E,C,C,E,C,G,C,G,E,O,E,E,C,G,G,E,O,E,E,C,G,G,G,A,U,O,E,O,E,G,I,E,A,M,uB,E,I,O,E,I,C,mB,C,C,E,O,C,S,C,E,I,E,C,C,E,C,E,C,E,C,O,A,M,E,E,C,E,E,K,C,C,E,I,E,C,C,E,C,I,E,M,C,G,C,C,E,C,E,C,I,C,E,O,C,E,E,E,O,C,I,C,C,O,C,C,E,C,O,C,S,E,C,E,I,E,E,O,C,G,M,A,C,I,E,C,E,E,E,C,C,E,e,C,C,E,E,M,C,S,C,E,I,C,E,C,E,I,C,M,C,E,I,C,O,C,C,C,E,E,O,C,E,E,K,C,E,E,M,C,E,E,Q,C,S,C,C,C,E,C,C,E,C,C,S,C,C,C,E,E,O,C,C,E,C,E,A,E,O,c,C,E,O,C,I,W,O,C,C,E,A,C,G,C,C,E,C,E,I,I,E,E,E,E,M,C,I,E,C,C,E,C,E,C,M,C,S,C,C,C,C,C,E,I,E,E,kD,E,iB,C,GCsBA,EAAA,MAAA,CAAA,EAAA,yBAAA,IAAsB,GAkJtB,EAAA,MAAA,CAAA,EAAA,YAAA,IAAgB,GAtKhB,IAAA,EAAA,EAAA,uBAEA,EAAA,EAAA,eACA,EAAA,EAAA,mCACA,EAAA,EAAA,wCACA,EAAA,EAAA,4CACA,EAAA,EAAA,0CACA,EAAA,EAAA,uCACA,EAAA,EAAA,gCACA,EAAA,EAAA,2CACA,EAAA,EAAA,iCACA,EAAA,EAAA,0CACA,EAAA,EAAA,+CAEA,IAAM,EAAmB,CACvB,kBAAmB,2BACnB,oBAAqB,qBACrB,mBAAoB,qBACtB,EAEO,eAAe,IAEpB,IAAM,EAAO,MAAM,AAAA,CAAA,EAAA,EAAA,SAAS,AAAT,EAChB,IAAI,CAA6B,sCACjC,KAAK,GACN,GAAI,CAAC,GAAQ,CAAC,EAAK,EAAE,CAAE,CACrB,OAAO,QAAQ,CAAC,IAAI,CAAG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","sources":["<anon>","src/modules/manageSubscription/index.ts","src/modules/manageSubscription/state/manageSubscriptionState.ts","src/modules/manageSubscription/components/manageRegistrationTable.ts","src/modules/manageSubscription/components/manageSubscriptionLineItems.ts","src/modules/manageSubscription/components/manageSubscriptionSummary.ts","src/modules/manageSubscription/components/manageDepositLineItems.ts","src/modules/manageSubscription/components/manageAmountDue.ts","src/modules/manageSubscription/components/managePendingStudentsAlert.ts","src/modules/manageSubscription/components/manageTrialAlert.ts","src/modules/manageSubscription/components/manageSubscriptionDetails.ts","src/modules/manageSubscription/components/manageSubscriptionCancelDialog.ts"],"sourcesContent":["// modules are defined as an array\n// [ module function, map of requires ]\n//\n// map of requires is short require name -> numeric require\n//\n// anything defined in a previous bundle is accessed via the\n// orig method which is the require for previous bundles\n\n(function (modules, entry, mainEntry, parcelRequireName, globalName) {\n  /* eslint-disable no-undef */\n  var globalObject =\n    typeof globalThis !== 'undefined'\n      ? globalThis\n      : typeof self !== 'undefined'\n      ? self\n      : typeof window !== 'undefined'\n      ? window\n      : typeof global !== 'undefined'\n      ? global\n      : {};\n  /* eslint-enable no-undef */\n\n  // Save the require from previous bundle to this closure if any\n  var previousRequire =\n    typeof globalObject[parcelRequireName] === 'function' &&\n    globalObject[parcelRequireName];\n\n  var cache = previousRequire.cache || {};\n  // Do not use `require` to prevent Webpack from trying to bundle this call\n  var nodeRequire =\n    typeof module !== 'undefined' &&\n    typeof module.require === 'function' &&\n    module.require.bind(module);\n\n  function newRequire(name, jumped) {\n    if (!cache[name]) {\n      if (!modules[name]) {\n        // if we cannot find the module within our internal map or\n        // cache jump to the current global require ie. the last bundle\n        // that was added to the page.\n        var currentRequire =\n          typeof globalObject[parcelRequireName] === 'function' &&\n          globalObject[parcelRequireName];\n        if (!jumped && currentRequire) {\n          return currentRequire(name, true);\n        }\n\n        // If there are other bundles on this page the require from the\n        // previous one is saved to 'previousRequire'. Repeat this as\n        // many times as there are bundles until the module is found or\n        // we exhaust the require chain.\n        if (previousRequire) {\n          return previousRequire(name, true);\n        }\n\n        // Try the node require function if it exists.\n        if (nodeRequire && typeof name === 'string') {\n          return nodeRequire(name);\n        }\n\n        var err = new Error(\"Cannot find module '\" + name + \"'\");\n        err.code = 'MODULE_NOT_FOUND';\n        throw err;\n      }\n\n      localRequire.resolve = resolve;\n      localRequire.cache = {};\n\n      var module = (cache[name] = new newRequire.Module(name));\n\n      modules[name][0].call(\n        module.exports,\n        localRequire,\n        module,\n        module.exports,\n        this\n      );\n    }\n\n    return cache[name].exports;\n\n    function localRequire(x) {\n      var res = localRequire.resolve(x);\n      return res === false ? {} : newRequire(res);\n    }\n\n    function resolve(x) {\n      var id = modules[name][1][x];\n      return id != null ? id : x;\n    }\n  }\n\n  function Module(moduleName) {\n    this.id = moduleName;\n    this.bundle = newRequire;\n    this.exports = {};\n  }\n\n  newRequire.isParcelRequire = true;\n  newRequire.Module = Module;\n  newRequire.modules = modules;\n  newRequire.cache = cache;\n  newRequire.parent = previousRequire;\n  newRequire.register = function (id, exports) {\n    modules[id] = [\n      function (require, module) {\n        module.exports = exports;\n      },\n      {},\n    ];\n  };\n\n  Object.defineProperty(newRequire, 'root', {\n    get: function () {\n      return globalObject[parcelRequireName];\n    },\n  });\n\n  globalObject[parcelRequireName] = newRequire;\n\n  for (var i = 0; i < entry.length; i++) {\n    newRequire(entry[i]);\n  }\n\n  if (mainEntry) {\n    // Expose entry point to Node, AMD or browser globals\n    // Based on https://github.com/ForbesLindesay/umd/blob/master/template.js\n    var mainExports = newRequire(mainEntry);\n\n    // CommonJS\n    if (typeof exports === 'object' && typeof module !== 'undefined') {\n      module.exports = mainExports;\n\n      // RequireJS\n    } else if (typeof define === 'function' && define.amd) {\n      define(function () {\n        return mainExports;\n      });\n\n      // <script>\n    } else if (globalName) {\n      this[globalName] = mainExports;\n    }\n  }\n})({\"iTZac\":[function(require,module,exports) {\n// src/manageSubscription/index.ts\nvar parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"manageSubscriptionPage\", ()=>manageSubscriptionPage);\nparcelHelpers.export(exports, \"renderAll\", ()=>renderAll);\nvar _apiConfig = require(\"../../api/apiConfig\");\nvar _core = require(\"@xatom/core\");\nvar _manageSubscriptionState = require(\"./state/manageSubscriptionState\");\nvar _manageRegistrationTable = require(\"./components/manageRegistrationTable\");\nvar _manageSubscriptionLineItems = require(\"./components/manageSubscriptionLineItems\");\nvar _manageSubscriptionSummary = require(\"./components/manageSubscriptionSummary\");\nvar _manageDepositLineItems = require(\"./components/manageDepositLineItems\");\nvar _manageAmountDue = require(\"./components/manageAmountDue\");\nvar _managePendingStudentsAlert = require(\"./components/managePendingStudentsAlert\");\nvar _manageTrialAlert = require(\"./components/manageTrialAlert\");\nvar _manageSubscriptionDetails = require(\"./components/manageSubscriptionDetails\");\nvar _manageSubscriptionCancelDialog = require(\"./components/manageSubscriptionCancelDialog\");\nconst REG_TABLE_CONFIG = {\n    tableBodySelector: \"#subscription_items_list\",\n    templateRowSelector: \"#subscription_item\",\n    emptyStateSelector: \"#subscription_empty\"\n};\nasync function manageSubscriptionPage() {\n    // 1) Fetch & seed state\n    const data = await (0, _apiConfig.apiClient).post(\"/subscriptions/manage-subscription\").fetch();\n    if (!data || !data.id) {\n        window.location.href = \"/dashboard\";\n        return;\n    }\n    const initialType = data.update_subscription_type || data.subscription_type;\n    (0, _manageSubscriptionState.saveState)({\n        apiData: data,\n        registrationItems: data.registrations,\n        updateSubscriptionType: initialType\n    });\n    // 2) Hide action buttons\n    document.querySelector(\".update_button_wrap\")?.setAttribute(\"style\", \"display:none\");\n    document.getElementById(\"resetRegistrations\")?.setAttribute(\"style\", \"display:none\");\n    // 3) Render registration table + hook removals\n    (0, _manageRegistrationTable.initManageRegistrationTable)(data.registrations, REG_TABLE_CONFIG);\n    document.getElementById(\"subscription_items_list\")?.addEventListener(\"click\", (e)=>{\n        const btn = e.target.closest(\".remove_registration_button\");\n        if (btn) handleRemove(btn);\n    });\n    // 4) Initial full render\n    renderAll();\n    // 4a) fire the hidden Lottie trigger now that we have a subscription\n    document.querySelector(\".success_trigger\")?.click();\n    // 5) Dialog & form wiring for “Update Subscription”\n    const form = new (0, _core.WFFormComponent)(\"#cancelSubscriptionForm\");\n    const dialogEl = document.querySelector(\"#removeStudentDialog\");\n    const pageMain = new (0, _core.WFComponent)(\".page_main\");\n    const errorComp = new (0, _core.WFComponent)(\"#submitUpdateError\");\n    const loaderComp = document.querySelector(\"#submitUpdateLoading\");\n    const submitBtn = document.getElementById(\"submitUpdateBtn\");\n    document.getElementById(\"submit_subscription_update\")?.addEventListener(\"click\", (e)=>{\n        e.preventDefault();\n        errorComp.getElement().style.display = \"none\";\n        loaderComp.style.display = \"none\";\n        pageMain.setAttribute(\"data-brand\", \"6\");\n        dialogEl.showModal();\n    });\n    form.onFormSubmit(async (dataMap, ev)=>{\n        ev.preventDefault();\n        errorComp.getElement().style.display = \"none\";\n        const reason = dataMap.removed_because.trim();\n        if (!reason) {\n            errorComp.setText(\"Please enter a reason for your changes.\");\n            errorComp.getElement().style.display = \"block\";\n            return;\n        }\n        loaderComp.style.display = \"block\";\n        try {\n            const state = (0, _manageSubscriptionState.loadState)();\n            const originalIds = state.apiData.registrations.map((r)=>r.id);\n            const keptIds = state.registrationItems.map((r)=>r.id);\n            const toCancel = originalIds.filter((id)=>!keptIds.includes(id));\n            await (0, _apiConfig.apiClient).post(\"/subscriptions/update\", {\n                data: {\n                    subscription_id: state.apiData.id,\n                    registration_item_ids: toCancel,\n                    reason\n                }\n            }).fetch();\n            const fresh = await (0, _apiConfig.apiClient).post(\"/subscriptions/manage-subscription\").fetch();\n            (0, _manageSubscriptionState.saveState)({\n                apiData: fresh,\n                registrationItems: fresh.registrations\n            });\n            renderAll();\n            form.showSuccessState();\n            pageMain.setAttribute(\"data-brand\", \"4\");\n        } catch (err) {\n            console.error(\"Update failed:\", err);\n            form.showErrorState();\n        } finally{\n            loaderComp.style.display = \"none\";\n            submitBtn.removeAttribute(\"disabled\");\n        }\n    });\n    document.getElementById(\"close-dialog-btn\")?.addEventListener(\"click\", ()=>{\n        dialogEl.close();\n        pageMain.setAttribute(\"data-brand\", \"2\");\n        form.showForm();\n        form.resetForm();\n        form.enableForm();\n    });\n    // Reset registrations\n    document.getElementById(\"resetRegistrations\")?.addEventListener(\"click\", ()=>{\n        const orig = (0, _manageSubscriptionState.loadState)().apiData.registrations;\n        (0, _manageSubscriptionState.saveState)({\n            registrationItems: orig\n        });\n        renderAll();\n        document.querySelector(\".update_button_wrap\")?.setAttribute(\"style\", \"display:none\");\n        document.getElementById(\"resetRegistrations\")?.setAttribute(\"style\", \"display:none\");\n    });\n    // 6) Instantiate the cancellation dialog handler\n    new (0, _manageSubscriptionCancelDialog.CancelSubscriptionDialog)();\n}\nfunction renderAll() {\n    const s = (0, _manageSubscriptionState.loadState)();\n    const sub = s.apiData;\n    const items = s.registrationItems;\n    (0, _manageRegistrationTable.initManageRegistrationTable)(items, REG_TABLE_CONFIG);\n    (0, _manageSubscriptionLineItems.initManageLineItems)(sub, items, s.updateSubscriptionType, {\n        listSelector: \"#subscription_line_items_list\",\n        wrapSelector: \"#subscription_line_items_wrap\",\n        emptySelector: \"#subscription_line_items_empty\",\n        templateSelector: \"#subscription_line_item\"\n    });\n    (0, _manageSubscriptionSummary.updateSubscriptionSummary)();\n    (0, _manageDepositLineItems.initManageDepositItems)(sub, items, {\n        containerSelector: \"#deposit_line_items_container\",\n        listSelector: \"#deposit_line_items_list\",\n        templateRowSelector: \"#deposit_item_template\",\n        totalSelector: \"#deposit_total\"\n    });\n    (0, _manageAmountDue.updateAmountDue)();\n    (0, _managePendingStudentsAlert.updatePendingStudentsAlert)(sub);\n    (0, _manageTrialAlert.updateTrialAlert)(sub);\n    (0, _manageSubscriptionDetails.manageSubscriptionDetails)();\n}\nwindow.renderAll = renderAll;\nfunction handleRemove(btn) {\n    const row = btn.closest(\"tr\");\n    if (!row) return;\n    const st = (0, _manageSubscriptionState.loadState)();\n    if (st.registrationItems.length <= 1) {\n        alert(\"You must keep at least one registration.\");\n        return;\n    }\n    row.remove();\n    const kept = st.registrationItems.filter((ri)=>!(ri.session_id.toString() === row.getAttribute(\"data-session-id\") && ri.student_profile.id.toString() === row.getAttribute(\"data-student-id\")));\n    (0, _manageSubscriptionState.saveState)({\n        registrationItems: kept\n    });\n    renderAll();\n    document.querySelector(\".update_button_wrap\")?.setAttribute(\"style\", \"display:block\");\n    document.getElementById(\"resetRegistrations\")?.setAttribute(\"style\", \"display:block\");\n}\n\n},{\"../../api/apiConfig\":\"dUmIV\",\"@xatom/core\":\"65YBq\",\"./state/manageSubscriptionState\":\"1QJMa\",\"./components/manageRegistrationTable\":\"dTqsb\",\"./components/manageSubscriptionLineItems\":\"jEEHZ\",\"./components/manageSubscriptionSummary\":\"6ZLwF\",\"./components/manageDepositLineItems\":\"3mTm6\",\"./components/manageAmountDue\":\"am4Iu\",\"./components/managePendingStudentsAlert\":\"b2MjB\",\"./components/manageTrialAlert\":\"f8n1y\",\"./components/manageSubscriptionDetails\":\"7KC0F\",\"./components/manageSubscriptionCancelDialog\":\"9JwnR\",\"@parcel/transformer-js/src/esmodule-helpers.js\":\"jiucr\"}],\"1QJMa\":[function(require,module,exports) {\n// src/manageSubscription/state/manageSubscriptionState.ts\nvar parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"loadState\", ()=>loadState);\nparcelHelpers.export(exports, \"saveState\", ()=>saveState);\nconst STORAGE_KEY = \"manageSubscriptionState\";\nlet state = loadStateFromStorage() || {\n    apiData: undefined,\n    registrationItems: [],\n    updateSubscriptionType: undefined\n};\nfunction loadState() {\n    return state;\n}\nfunction saveState(newState) {\n    state = {\n        ...state,\n        ...newState\n    };\n    saveStateToStorage(state);\n}\nfunction loadStateFromStorage() {\n    try {\n        const stored = localStorage.getItem(STORAGE_KEY);\n        return stored ? JSON.parse(stored) : null;\n    } catch (error) {\n        console.error(\"Error loading manage subscription state:\", error);\n        return null;\n    }\n}\nfunction saveStateToStorage(state) {\n    try {\n        localStorage.setItem(STORAGE_KEY, JSON.stringify(state));\n    } catch (error) {\n        console.error(\"Error saving manage subscription state:\", error);\n    }\n}\n\n},{\"@parcel/transformer-js/src/esmodule-helpers.js\":\"jiucr\"}],\"dTqsb\":[function(require,module,exports) {\n// src/manageSubscription/components/manageRegistrationTable.ts\nvar parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\n/**\n * Initializes the registration table for managing subscriptions.\n * Clones the template row for each item, populates text fields,\n * sets data-attributes, and handles empty state display.\n */ parcelHelpers.export(exports, \"initManageRegistrationTable\", ()=>initManageRegistrationTable);\nvar _core = require(\"@xatom/core\");\nfunction initManageRegistrationTable(items, config) {\n    // Grab elements\n    const tableBodyComp = new (0, _core.WFComponent)(config.tableBodySelector);\n    const tableBodyEl = tableBodyComp.getElement();\n    const templateRow = document.querySelector(config.templateRowSelector);\n    const emptyRow = document.querySelector(config.emptyStateSelector);\n    if (!templateRow) {\n        console.error(\"Template row not found:\", config.templateRowSelector);\n        return;\n    }\n    if (!emptyRow) {\n        console.error(\"Empty state row not found:\", config.emptyStateSelector);\n        return;\n    }\n    // Remove existing user rows (keep template and empty)\n    Array.from(tableBodyEl.querySelectorAll(\"tr\")).forEach((row)=>{\n        if (row === templateRow || row === emptyRow) return;\n        row.remove();\n    });\n    // Handle empty state\n    if (items.length === 0) {\n        emptyRow.style.display = \"table-row\";\n        return;\n    }\n    emptyRow.style.display = \"none\";\n    // Create a row per item\n    items.forEach((item)=>{\n        const newRow = templateRow.cloneNode(true);\n        newRow.removeAttribute(\"id\");\n        newRow.style.display = \"table-row\";\n        // Data attributes\n        newRow.setAttribute(\"data-program-id\", String(item.program_id));\n        newRow.setAttribute(\"data-workshop-id\", String(item.workshop_id));\n        newRow.setAttribute(\"data-session-id\", String(item.session_id));\n        newRow.setAttribute(\"data-student-id\", String(item.student_profile?.id || item.student_id));\n        // Populate text fields\n        const programText = newRow.querySelector(\"#item_program_name\");\n        if (programText) programText.textContent = item.program_details.name;\n        // Workshop may not exist, show dash if missing\n        const workshopText = newRow.querySelector(\"#item_workshop_name\");\n        const wsName = item.workshop_details?.Name || \"-\";\n        if (workshopText) workshopText.textContent = wsName;\n        // Session name\n        const sessionText = newRow.querySelector(\"#item_session_name\");\n        if (sessionText) sessionText.textContent = `${item.session_details.Weekday} ${item.session_details.Time_block}`;\n        // Student full name\n        const studentText = newRow.querySelector(\"#item_student_name\");\n        if (studentText) studentText.textContent = `${item.student_profile.first_name} ${item.student_profile.last_name}`;\n        // Hide any select elements if present\n        Array.from(newRow.querySelectorAll(\"select\")).forEach((sel)=>{\n            sel.style.display = \"none\";\n        });\n        // Hide confirm/add buttons in management view\n        const confirmBtn = newRow.querySelector(\".add_registration_button\");\n        if (confirmBtn) confirmBtn.style.display = \"none\";\n        // Append to table body\n        tableBodyEl.appendChild(newRow);\n    });\n}\n\n},{\"@xatom/core\":\"65YBq\",\"@parcel/transformer-js/src/esmodule-helpers.js\":\"jiucr\"}],\"jEEHZ\":[function(require,module,exports) {\n// src/manageSubscription/components/manageSubscriptionLineItems.ts\nvar parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\n/**\n * Renders subscription line items for the management page.\n * Groups and sums quantities, then displays items or shows empty state.\n */ parcelHelpers.export(exports, \"initManageLineItems\", ()=>initManageLineItems);\nvar _core = require(\"@xatom/core\");\nfunction initManageLineItems(apiData, registrationItems, subscriptionType, config) {\n    // Determine suffix and price field\n    const suffix = subscriptionType === \"year\" ? \"/year\" : subscriptionType === \"month\" ? \"/month\" : \"/semester\";\n    // Build raw items\n    const rawItems = registrationItems.map((item)=>{\n        const session = item.session_details;\n        const tuition = session.tuition_product;\n        const priceStr = subscriptionType === \"year\" ? tuition.Displayed_annual_price : subscriptionType === \"month\" ? tuition.Displayed_monthly_price : tuition.Displayed_semester_price;\n        // parse \"$600 Per Semester\" → 600\n        const unit = parseFloat((priceStr || \"\").replace(/[^0-9\\.]/g, \"\")) || 0;\n        return {\n            productName: session.Name,\n            unitPrice: unit,\n            quantity: 1,\n            total: unit\n        };\n    });\n    // Group by productName\n    const groupedMap = new Map();\n    rawItems.forEach((item)=>{\n        const key = item.productName;\n        if (groupedMap.has(key)) {\n            const existing = groupedMap.get(key);\n            existing.quantity += item.quantity;\n            existing.total += item.total;\n        } else groupedMap.set(key, {\n            ...item\n        });\n    });\n    const finalItems = Array.from(groupedMap.values());\n    // Grab DOM elements\n    const wrapComp = new (0, _core.WFComponent)(config.wrapSelector);\n    const wrapEl = wrapComp.getElement();\n    const emptyEl = document.querySelector(config.emptySelector);\n    const template = document.querySelector(config.templateSelector);\n    const listComp = new (0, _core.WFComponent)(config.listSelector);\n    const listEl = listComp.getElement();\n    if (!template) {\n        console.error(\"Line-item template not found:\", config.templateSelector);\n        return;\n    }\n    // Clear previous items\n    Array.from(listEl.children).forEach((child)=>{\n        if (child.id !== template.id) listEl.removeChild(child);\n    });\n    // Handle empty state\n    if (finalItems.length === 0) {\n        wrapEl.style.display = \"none\";\n        if (emptyEl) emptyEl.style.display = \"flex\";\n        return;\n    }\n    wrapEl.style.display = \"flex\";\n    if (emptyEl) emptyEl.style.display = \"none\";\n    // Render each line item\n    finalItems.forEach((item)=>{\n        const row = template.cloneNode(true);\n        row.removeAttribute(\"id\");\n        row.style.display = \"flex\";\n        // fill fields\n        const prod = row.querySelector(\"#subscription_item_product\");\n        if (prod) prod.textContent = item.productName;\n        const unitEl = row.querySelector(\"#subscription_item_unit_amount\");\n        if (unitEl) unitEl.textContent = `$${item.unitPrice.toFixed(2)}`;\n        const qtyEl = row.querySelector(\"#subscription_item_quantity\");\n        if (qtyEl) qtyEl.textContent = String(item.quantity);\n        const totalEl = row.querySelector(\"#subscription_item_total\");\n        if (totalEl) totalEl.textContent = `$${item.total.toFixed(2)} ${suffix}`;\n        listEl.appendChild(row);\n    });\n}\n\n},{\"@xatom/core\":\"65YBq\",\"@parcel/transformer-js/src/esmodule-helpers.js\":\"jiucr\"}],\"6ZLwF\":[function(require,module,exports) {\n// src/manageSubscription/components/manageSubscriptionSummary.ts\nvar parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\n/**\n * Recalculates and updates the subscription summary:\n * - Aggregates current subscription line-item totals\n * - Applies any discount (financial aid)\n * - Updates the UI elements for the subscription total and original amount, appending the billing period suffix\n */ parcelHelpers.export(exports, \"updateSubscriptionSummary\", ()=>updateSubscriptionSummary);\nvar _core = require(\"@xatom/core\");\nvar _manageSubscriptionState = require(\"../state/manageSubscriptionState\");\nfunction updateSubscriptionSummary() {\n    // 1) Aggregate current line items from the DOM\n    const lineTotals = Array.from(document.querySelectorAll(\"#subscription_line_items_list .line_item_total\")).map((el)=>{\n        const text = (el.textContent || \"\").replace(/[^0-9.]/g, \"\");\n        return parseFloat(text) || 0;\n    });\n    const subtotal = lineTotals.reduce((sum, amt)=>sum + amt, 0);\n    // 2) Get discount percentage and billing period from state\n    const state = (0, _manageSubscriptionState.loadState)();\n    const discountPercent = state.apiData?.financial_aid?.selected_discount || 0;\n    const periodType = state.updateSubscriptionType || state.apiData?.subscription_type || \"month\";\n    const suffix = periodType === \"year\" ? \"/year\" : periodType === \"semester\" ? \"/semester\" : \"/month\";\n    // 3) Compute discounted total\n    const discountAmount = subtotal * (discountPercent / 100);\n    const totalAfterDiscount = subtotal - discountAmount;\n    // 4) Update UI elements\n    const totalEl = new (0, _core.WFComponent)(\"#subscription_total\");\n    const origEl = new (0, _core.WFComponent)(\"#subscription_original_amount\");\n    const pillEl = new (0, _core.WFComponent)(\"#subscription_discount_pill\");\n    const appliedEl = new (0, _core.WFComponent)(\"#subscription_discount_applied\");\n    if (discountPercent > 0) {\n        appliedEl.setText(`${discountPercent}%`);\n        pillEl.getElement().style.display = \"block\";\n        origEl.setText(`was $${subtotal.toFixed(2)} ${suffix}`);\n        origEl.getElement().style.display = \"block\";\n    } else {\n        pillEl.getElement().style.display = \"none\";\n        origEl.getElement().style.display = \"none\";\n    }\n    // Always update the subscription total display with suffix\n    totalEl.setText(`$${totalAfterDiscount.toFixed(2)} ${suffix}`);\n}\n\n},{\"@xatom/core\":\"65YBq\",\"../state/manageSubscriptionState\":\"1QJMa\",\"@parcel/transformer-js/src/esmodule-helpers.js\":\"jiucr\"}],\"3mTm6\":[function(require,module,exports) {\n// src/manageSubscription/components/manageDepositLineItems.ts\nvar parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\n/**\n * Renders the deposit line items and total for items already paid.\n * Only shows if status === \"Deposit Paid\"; otherwise hides them entirely.\n */ parcelHelpers.export(exports, \"initManageDepositItems\", ()=>initManageDepositItems);\nvar _core = require(\"@xatom/core\");\nfunction initManageDepositItems(subscription, registrationItems, config) {\n    const containerComp = new (0, _core.WFComponent)(config.containerSelector);\n    const containerEl = containerComp.getElement();\n    const listEl = document.querySelector(config.listSelector);\n    const templateRow = document.querySelector(config.templateRowSelector);\n    const totalComp = new (0, _core.WFComponent)(config.totalSelector);\n    // only show deposit items for Deposit Paid subscriptions\n    if (subscription.status !== \"Deposit Paid\") {\n        if (containerEl) containerEl.style.display = \"none\";\n        return;\n    }\n    if (!containerEl || !listEl || !templateRow) {\n        console.error(\"Deposit items: missing selectors\");\n        return;\n    }\n    // Gather deposit lines\n    const raw = [];\n    registrationItems.forEach((item)=>{\n        const dp = item.session_details.deposit_product;\n        const priceAmt = dp?.Single_sale_price_amount || 0;\n        if (priceAmt > 0) raw.push({\n            productName: dp.Product_name || item.session_details.Name,\n            unitPrice: priceAmt,\n            quantity: 1,\n            total: priceAmt\n        });\n    });\n    // Group by productName\n    const grouped = new Map();\n    raw.forEach((line)=>{\n        if (grouped.has(line.productName)) {\n            const existing = grouped.get(line.productName);\n            existing.quantity += line.quantity;\n            existing.total += line.total;\n        } else grouped.set(line.productName, {\n            ...line\n        });\n    });\n    const depositLines = Array.from(grouped.values());\n    // Clear old rows except template\n    Array.from(listEl.children).forEach((child)=>{\n        if (child === templateRow) return;\n        listEl.removeChild(child);\n    });\n    // No deposits? hide\n    const depositTotal = depositLines.reduce((sum, l)=>sum + l.total, 0);\n    if (depositTotal <= 0) {\n        containerEl.style.display = \"none\";\n        return;\n    }\n    containerEl.style.display = \"flex\";\n    // Ensure template hidden\n    templateRow.style.display = \"none\";\n    // Render each deposit line\n    depositLines.forEach((line)=>{\n        const row = templateRow.cloneNode(true);\n        row.removeAttribute(\"id\");\n        row.style.display = \"flex\";\n        const prod = row.querySelector(\"#deposit_item_product\");\n        if (prod) prod.textContent = line.productName;\n        const unitEl = row.querySelector(\"#deposit_item_unit_amount\");\n        if (unitEl) unitEl.textContent = `$${line.unitPrice.toFixed(2)}`;\n        const qtyEl = row.querySelector(\"#deposit_item_quantity\");\n        if (qtyEl) qtyEl.textContent = String(line.quantity);\n        const totalEl = row.querySelector(\"#deposit_item_total\");\n        if (totalEl) totalEl.textContent = `$${line.total.toFixed(2)}`;\n        listEl.appendChild(row);\n    });\n    // Set total\n    totalComp.setText(`$${depositTotal.toFixed(2)}`);\n}\n\n},{\"@xatom/core\":\"65YBq\",\"@parcel/transformer-js/src/esmodule-helpers.js\":\"jiucr\"}],\"am4Iu\":[function(require,module,exports) {\n// src/manageSubscription/components/manageAmountDue.ts\nvar parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\n/**\n * Updates or hides the “Amount Due” container based on payment status,\n * dynamically recalculating from the rendered line items, deposits,\n * and any applied financial aid.\n *\n * - Only shows when status === \"Deposit Paid\".\n * - Label is always \"Amount Due Upon Approval\".\n * - amountDue = (sum of current subscription line‑item totals)\n *               − (sum of current deposit totals)\n *               − (financial aid discount on line items).\n */ parcelHelpers.export(exports, \"updateAmountDue\", ()=>updateAmountDue);\nvar _core = require(\"@xatom/core\");\nvar _manageSubscriptionState = require(\"../state/manageSubscriptionState\");\nfunction updateAmountDue() {\n    const state = (0, _manageSubscriptionState.loadState)();\n    const subscription = state.apiData;\n    const container = document.querySelector(\"#amountDueContainer\");\n    if (!container) {\n        console.error(\"#amountDueContainer not found\");\n        return;\n    }\n    // only show when deposit has been paid\n    if (subscription.status !== \"Deposit Paid\") {\n        container.style.display = \"none\";\n        return;\n    }\n    container.style.display = \"flex\";\n    // set static label\n    new (0, _core.WFComponent)(\"#amountDueLable\").setText(\"Amount Due Upon Approval\");\n    // 1) sum up all current subscription line‑item totals in the DOM\n    const lineSum = Array.from(document.querySelectorAll(\"#subscription_line_items_list .line_item_total\")).reduce((sum, el)=>{\n        const num = parseFloat((el.textContent || \"\").replace(/[^0-9.]/g, \"\"));\n        return sum + (isNaN(num) ? 0 : num);\n    }, 0);\n    // 2) sum up all current deposit totals in the DOM\n    const depositSum = Array.from(document.querySelectorAll(\"#deposit_line_items_list .line_item_total\")).reduce((sum, el)=>{\n        const num = parseFloat((el.textContent || \"\").replace(/[^0-9.]/g, \"\"));\n        return sum + (isNaN(num) ? 0 : num);\n    }, 0);\n    // 3) compute financial aid discount\n    const discountPercent = state.apiData?.financial_aid?.selected_discount ?? 0;\n    const discountAmount = lineSum * discountPercent / 100;\n    // 4) compute final due\n    const amountDue = Math.max(0, lineSum - depositSum - discountAmount);\n    // 5) render amount due\n    new (0, _core.WFComponent)(\"#total_amount_due_next_invoice\").setText(`$${amountDue.toFixed(2)}`);\n}\n\n},{\"@xatom/core\":\"65YBq\",\"../state/manageSubscriptionState\":\"1QJMa\",\"@parcel/transformer-js/src/esmodule-helpers.js\":\"jiucr\"}],\"b2MjB\":[function(require,module,exports) {\n// src/manageSubscription/components/managePendingStudentsAlert.ts\nvar parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\n/**\n * Shows or hides the \"order under review\" alert box when a\n * subscription is Deposit Paid and student profiles are pending.\n */ parcelHelpers.export(exports, \"updatePendingStudentsAlert\", ()=>updatePendingStudentsAlert);\nvar _core = require(\"@xatom/core\");\nfunction updatePendingStudentsAlert(subscription) {\n    const alertEl = new (0, _core.WFComponent)(\"#alertBox\").getElement();\n    // Debugging\n    console.log(\"[updatePendingStudentsAlert] status=\", subscription.status, \"pending_students=\", subscription.pending_students);\n    console.log(\"[updatePendingStudentsAlert] alertEl=\", alertEl);\n    if (subscription.status === \"Deposit Paid\" && subscription.pending_students) // Reveal by removing inline override (or letting CSS handle default)\n    alertEl.style.display = \"flex\";\n    else alertEl.style.display = \"none\";\n}\n\n},{\"@xatom/core\":\"65YBq\",\"@parcel/transformer-js/src/esmodule-helpers.js\":\"jiucr\"}],\"f8n1y\":[function(require,module,exports) {\n// src/manageSubscription/components/manageTrialAlert.ts\nvar parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\n/**\n * Toggles the \"trial scheduled\" alert box and injects dynamic text\n * based on subscription status and trial end date.\n */ parcelHelpers.export(exports, \"updateTrialAlert\", ()=>updateTrialAlert);\nvar _core = require(\"@xatom/core\");\nfunction updateTrialAlert(subscription) {\n    const trialBoxEl = new (0, _core.WFComponent)(\"#alertBoxTrial\").getElement();\n    const dateSpan = new (0, _core.WFComponent)(\"#subscription_trial_end_date\").getElement();\n    const now = Date.now();\n    const trialEnd = subscription.free_trial_end || 0;\n    // Show if trialEnd is in the future or early registration is flagged\n    if (trialEnd && trialEnd > now || subscription.early_registration) {\n        // Format the trial end date\n        const formatted = new Date(trialEnd).toLocaleDateString(\"en-US\", {\n            month: \"long\",\n            day: \"numeric\",\n            year: \"numeric\"\n        });\n        dateSpan.textContent = formatted;\n        // Determine dynamic prefix and verb\n        const whenApproved = subscription.status === \"Deposit Paid\" ? \"When approved your\" : \"Your\";\n        const beginOrResume = subscription.status === \"Deposit Paid\" ? \"begin\" : \"resume\";\n        // Update the alert-title HTML\n        const titleEl = trialBoxEl.querySelector(\".alert-title\");\n        titleEl.innerHTML = `${whenApproved} subscription is scheduled to ${beginOrResume} on ` + `<span id=\"subscription_trial_end_date\">${formatted}</span>. ` + `If you've paid a deposit, your initial invoice will commence on the same date.`;\n        // Reveal the alert box (removing any inline hide)\n        trialBoxEl.style.display = \"flex\";\n    } else // Hide the alert box\n    trialBoxEl.style.display = \"none\";\n}\n\n},{\"@xatom/core\":\"65YBq\",\"@parcel/transformer-js/src/esmodule-helpers.js\":\"jiucr\"}],\"7KC0F\":[function(require,module,exports) {\nvar parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\n/**\n * Renders the basic subscription details section:\n *  - Status (with \"Trial\" shown as \"Scheduled\")\n *  - Billing cycle\n *  - Financial Aid Requested (True/hidden)\n *  - Financial Aid Applied (percentage/hidden)\n */ parcelHelpers.export(exports, \"manageSubscriptionDetails\", ()=>manageSubscriptionDetails);\nvar _core = require(\"@xatom/core\");\nvar _manageSubscriptionState = require(\"../state/manageSubscriptionState\");\nfunction manageSubscriptionDetails() {\n    const state = (0, _manageSubscriptionState.loadState)();\n    const subscription = state.apiData;\n    // --- Status ---\n    const statusText = subscription.status.toLowerCase() === \"trial\" ? \"Scheduled\" : subscription.status;\n    new (0, _core.WFComponent)(\"#status\").setText(statusText);\n    // --- Billing Cycle ---\n    const cycle = state.updateSubscriptionType || subscription.subscription_type;\n    new (0, _core.WFComponent)(\"#subscriptionType\").setText(cycle);\n    // --- Financial Aid ---\n    const finAid = subscription.financial_aid;\n    const hasAid = finAid?.selected_discount != null && finAid.selected_discount > 0;\n    const reqWrap = document.querySelector(\"#finAidRequestedWrap\");\n    const reqEl = new (0, _core.WFComponent)(\"#finAidRequested\");\n    const appliedWrap = document.querySelector(\"#finAidAppliedWrap\");\n    const appliedEl = new (0, _core.WFComponent)(\"#finAidApplied\");\n    if (reqWrap && appliedWrap) {\n        if (hasAid) {\n            reqEl.setText(\"True\");\n            reqWrap.style.display = \"flex\";\n            appliedEl.setText(`${finAid.selected_discount}%`);\n            appliedWrap.style.display = \"flex\";\n        } else {\n            reqWrap.style.display = \"none\";\n            appliedWrap.style.display = \"none\";\n        }\n    } else console.error(\"manageSubscriptionDetails: missing financial aid selectors\");\n}\n\n},{\"@xatom/core\":\"65YBq\",\"../state/manageSubscriptionState\":\"1QJMa\",\"@parcel/transformer-js/src/esmodule-helpers.js\":\"jiucr\"}],\"9JwnR\":[function(require,module,exports) {\nvar parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\n/**\n * Handles the \"Cancel Subscription\" flow:\n * 1) Opens a dialog asking for a cancellation reason\n * 2) On form submit, sends subscription_id + reason to /subscriptions/cancel\n * 3) Upon success, shows a success message and sets the page_main data-brand to 4\n * 4) On dialog close, resets data-brand to 2\n * Hides the cancel button if the subscription is already cancelled\n */ parcelHelpers.export(exports, \"CancelSubscriptionDialog\", ()=>CancelSubscriptionDialog);\nvar _core = require(\"@xatom/core\");\nvar _apiConfig = require(\"../../../api/apiConfig\");\nvar _manageSubscriptionState = require(\"../state/manageSubscriptionState\");\nclass CancelSubscriptionDialog {\n    constructor(){\n        this.dialogComp = new (0, _core.WFComponent)(\"#cancelSubscriptionDialog\");\n        this.formComp = new (0, _core.WFFormComponent)(\"#cancelFullSubscriptionForm\");\n        this.openBtnComp = new (0, _core.WFComponent)(\"#openCancelSubscription\");\n        this.closeBtnComp = new (0, _core.WFComponent)(\"#close-cancel-dialog-btn\");\n        this.submitBtnComp = new (0, _core.WFComponent)(\"#submitCancel\");\n        this.loadingComp = new (0, _core.WFComponent)(\"#submitCancelLoading\");\n        this.reasonError = new (0, _core.WFComponent)(\"#submitCancelError\");\n        this.pageMainComp = new (0, _core.WFComponent)(\".page_main\");\n        // Hide cancel button if subscription already cancelled\n        const state = (0, _manageSubscriptionState.loadState)();\n        if (state.apiData?.status === \"Cancelled\") this.openBtnComp.getElement().style.display = \"none\";\n        this.attachListeners();\n    }\n    attachListeners() {\n        // Intercept form submit\n        this.formComp.onFormSubmit(async (formData, ev)=>{\n            ev.preventDefault();\n            this.reasonError.getElement().style.display = \"none\";\n            const reason = formData.removed_because.trim();\n            if (!reason) {\n                this.reasonError.setText(\"Reason is required.\");\n                this.reasonError.getElement().style.display = \"block\";\n                return;\n            }\n            await this.submitCancel(reason);\n        });\n        // Open dialog\n        this.openBtnComp.on(\"click\", (e)=>{\n            e.preventDefault();\n            this.reasonError.getElement().style.display = \"none\";\n            this.loadingComp.getElement().style.display = \"none\";\n            this.openDialog();\n        });\n        // Backdrop click → close\n        const dlgEl = this.dialogComp.getElement();\n        dlgEl.addEventListener(\"click\", (e)=>{\n            if (e.target === dlgEl) this.closeDialog();\n        });\n        // X button\n        this.closeBtnComp.on(\"click\", ()=>this.closeDialog());\n    }\n    openDialog() {\n        // switch to cancel-dialog brand\n        this.pageMainComp.setAttribute(\"data-brand\", \"6\");\n        this.dialogComp.getElement().showModal();\n    }\n    closeDialog() {\n        this.dialogComp.getElement().close();\n        // reset to default\n        this.pageMainComp.setAttribute(\"data-brand\", \"2\");\n    }\n    async submitCancel(reason) {\n        // show loader + disable\n        this.loadingComp.getElement().style.display = \"block\";\n        this.submitBtnComp.getElement().setAttribute(\"disabled\", \"true\");\n        try {\n            const st = (0, _manageSubscriptionState.loadState)();\n            const response = await (0, _apiConfig.apiClient).post(\"/subscriptions/cancel\", {\n                data: {\n                    subscription_id: st.apiData.id,\n                    reason\n                }\n            }).fetch();\n            // filter out cancelled, waitlist, draft, pending statuses\n            const visibleRegs = (response.registrations || []).filter((r)=>{\n                const s = r.status.toUpperCase();\n                return s !== \"CANCELLED\" && s !== \"WAITLIST\" && s !== \"DRAFT\" && s !== \"PENDING\";\n            });\n            // update state with filtered registrations\n            (0, _manageSubscriptionState.saveState)({\n                apiData: response,\n                registrationItems: visibleRegs\n            });\n            window.renderAll();\n            // show success and swap to success brand\n            this.formComp.showSuccessState();\n            this.pageMainComp.setAttribute(\"data-brand\", \"4\");\n        } catch (err) {\n            console.error(\"Cancel failed:\", err);\n            this.formComp.showErrorState();\n        } finally{\n            // hide loader + re-enable\n            this.loadingComp.getElement().style.display = \"none\";\n            this.submitBtnComp.getElement().removeAttribute(\"disabled\");\n        }\n    }\n}\n\n},{\"@xatom/core\":\"65YBq\",\"../../../api/apiConfig\":\"dUmIV\",\"../state/manageSubscriptionState\":\"1QJMa\",\"@parcel/transformer-js/src/esmodule-helpers.js\":\"jiucr\"}]},[], null, \"parcelRequired346\")\n\n//# sourceMappingURL=manageSubscription.972d0885.js.map\n","// src/manageSubscription/index.ts\n\nimport { apiClient } from \"../../api/apiConfig\";\nimport type { ManageSubscriptionResponse } from \"./types\";\nimport { WFFormComponent, WFComponent } from \"@xatom/core\";\nimport { loadState, saveState } from \"./state/manageSubscriptionState\";\nimport { initManageRegistrationTable } from \"./components/manageRegistrationTable\";\nimport { initManageLineItems } from \"./components/manageSubscriptionLineItems\";\nimport { updateSubscriptionSummary } from \"./components/manageSubscriptionSummary\";\nimport { initManageDepositItems } from \"./components/manageDepositLineItems\";\nimport { updateAmountDue } from \"./components/manageAmountDue\";\nimport { updatePendingStudentsAlert } from \"./components/managePendingStudentsAlert\";\nimport { updateTrialAlert } from \"./components/manageTrialAlert\";\nimport { manageSubscriptionDetails } from \"./components/manageSubscriptionDetails\";\nimport { CancelSubscriptionDialog } from \"./components/manageSubscriptionCancelDialog\";\n\nconst REG_TABLE_CONFIG = {\n  tableBodySelector: \"#subscription_items_list\",\n  templateRowSelector: \"#subscription_item\",\n  emptyStateSelector: \"#subscription_empty\",\n};\n\nexport async function manageSubscriptionPage(): Promise<void> {\n  // 1) Fetch & seed state\n  const data = await apiClient\n    .post<ManageSubscriptionResponse>(\"/subscriptions/manage-subscription\")\n    .fetch();\n    if (!data || !data.id) {\n      window.location.href = \"/dashboard\";\n      return;\n    }\n  const initialType = data.update_subscription_type || data.subscription_type;\n  saveState({\n    apiData: data,\n    registrationItems: data.registrations,\n    updateSubscriptionType: initialType,\n  });\n\n  // 2) Hide action buttons\n  document\n    .querySelector(\".update_button_wrap\")\n    ?.setAttribute(\"style\", \"display:none\");\n  document\n    .getElementById(\"resetRegistrations\")\n    ?.setAttribute(\"style\", \"display:none\");\n\n  // 3) Render registration table + hook removals\n  initManageRegistrationTable(data.registrations, REG_TABLE_CONFIG);\n  document\n    .getElementById(\"subscription_items_list\")\n    ?.addEventListener(\"click\", (e) => {\n      const btn = (e.target as HTMLElement).closest(\n        \".remove_registration_button\"\n      ) as HTMLButtonElement;\n      if (btn) handleRemove(btn);\n    });\n\n  // 4) Initial full render\n  renderAll();\n  // 4a) fire the hidden Lottie trigger now that we have a subscription\n  document\n    .querySelector<HTMLElement>(\".success_trigger\")\n    ?.click();\n\n  // 5) Dialog & form wiring for “Update Subscription”\n  const form = new WFFormComponent<{ removed_because: string }>(\n    \"#cancelSubscriptionForm\"\n  );\n  const dialogEl = document.querySelector<HTMLDialogElement>(\n    \"#removeStudentDialog\"\n  )!;\n  const pageMain = new WFComponent(\".page_main\");\n  const errorComp = new WFComponent(\"#submitUpdateError\");\n  const loaderComp = document.querySelector<HTMLElement>(\n    \"#submitUpdateLoading\"\n  )!;\n  const submitBtn = document.getElementById(\"submitUpdateBtn\")!;\n\n  document\n    .getElementById(\"submit_subscription_update\")\n    ?.addEventListener(\"click\", (e) => {\n      e.preventDefault();\n      errorComp.getElement().style.display = \"none\";\n      loaderComp.style.display = \"none\";\n      pageMain.setAttribute(\"data-brand\", \"6\");\n      dialogEl.showModal();\n    });\n\n  form.onFormSubmit(async (dataMap, ev) => {\n    ev.preventDefault();\n    errorComp.getElement().style.display = \"none\";\n\n    const reason = dataMap.removed_because.trim();\n    if (!reason) {\n      errorComp.setText(\"Please enter a reason for your changes.\");\n      errorComp.getElement().style.display = \"block\";\n      return;\n    }\n\n    loaderComp.style.display = \"block\";\n\n    try {\n      const state = loadState();\n      const originalIds = state.apiData!.registrations.map((r) => r.id);\n      const keptIds = state.registrationItems!.map((r) => r.id);\n      const toCancel = originalIds.filter((id) => !keptIds.includes(id));\n\n      await apiClient\n        .post(\"/subscriptions/update\", {\n          data: {\n            subscription_id: state.apiData!.id,\n            registration_item_ids: toCancel,\n            reason,\n          },\n        })\n        .fetch();\n\n      const fresh = await apiClient\n        .post<ManageSubscriptionResponse>(\n          \"/subscriptions/manage-subscription\"\n        )\n        .fetch();\n      saveState({\n        apiData: fresh,\n        registrationItems: fresh.registrations,\n      });\n      renderAll();\n\n      form.showSuccessState();\n      pageMain.setAttribute(\"data-brand\", \"4\");\n    } catch (err) {\n      console.error(\"Update failed:\", err);\n      form.showErrorState();\n    } finally {\n      loaderComp.style.display = \"none\";\n      submitBtn.removeAttribute(\"disabled\");\n    }\n  });\n\n  document\n    .getElementById(\"close-dialog-btn\")\n    ?.addEventListener(\"click\", () => {\n      dialogEl.close();\n      pageMain.setAttribute(\"data-brand\", \"2\");\n      form.showForm();\n      form.resetForm();\n      form.enableForm();\n    });\n\n  // Reset registrations\n  document\n    .getElementById(\"resetRegistrations\")\n    ?.addEventListener(\"click\", () => {\n      const orig = loadState().apiData!.registrations;\n      saveState({ registrationItems: orig });\n      renderAll();\n      document\n        .querySelector(\".update_button_wrap\")\n        ?.setAttribute(\"style\", \"display:none\");\n      document\n        .getElementById(\"resetRegistrations\")\n        ?.setAttribute(\"style\", \"display:none\");\n    });\n\n  // 6) Instantiate the cancellation dialog handler\n  new CancelSubscriptionDialog();\n}\n\nexport function renderAll(): void {\n  const s = loadState();\n  const sub = s.apiData!;\n  const items = s.registrationItems!;\n\n  initManageRegistrationTable(items, REG_TABLE_CONFIG);\n  initManageLineItems(sub, items, s.updateSubscriptionType!, {\n    listSelector: \"#subscription_line_items_list\",\n    wrapSelector: \"#subscription_line_items_wrap\",\n    emptySelector: \"#subscription_line_items_empty\",\n    templateSelector: \"#subscription_line_item\",\n  });\n  updateSubscriptionSummary();\n  initManageDepositItems(sub, items, {\n    containerSelector: \"#deposit_line_items_container\",\n    listSelector: \"#deposit_line_items_list\",\n    templateRowSelector: \"#deposit_item_template\",\n    totalSelector: \"#deposit_total\",\n  });\n  updateAmountDue();\n  updatePendingStudentsAlert(sub);\n  updateTrialAlert(sub);\n  manageSubscriptionDetails();\n}\n\n// expose renderAll globally so dialogs can call it\n;(window as any).renderAll = renderAll;\n\nfunction handleRemove(btn: HTMLButtonElement): void {\n  const row = btn.closest(\"tr\");\n  if (!row) return;\n  const st = loadState();\n  if (st.registrationItems.length <= 1) {\n    alert(\"You must keep at least one registration.\");\n    return;\n  }\n  row.remove();\n  const kept = st.registrationItems.filter(\n    (ri) =>\n      !(\n        ri.session_id.toString() ===\n          row.getAttribute(\"data-session-id\") &&\n        ri.student_profile.id.toString() ===\n          row.getAttribute(\"data-student-id\")\n      )\n  );\n  saveState({ registrationItems: kept });\n  renderAll();\n  document\n    .querySelector(\".update_button_wrap\")\n    ?.setAttribute(\"style\", \"display:block\");\n  document\n    .getElementById(\"resetRegistrations\")\n    ?.setAttribute(\"style\", \"display:block\");\n}\n","// src/manageSubscription/state/manageSubscriptionState.ts\n\nimport { ManageSubscriptionResponse, RegistrationItem } from \"../types\";\n\nexport interface ManageSubscriptionState {\n  /** The raw payload from the manage-subscription endpoint */\n  apiData?: ManageSubscriptionResponse;\n  /** Array of current registration items */\n  registrationItems: RegistrationItem[];\n  /** User-selected override for subscription type */\n  updateSubscriptionType?: string;\n}\n\nconst STORAGE_KEY = \"manageSubscriptionState\";\n\nlet state: ManageSubscriptionState = loadStateFromStorage() || {\n  apiData: undefined,\n  registrationItems: [],\n  updateSubscriptionType: undefined,\n};\n\nexport function loadState(): ManageSubscriptionState {\n  return state;\n}\n\nexport function saveState(newState: Partial<ManageSubscriptionState>): void {\n  state = { ...state, ...newState };\n  saveStateToStorage(state);\n}\n\nfunction loadStateFromStorage(): ManageSubscriptionState | null {\n  try {\n    const stored = localStorage.getItem(STORAGE_KEY);\n    return stored ? JSON.parse(stored) : null;\n  } catch (error) {\n    console.error(\"Error loading manage subscription state:\", error);\n    return null;\n  }\n}\n\nfunction saveStateToStorage(state: ManageSubscriptionState): void {\n  try {\n    localStorage.setItem(STORAGE_KEY, JSON.stringify(state));\n  } catch (error) {\n    console.error(\"Error saving manage subscription state:\", error);\n  }\n}\n","// src/manageSubscription/components/manageRegistrationTable.ts\n\nimport { WFComponent } from \"@xatom/core\";\nimport { RegistrationItem } from \"../types\";\n\nexport interface ManageTableConfig {\n  tableBodySelector: string;\n  templateRowSelector: string;\n  emptyStateSelector: string;\n}\n\n/**\n * Initializes the registration table for managing subscriptions.\n * Clones the template row for each item, populates text fields,\n * sets data-attributes, and handles empty state display.\n */\nexport function initManageRegistrationTable(\n  items: RegistrationItem[],\n  config: ManageTableConfig\n): void {\n  // Grab elements\n  const tableBodyComp = new WFComponent(config.tableBodySelector);\n  const tableBodyEl = tableBodyComp.getElement();\n\n  const templateRow = document.querySelector(\n    config.templateRowSelector\n  ) as HTMLElement;\n  const emptyRow = document.querySelector(\n    config.emptyStateSelector\n  ) as HTMLElement;\n\n  if (!templateRow) {\n    console.error(\"Template row not found:\", config.templateRowSelector);\n    return;\n  }\n  if (!emptyRow) {\n    console.error(\"Empty state row not found:\", config.emptyStateSelector);\n    return;\n  }\n\n  // Remove existing user rows (keep template and empty)\n  Array.from(tableBodyEl.querySelectorAll(\"tr\")).forEach(row => {\n    if (row === templateRow || row === emptyRow) return;\n    row.remove();\n  });\n\n  // Handle empty state\n  if (items.length === 0) {\n    emptyRow.style.display = \"table-row\";\n    return;\n  }\n  emptyRow.style.display = \"none\";\n\n  // Create a row per item\n  items.forEach(item => {\n    const newRow = templateRow.cloneNode(true) as HTMLElement;\n    newRow.removeAttribute(\"id\");\n    newRow.style.display = \"table-row\";\n\n    // Data attributes\n    newRow.setAttribute(\"data-program-id\", String(item.program_id));\n    newRow.setAttribute(\"data-workshop-id\", String(item.workshop_id));\n    newRow.setAttribute(\"data-session-id\", String(item.session_id));\n    newRow.setAttribute(\"data-student-id\", String(item.student_profile?.id || item.student_id));\n\n    // Populate text fields\n    const programText = newRow.querySelector(\"#item_program_name\");\n    if (programText) programText.textContent = item.program_details.name;\n\n    // Workshop may not exist, show dash if missing\n    const workshopText = newRow.querySelector(\"#item_workshop_name\");\n    const wsName = item.workshop_details?.Name || \"-\";\n    if (workshopText) workshopText.textContent = wsName;\n\n    // Session name\n    const sessionText = newRow.querySelector(\"#item_session_name\");\n    if (sessionText) {\n      sessionText.textContent = `${item.session_details.Weekday} ${item.session_details.Time_block}`;\n    }\n    \n\n    // Student full name\n    const studentText = newRow.querySelector(\"#item_student_name\");\n    if (studentText) {\n      studentText.textContent = `${item.student_profile.first_name} ${item.student_profile.last_name}`;\n    }\n\n    // Hide any select elements if present\n    Array.from(newRow.querySelectorAll(\"select\")).forEach(sel => {\n      (sel as HTMLElement).style.display = \"none\";\n    });\n\n    // Hide confirm/add buttons in management view\n    const confirmBtn = newRow.querySelector(\".add_registration_button\");\n    if (confirmBtn) (confirmBtn as HTMLElement).style.display = \"none\";\n\n    // Append to table body\n    tableBodyEl.appendChild(newRow);\n  });\n}","// src/manageSubscription/components/manageSubscriptionLineItems.ts\n\nimport { WFComponent } from \"@xatom/core\";\nimport { ManageSubscriptionResponse, RegistrationItem } from \"../types\";\n\nexport interface LineItemsConfig {\n  listSelector: string;         // e.g., \"#subscription_line_items_list\"\n  wrapSelector: string;         // e.g., \"#subscription_line_items_wrap\"\n  emptySelector: string;        // e.g., \"#subscription_line_items_empty\"\n  templateSelector: string;     // e.g., \"#subscription_line_item\"\n}\n\ninterface LineItem {\n  productName: string;\n  unitPrice: number;\n  quantity: number;\n  total: number;\n}\n\n/**\n * Renders subscription line items for the management page.\n * Groups and sums quantities, then displays items or shows empty state.\n */\nexport function initManageLineItems(\n  apiData: ManageSubscriptionResponse,\n  registrationItems: RegistrationItem[],\n  subscriptionType: string,\n  config: LineItemsConfig\n): void {\n  // Determine suffix and price field\n  const suffix = subscriptionType === \"year\"\n    ? \"/year\"\n    : subscriptionType === \"month\"\n      ? \"/month\"\n      : \"/semester\";\n\n  // Build raw items\n  const rawItems: LineItem[] = registrationItems.map(item => {\n    const session = item.session_details;\n    const tuition = session.tuition_product as any;\n    const priceStr = subscriptionType === \"year\"\n      ? tuition.Displayed_annual_price\n      : subscriptionType === \"month\"\n        ? tuition.Displayed_monthly_price\n        : tuition.Displayed_semester_price;\n    // parse \"$600 Per Semester\" → 600\n    const unit = parseFloat((priceStr || \"\").replace(/[^0-9\\.]/g, \"\")) || 0;\n    return {\n      productName: session.Name,\n      unitPrice: unit,\n      quantity: 1,\n      total: unit\n    };\n  });\n\n  // Group by productName\n  const groupedMap = new Map<string, LineItem>();\n  rawItems.forEach(item => {\n    const key = item.productName;\n    if (groupedMap.has(key)) {\n      const existing = groupedMap.get(key)!;\n      existing.quantity += item.quantity;\n      existing.total += item.total;\n    } else {\n      groupedMap.set(key, { ...item });\n    }\n  });\n  const finalItems = Array.from(groupedMap.values());\n\n  // Grab DOM elements\n  const wrapComp = new WFComponent(config.wrapSelector);\n  const wrapEl = wrapComp.getElement();\n  const emptyEl = document.querySelector(config.emptySelector) as HTMLElement;\n  const template = document.querySelector(config.templateSelector) as HTMLElement;\n  const listComp = new WFComponent(config.listSelector);\n  const listEl = listComp.getElement();\n\n  if (!template) {\n    console.error(\"Line-item template not found:\", config.templateSelector);\n    return;\n  }\n\n  // Clear previous items\n  Array.from(listEl.children).forEach(child => {\n    if ((child as HTMLElement).id !== template.id) {\n      listEl.removeChild(child);\n    }\n  });\n\n  // Handle empty state\n  if (finalItems.length === 0) {\n    wrapEl.style.display = \"none\";\n    if (emptyEl) emptyEl.style.display = \"flex\";\n    return;\n  }\n  wrapEl.style.display = \"flex\";\n  if (emptyEl) emptyEl.style.display = \"none\";\n\n  // Render each line item\n  finalItems.forEach(item => {\n    const row = template.cloneNode(true) as HTMLElement;\n    row.removeAttribute(\"id\");\n    row.style.display = \"flex\";\n    // fill fields\n    const prod = row.querySelector(\"#subscription_item_product\");\n    if (prod) prod.textContent = item.productName;\n    const unitEl = row.querySelector(\"#subscription_item_unit_amount\");\n    if (unitEl) unitEl.textContent = `$${item.unitPrice.toFixed(2)}`;\n    const qtyEl = row.querySelector(\"#subscription_item_quantity\");\n    if (qtyEl) qtyEl.textContent = String(item.quantity);\n    const totalEl = row.querySelector(\"#subscription_item_total\");\n    if (totalEl) totalEl.textContent = `$${item.total.toFixed(2)} ${suffix}`;\n\n    listEl.appendChild(row);\n  });\n}\n","// src/manageSubscription/components/manageSubscriptionSummary.ts\n\nimport { WFComponent } from \"@xatom/core\";\nimport { loadState } from \"../state/manageSubscriptionState\";\n\n/**\n * Recalculates and updates the subscription summary:\n * - Aggregates current subscription line-item totals\n * - Applies any discount (financial aid)\n * - Updates the UI elements for the subscription total and original amount, appending the billing period suffix\n */\nexport function updateSubscriptionSummary(): void {\n  // 1) Aggregate current line items from the DOM\n  const lineTotals = Array.from(\n    document.querySelectorAll(\"#subscription_line_items_list .line_item_total\")\n  ).map(el => {\n    const text = (el.textContent || \"\").replace(/[^0-9.]/g, \"\");\n    return parseFloat(text) || 0;\n  });\n  const subtotal = lineTotals.reduce((sum, amt) => sum + amt, 0);\n\n  // 2) Get discount percentage and billing period from state\n  const state = loadState();\n  const discountPercent = state.apiData?.financial_aid?.selected_discount || 0;\n  const periodType = state.updateSubscriptionType || state.apiData?.subscription_type || \"month\";\n  const suffix =\n    periodType === \"year\" ? \"/year\"\n    : periodType === \"semester\" ? \"/semester\"\n    : \"/month\";\n\n  // 3) Compute discounted total\n  const discountAmount = subtotal * (discountPercent / 100);\n  const totalAfterDiscount = subtotal - discountAmount;\n\n  // 4) Update UI elements\n  const totalEl = new WFComponent(\"#subscription_total\");\n  const origEl = new WFComponent(\"#subscription_original_amount\");\n  const pillEl = new WFComponent(\"#subscription_discount_pill\");\n  const appliedEl = new WFComponent(\"#subscription_discount_applied\");\n\n  if (discountPercent > 0) {\n    appliedEl.setText(`${discountPercent}%`);\n    pillEl.getElement().style.display = \"block\";\n    origEl.setText(`was $${subtotal.toFixed(2)} ${suffix}`);\n    origEl.getElement().style.display = \"block\";\n  } else {\n    pillEl.getElement().style.display = \"none\";\n    origEl.getElement().style.display = \"none\";\n  }\n\n  // Always update the subscription total display with suffix\n  totalEl.setText(`$${totalAfterDiscount.toFixed(2)} ${suffix}`);\n}\n","// src/manageSubscription/components/manageDepositLineItems.ts\n\nimport { WFComponent } from \"@xatom/core\";\nimport { RegistrationItem, ManageSubscriptionResponse } from \"../types\";\n\nexport interface DepositItemsConfig {\n  containerSelector: string;      // e.g., \"#deposit_line_items_container\"\n  listSelector: string;           // e.g., \"#deposit_line_items_list\"\n  templateRowSelector: string;    // e.g., \"#deposit_item_template\"\n  totalSelector: string;          // e.g., \"#deposit_total\"\n}\n\ninterface DepositLine {\n  productName: string;\n  unitPrice: number;\n  quantity: number;\n  total: number;\n}\n\n/**\n * Renders the deposit line items and total for items already paid.\n * Only shows if status === \"Deposit Paid\"; otherwise hides them entirely.\n */\nexport function initManageDepositItems(\n  subscription: ManageSubscriptionResponse,\n  registrationItems: RegistrationItem[],\n  config: DepositItemsConfig\n): void {\n  const containerComp = new WFComponent(config.containerSelector);\n  const containerEl = containerComp.getElement();\n  const listEl = document.querySelector(config.listSelector) as HTMLElement;\n  const templateRow = document.querySelector(\n    config.templateRowSelector\n  ) as HTMLElement;\n  const totalComp = new WFComponent(config.totalSelector);\n\n  // only show deposit items for Deposit Paid subscriptions\n  if (subscription.status !== \"Deposit Paid\") {\n    if (containerEl) containerEl.style.display = \"none\";\n    return;\n  }\n\n  if (!containerEl || !listEl || !templateRow) {\n    console.error(\"Deposit items: missing selectors\");\n    return;\n  }\n\n  // Gather deposit lines\n  const raw: DepositLine[] = [];\n  registrationItems.forEach(item => {\n    const dp = item.session_details.deposit_product as any;\n    const priceAmt = dp?.Single_sale_price_amount || 0;\n    if (priceAmt > 0) {\n      raw.push({\n        productName: dp.Product_name || item.session_details.Name,\n        unitPrice: priceAmt,\n        quantity: 1,\n        total: priceAmt,\n      });\n    }\n  });\n\n  // Group by productName\n  const grouped = new Map<string, DepositLine>();\n  raw.forEach(line => {\n    if (grouped.has(line.productName)) {\n      const existing = grouped.get(line.productName)!;\n      existing.quantity += line.quantity;\n      existing.total += line.total;\n    } else {\n      grouped.set(line.productName, { ...line });\n    }\n  });\n  const depositLines = Array.from(grouped.values());\n\n  // Clear old rows except template\n  Array.from(listEl.children).forEach(child => {\n    if (child === templateRow) return;\n    listEl.removeChild(child);\n  });\n\n  // No deposits? hide\n  const depositTotal = depositLines.reduce((sum, l) => sum + l.total, 0);\n  if (depositTotal <= 0) {\n    containerEl.style.display = \"none\";\n    return;\n  }\n  containerEl.style.display = \"flex\";\n\n  // Ensure template hidden\n  templateRow.style.display = \"none\";\n\n  // Render each deposit line\n  depositLines.forEach(line => {\n    const row = templateRow.cloneNode(true) as HTMLElement;\n    row.removeAttribute(\"id\");\n    row.style.display = \"flex\";\n    const prod = row.querySelector(\"#deposit_item_product\");\n    if (prod) prod.textContent = line.productName;\n    const unitEl = row.querySelector(\"#deposit_item_unit_amount\");\n    if (unitEl) unitEl.textContent = `$${line.unitPrice.toFixed(2)}`;\n    const qtyEl = row.querySelector(\"#deposit_item_quantity\");\n    if (qtyEl) qtyEl.textContent = String(line.quantity);\n    const totalEl = row.querySelector(\"#deposit_item_total\");\n    if (totalEl) totalEl.textContent = `$${line.total.toFixed(2)}`;\n    listEl.appendChild(row);\n  });\n\n  // Set total\n  totalComp.setText(`$${depositTotal.toFixed(2)}`);\n}\n","// src/manageSubscription/components/manageAmountDue.ts\n\nimport { WFComponent } from \"@xatom/core\";\nimport { loadState } from \"../state/manageSubscriptionState\";\nimport type { ManageSubscriptionResponse } from \"../types\";\n\n/**\n * Updates or hides the “Amount Due” container based on payment status,\n * dynamically recalculating from the rendered line items, deposits,\n * and any applied financial aid.\n *\n * - Only shows when status === \"Deposit Paid\".\n * - Label is always \"Amount Due Upon Approval\".\n * - amountDue = (sum of current subscription line‑item totals)\n *               − (sum of current deposit totals)\n *               − (financial aid discount on line items).\n */\nexport function updateAmountDue(): void {\n  const state = loadState();\n  const subscription: ManageSubscriptionResponse = state.apiData!;\n\n  const container = document.querySelector(\n    \"#amountDueContainer\"\n  ) as HTMLElement | null;\n  if (!container) {\n    console.error(\"#amountDueContainer not found\");\n    return;\n  }\n\n  // only show when deposit has been paid\n  if (subscription.status !== \"Deposit Paid\") {\n    container.style.display = \"none\";\n    return;\n  }\n  container.style.display = \"flex\";\n\n  // set static label\n  new WFComponent(\"#amountDueLable\").setText(\"Amount Due Upon Approval\");\n\n  // 1) sum up all current subscription line‑item totals in the DOM\n  const lineSum = Array.from(\n    document.querySelectorAll(\"#subscription_line_items_list .line_item_total\")\n  ).reduce((sum, el) => {\n    const num = parseFloat((el.textContent || \"\").replace(/[^0-9.]/g, \"\"));\n    return sum + (isNaN(num) ? 0 : num);\n  }, 0);\n\n  // 2) sum up all current deposit totals in the DOM\n  const depositSum = Array.from(\n    document.querySelectorAll(\"#deposit_line_items_list .line_item_total\")\n  ).reduce((sum, el) => {\n    const num = parseFloat((el.textContent || \"\").replace(/[^0-9.]/g, \"\"));\n    return sum + (isNaN(num) ? 0 : num);\n  }, 0);\n\n  // 3) compute financial aid discount\n  const discountPercent =\n    state.apiData?.financial_aid?.selected_discount ?? 0;\n  const discountAmount = (lineSum * discountPercent) / 100;\n\n  // 4) compute final due\n  const amountDue = Math.max(0, lineSum - depositSum - discountAmount);\n\n  // 5) render amount due\n  new WFComponent(\"#total_amount_due_next_invoice\").setText(\n    `$${amountDue.toFixed(2)}`\n  );\n}\n","// src/manageSubscription/components/managePendingStudentsAlert.ts\n\nimport { WFComponent } from \"@xatom/core\";\nimport { ManageSubscriptionResponse } from \"../types\";\n\n/**\n * Shows or hides the \"order under review\" alert box when a\n * subscription is Deposit Paid and student profiles are pending.\n */\nexport function updatePendingStudentsAlert(\n  subscription: ManageSubscriptionResponse\n): void {\n  const alertEl = new WFComponent(\"#alertBox\").getElement();\n\n  // Debugging\n  console.log(\n    \"[updatePendingStudentsAlert] status=\", subscription.status,\n    \"pending_students=\", subscription.pending_students\n  );\n  console.log(\"[updatePendingStudentsAlert] alertEl=\", alertEl);\n\n  if (\n    subscription.status === \"Deposit Paid\" &&\n    subscription.pending_students\n  ) {\n    // Reveal by removing inline override (or letting CSS handle default)\n    alertEl.style.display = \"flex\";\n\n  }else{\n    alertEl.style.display = \"none\";\n  \n  }\n}\n","// src/manageSubscription/components/manageTrialAlert.ts\n\nimport { WFComponent } from \"@xatom/core\";\nimport { ManageSubscriptionResponse } from \"../types\";\n\n/**\n * Toggles the \"trial scheduled\" alert box and injects dynamic text\n * based on subscription status and trial end date.\n */\nexport function updateTrialAlert(\n  subscription: ManageSubscriptionResponse\n): void {\n  const trialBoxEl = new WFComponent(\"#alertBoxTrial\").getElement() as HTMLElement;\n  const dateSpan = new WFComponent(\"#subscription_trial_end_date\").getElement() as HTMLElement;\n\n  const now = Date.now();\n  const trialEnd = subscription.free_trial_end || 0;\n\n  // Show if trialEnd is in the future or early registration is flagged\n  if ((trialEnd && trialEnd > now) || subscription.early_registration) {\n    // Format the trial end date\n    const formatted = new Date(trialEnd).toLocaleDateString(\"en-US\", {\n      month: \"long\",\n      day: \"numeric\",\n      year: \"numeric\",\n    });\n    dateSpan.textContent = formatted;\n\n    // Determine dynamic prefix and verb\n    const whenApproved = subscription.status === \"Deposit Paid\"\n      ? \"When approved your\"\n      : \"Your\";\n    const beginOrResume = subscription.status === \"Deposit Paid\"\n      ? \"begin\"\n      : \"resume\";\n\n    // Update the alert-title HTML\n    const titleEl = trialBoxEl.querySelector(\".alert-title\") as HTMLElement;\n    titleEl.innerHTML =\n      `${whenApproved} subscription is scheduled to ${beginOrResume} on ` +\n      `<span id=\"subscription_trial_end_date\">${formatted}</span>. ` +\n      `If you've paid a deposit, your initial invoice will commence on the same date.`;\n\n    // Reveal the alert box (removing any inline hide)\n    trialBoxEl.style.display = \"flex\";\n  } else {\n    // Hide the alert box\n    trialBoxEl.style.display = \"none\";\n  }\n}\n","import { WFComponent } from \"@xatom/core\";\nimport { loadState } from \"../state/manageSubscriptionState\";\nimport type { ManageSubscriptionResponse } from \"../types\";\n\n/**\n * Renders the basic subscription details section:\n *  - Status (with \"Trial\" shown as \"Scheduled\")\n *  - Billing cycle\n *  - Financial Aid Requested (True/hidden)\n *  - Financial Aid Applied (percentage/hidden)\n */\nexport function manageSubscriptionDetails(): void {\n  const state = loadState();\n  const subscription: ManageSubscriptionResponse = state.apiData!;\n\n  // --- Status ---\n  const statusText =\n    subscription.status.toLowerCase() === \"trial\"\n      ? \"Scheduled\"\n      : subscription.status;\n  new WFComponent(\"#status\").setText(statusText);\n\n  // --- Billing Cycle ---\n  const cycle = state.updateSubscriptionType || subscription.subscription_type;\n  new WFComponent(\"#subscriptionType\").setText(cycle);\n\n  // --- Financial Aid ---\n  const finAid = subscription.financial_aid;\n  const hasAid = finAid?.selected_discount != null && finAid.selected_discount > 0;\n\n  const reqWrap = document.querySelector(\n    \"#finAidRequestedWrap\"\n  ) as HTMLElement | null;\n  const reqEl = new WFComponent(\"#finAidRequested\");\n  const appliedWrap = document.querySelector(\n    \"#finAidAppliedWrap\"\n  ) as HTMLElement | null;\n  const appliedEl = new WFComponent(\"#finAidApplied\");\n\n  if (reqWrap && appliedWrap) {\n    if (hasAid) {\n      reqEl.setText(\"True\");\n      reqWrap.style.display = \"flex\";\n\n      appliedEl.setText(`${finAid!.selected_discount}%`);\n      appliedWrap.style.display = \"flex\";\n    } else {\n      reqWrap.style.display = \"none\";\n      appliedWrap.style.display = \"none\";\n    }\n  } else {\n    console.error(\"manageSubscriptionDetails: missing financial aid selectors\");\n  }\n}\n","import { WFComponent, WFFormComponent } from \"@xatom/core\";\nimport { apiClient } from \"../../../api/apiConfig\";\nimport { loadState, saveState } from \"../state/manageSubscriptionState\";\nimport type { ManageSubscriptionResponse } from \"../types\";\n\n/**\n * Handles the \"Cancel Subscription\" flow:\n * 1) Opens a dialog asking for a cancellation reason\n * 2) On form submit, sends subscription_id + reason to /subscriptions/cancel\n * 3) Upon success, shows a success message and sets the page_main data-brand to 4\n * 4) On dialog close, resets data-brand to 2\n * Hides the cancel button if the subscription is already cancelled\n */\nexport class CancelSubscriptionDialog {\n  private dialogComp = new WFComponent(\"#cancelSubscriptionDialog\");\n  private formComp = new WFFormComponent<{ removed_because: string }>(\n    \"#cancelFullSubscriptionForm\"\n  );\n  private openBtnComp = new WFComponent(\"#openCancelSubscription\");\n  private closeBtnComp = new WFComponent(\"#close-cancel-dialog-btn\");\n  private submitBtnComp = new WFComponent(\"#submitCancel\");\n  private loadingComp = new WFComponent(\"#submitCancelLoading\");\n  private reasonError = new WFComponent(\"#submitCancelError\");\n  private pageMainComp = new WFComponent(\".page_main\");\n\n  constructor() {\n    // Hide cancel button if subscription already cancelled\n    const state = loadState();\n    if (state.apiData?.status === \"Cancelled\") {\n      this.openBtnComp.getElement().style.display = \"none\";\n    }\n\n    this.attachListeners();\n  }\n\n  private attachListeners() {\n    // Intercept form submit\n    this.formComp.onFormSubmit(async (formData, ev) => {\n      ev.preventDefault();\n      this.reasonError.getElement().style.display = \"none\";\n      const reason = (formData.removed_because as string).trim();\n      if (!reason) {\n        this.reasonError.setText(\"Reason is required.\");\n        this.reasonError.getElement().style.display = \"block\";\n        return;\n      }\n      await this.submitCancel(reason);\n    });\n\n    // Open dialog\n    this.openBtnComp.on(\"click\", (e) => {\n      e.preventDefault();\n      this.reasonError.getElement().style.display = \"none\";\n      this.loadingComp.getElement().style.display = \"none\";\n      this.openDialog();\n    });\n\n    // Backdrop click → close\n    const dlgEl = this.dialogComp.getElement() as HTMLDialogElement;\n    dlgEl.addEventListener(\"click\", (e: MouseEvent) => {\n      if (e.target === dlgEl) this.closeDialog();\n    });\n\n    // X button\n    this.closeBtnComp.on(\"click\", () => this.closeDialog());\n  }\n\n  private openDialog() {\n    // switch to cancel-dialog brand\n    this.pageMainComp.setAttribute(\"data-brand\", \"6\");\n    (this.dialogComp.getElement() as HTMLDialogElement).showModal();\n  }\n\n  private closeDialog() {\n    (this.dialogComp.getElement() as HTMLDialogElement).close();\n    // reset to default\n    this.pageMainComp.setAttribute(\"data-brand\", \"2\");\n  }\n\n  private async submitCancel(reason: string) {\n    // show loader + disable\n    this.loadingComp.getElement().style.display = \"block\";\n    this.submitBtnComp.getElement().setAttribute(\"disabled\", \"true\");\n\n    try {\n      const st = loadState();\n      const response = await apiClient\n        .post<ManageSubscriptionResponse>(\"/subscriptions/cancel\", {\n          data: {\n            subscription_id: st.apiData!.id,\n            reason,\n          },\n        })\n        .fetch();\n\n      // filter out cancelled, waitlist, draft, pending statuses\n      const visibleRegs = (response.registrations || [])\n        .filter(r => {\n          const s = r.status.toUpperCase();\n          return s !== \"CANCELLED\" && s !== \"WAITLIST\" && s !== \"DRAFT\" && s !== \"PENDING\";\n        });\n\n      // update state with filtered registrations\n      saveState({\n        apiData: response,\n        registrationItems: visibleRegs\n      });\n\n      // re-render page items\n      ;(window as any).renderAll();\n\n      // show success and swap to success brand\n      this.formComp.showSuccessState();\n      this.pageMainComp.setAttribute(\"data-brand\", \"4\");\n    } catch (err) {\n      console.error(\"Cancel failed:\", err);\n      this.formComp.showErrorState();\n    } finally {\n      // hide loader + re-enable\n      this.loadingComp.getElement().style.display = \"none\";\n      this.submitBtnComp.getElement().removeAttribute(\"disabled\");\n    }\n  }\n}\n"],"names":["modules","entry","mainEntry","parcelRequireName","globalName","globalObject","globalThis","self","window","global","previousRequire","cache","nodeRequire","module","require","bind","newRequire","name","jumped","currentRequire","err","Error","code","localRequire","resolve","x","id","Module","call","exports","res","isParcelRequire","moduleName","bundle","parent","register","Object","defineProperty","get","i","length","parcelHelpers","defineInteropFlag","export","manageSubscriptionPage","renderAll","_apiConfig","_core","_manageSubscriptionState","_manageRegistrationTable","_manageSubscriptionLineItems","_manageSubscriptionSummary","_manageDepositLineItems","_manageAmountDue","_managePendingStudentsAlert","_manageTrialAlert","_manageSubscriptionDetails","_manageSubscriptionCancelDialog","REG_TABLE_CONFIG","tableBodySelector","templateRowSelector","emptyStateSelector","data","apiClient","post","fetch","location","href","initialType","update_subscription_type","subscription_type","saveState","apiData","registrationItems","registrations","updateSubscriptionType","document","querySelector","setAttribute","getElementById","initManageRegistrationTable","addEventListener","e","btn","target","closest","handleRemove","row","st","loadState","alert","remove","kept","filter","ri","session_id","toString","getAttribute","student_profile","click","form","WFFormComponent","dialogEl","pageMain","WFComponent","errorComp","loaderComp","submitBtn","preventDefault","getElement","style","display","showModal","onFormSubmit","dataMap","ev","reason","removed_because","trim","setText","state","originalIds","map","r","keptIds","toCancel","includes","subscription_id","registration_item_ids","fresh","showSuccessState","console","error","showErrorState","removeAttribute","close","showForm","resetForm","enableForm","orig","CancelSubscriptionDialog","s","sub","items","initManageLineItems","listSelector","wrapSelector","emptySelector","templateSelector","updateSubscriptionSummary","initManageDepositItems","containerSelector","totalSelector","updateAmountDue","updatePendingStudentsAlert","updateTrialAlert","manageSubscriptionDetails","STORAGE_KEY","loadStateFromStorage","stored","localStorage","getItem","JSON","parse","undefined","newState","saveStateToStorage","setItem","stringify","config","tableBodyEl","tableBodyComp","templateRow","emptyRow","Array","from","querySelectorAll","forEach","item","newRow","cloneNode","String","program_id","workshop_id","student_id","programText","textContent","program_details","workshopText","wsName","workshop_details","Name","sessionText","session_details","Weekday","Time_block","studentText","first_name","last_name","sel","confirmBtn","appendChild","subscriptionType","suffix","rawItems","session","tuition","tuition_product","unit","parseFloat","priceStr","Displayed_annual_price","Displayed_monthly_price","Displayed_semester_price","replace","productName","unitPrice","quantity","total","groupedMap","Map","key","has","existing","set","finalItems","values","wrapEl","wrapComp","emptyEl","template","listEl","listComp","children","child","removeChild","prod","unitEl","toFixed","qtyEl","totalEl","subtotal","lineTotals","el","reduce","sum","amt","discountPercent","financial_aid","selected_discount","periodType","origEl","pillEl","appliedEl","totalAfterDiscount","subscription","containerEl","containerComp","totalComp","status","raw","dp","deposit_product","priceAmt","Single_sale_price_amount","push","Product_name","grouped","line","depositLines","depositTotal","l","container","lineSum","num","isNaN","depositSum","amountDue","Math","max","alertEl","log","pending_students","trialBoxEl","dateSpan","now","Date","trialEnd","free_trial_end","early_registration","formatted","toLocaleDateString","month","day","year","whenApproved","beginOrResume","titleEl","innerHTML","statusText","toLowerCase","cycle","finAid","hasAid","reqWrap","reqEl","appliedWrap","constructor","dialogComp","formComp","openBtnComp","closeBtnComp","submitBtnComp","loadingComp","reasonError","pageMainComp","attachListeners","formData","submitCancel","on","openDialog","dlgEl","closeDialog","response","visibleRegs","toUpperCase"],"version":3,"file":"manageSubscription.972d0885.js.map"}