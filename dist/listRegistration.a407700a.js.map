{"mappings":"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","sources":["src/modules/dashboard/listRegistration.ts","node_modules/.pnpm/@xatom+image@1.0.0_@xatom+core@1.0.12/node_modules/@xatom/image/dist/index.js"],"sourcesContent":["// src/pages/listSubscriptions.ts\n\nimport { WFDynamicList, WFComponent } from \"@xatom/core\";\nimport { WFImage } from \"@xatom/image\";\nimport { apiClient } from \"../../api/apiConfig\";\n\n// Define the Subscription interface based on the API response\ninterface Subscription {\n  id: number;\n  created_at: number; // Unix timestamp in milliseconds\n  status: string; // e.g., 'Active', 'Inactive', 'Deposit Paid'\n  subscription_type: string; // e.g., 'Annual', 'Monthly'\n  program_name: string;\n  workshop_name: string;\n  coupon?: string | null;\n  deposit_amount: number;\n  start_date: string; // ISO date string\n  next_charge_date?: string | null;\n  stripe_subscription_id?: string | null;\n  user_id: number;\n  program_id: string;\n  workshop_id: string;\n  sale_id: number;\n  image_url: string;\n}\n\n// Define the structure of the API response\ninterface SubscriptionApiResponse {\n  subscriptions: Subscription[];\n}\n\n// Function to fetch subscriptions from the API\nexport async function fetchSubscriptions(): Promise<Subscription[]> {\n  try {\n    const getSubscriptions = apiClient.get<SubscriptionApiResponse>(\n      \"/subscriptions\" // Ensure this endpoint is correct\n    );\n    const response = await getSubscriptions.fetch();\n    return response.subscriptions;\n  } catch (error) {\n    console.error(\"Error fetching subscriptions:\", error);\n    throw error;\n  }\n}\n\n// Function to initialize and render the dynamic subscription list\nexport async function initializeDynamicSubscriptionList(\n  containerSelector: string\n) {\n  // Initialize a new instance of WFDynamicList for Subscriptions\n  const list = new WFDynamicList<Subscription>(containerSelector, {\n    rowSelector: \"#listRegistrationCard\", // Using ID selector for template\n    loaderSelector: \"#listRegistrationloading\", // Selector for the loader\n    emptySelector: \"#listRegistrationEmpty\", // Selector for the empty state\n  });\n\n  // Customize the rendering of the loader\n  list.loaderRenderer((loaderElement) => {\n    loaderElement.setStyle({\n      display: \"flex\",\n    });\n    return loaderElement;\n  });\n\n  // Customize the rendering of the empty state\n  list.emptyRenderer((emptyElement) => {\n    emptyElement.setStyle({\n      display: \"flex\",\n    });\n    return emptyElement;\n  });\n\n  // Customize the rendering of list items (Subscription Cards)\n  list.rowRenderer(({ rowData, rowElement }) => {\n    const registrationCard = new WFComponent(rowElement);\n\n    // Set the profile image\n    const registrationImage = new WFImage(\n      registrationCard\n        .getChildAsComponent(\"#cardRegistrationImage\") // Using ID selector\n        .getElement()\n    );\n    if (rowData.image_url) {\n      registrationImage.setImage(rowData.image_url);\n    } else {\n      registrationImage.setImage(\n        \"https://cdn.prod.website-files.com/66102236c16b61185de61fe3/66102236c16b61185de6204e_placeholder.svg\"\n      );\n    }\n\n    // Set the program name\n    const programName =\n      registrationCard.getChildAsComponent(\"#cardProgramName\"); // Using ID selector\n    programName.setText(rowData.program_name);\n\n    // Append the subscription parameter to the existing href\n    const currentHref =\n      registrationCard.getElement().getAttribute(\"href\") || \"#\";\n    const separator = currentHref.includes(\"?\") ? \"&\" : \"?\";\n    const newHref = `${currentHref}${separator}program=${rowData.program_id}`;\n    registrationCard.getElement().setAttribute(\"href\", newHref);\n\n    // Show the list item\n    rowElement.setStyle({\n      display: \"block\",\n    });\n\n    return rowElement;\n  });\n\n  // Load and display subscription data\n  try {\n    // Enable the loading state\n    list.changeLoadingStatus(true);\n\n    const subscriptions = await fetchSubscriptions();\n\n    // Filter unique subscriptions by program_id\n    const uniqueSubscriptionsMap = new Map<string, Subscription>();\n    subscriptions.forEach((sub) => {\n      if (!uniqueSubscriptionsMap.has(sub.program_id)) {\n        uniqueSubscriptionsMap.set(sub.program_id, sub);\n      }\n    });\n    const uniqueSubscriptions = Array.from(uniqueSubscriptionsMap.values());\n\n    // Sort subscriptions alphabetically by program name\n    uniqueSubscriptions.sort((a, b) =>\n      a.program_name.localeCompare(b.program_name)\n    );\n\n    // Set the data to be displayed in the dynamic list\n    list.setData(uniqueSubscriptions);\n\n    // Disable the loading state\n    list.changeLoadingStatus(false);\n  } catch (error) {\n    console.error(\"Error loading subscriptions:\", error);\n\n    // If there's an error, set an empty array to trigger the empty state\n    list.setData([]);\n\n    // Disable the loading state\n    list.changeLoadingStatus(false);\n  }\n}\n","var t=require(\"@xatom/core\");var e,r,s,i,o,n,u={};e=u,r=\"WFImage\",s=()=>c,Object.defineProperty(e,r,{get:s,set:i,enumerable:!0,configurable:!0});class c extends t.WFComponent{constructor(t){super(t)}getImageConfig(){return this._config}getSrc(){return this.getAttribute(\"src\")}getSizes(){return this.getAttribute(\"sizes\")}getSrcSet(){return this.getAttribute(\"srcset\")}getLoading(){return this.getAttribute(\"loading\")}onLoad(t){return this.on(\"load\",t),()=>{this.off(\"load\",t)}}onLoadError(t){return this.on(\"error\",t),()=>{this.off(\"error\",t)}}setImage(t){if(\"string\"==typeof t)this.setAttribute(\"src\",t),this.removeAttribute(\"srcset\"),this.removeAttribute(\"sizes\");else{if(this.setAttribute(\"src\",t.src),\"object\"==typeof t&&t.srcSet&&t.srcSet.length&&t.sizes&&t.sizes.length){const e=t.srcSet.map((t=>`${t.url} ${t.size}`)).join(\", \");this.setAttribute(\"srcset\",e)}else this.removeAttribute(\"srcset\"),this.removeAttribute(\"sizes\");t.loading&&this.setAttribute(\"loading\",t.loading)}}}o=module.exports,n=u,Object.keys(n).forEach((function(t){\"default\"===t||\"__esModule\"===t||o.hasOwnProperty(t)||Object.defineProperty(o,t,{enumerable:!0,get:function(){return n[t]}})}));"],"names":[],"version":3,"file":"listRegistration.a407700a.js.map","sourceRoot":"../"}