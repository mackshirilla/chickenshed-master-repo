{"mappings":"C,A,S,C,C,C,C,C,C,C,C,C,E,I,E,A,a,O,W,W,A,a,O,K,K,A,a,O,O,O,A,a,O,O,O,C,E,E,A,Y,O,C,C,E,E,C,C,E,C,E,E,K,E,C,E,E,A,a,O,Q,A,Y,O,O,O,E,O,O,C,I,C,Q,S,E,C,C,C,E,G,C,C,C,E,C,C,G,C,C,C,E,C,C,I,E,A,Y,O,C,C,E,E,C,C,E,C,G,C,G,E,O,E,E,C,G,G,E,O,E,E,C,G,G,G,A,U,O,E,O,E,G,I,E,A,M,uB,E,I,O,E,I,C,mB,C,C,E,O,C,S,C,E,I,E,C,C,E,C,E,C,E,C,O,A,M,E,E,C,E,E,K,C,C,E,I,E,C,C,E,C,I,E,M,C,G,C,C,E,C,E,C,I,C,E,O,C,E,E,E,O,C,I,C,C,O,C,C,E,C,O,C,S,E,C,E,I,E,E,O,C,G,M,A,C,I,E,C,E,E,E,C,C,E,e,C,C,E,E,M,C,S,C,E,I,C,E,C,E,I,C,M,C,E,I,C,O,C,C,C,E,E,O,C,E,E,K,C,E,E,M,C,E,E,Q,C,S,C,C,C,E,C,C,E,C,C,S,C,C,C,E,E,O,C,C,E,C,E,A,E,O,c,C,E,O,C,I,W,O,C,C,E,A,C,G,C,C,E,C,E,I,I,E,E,E,E,M,C,I,E,C,C,E,C,E,C,Q,C,S,C,C,C,C,C,E,I,E,E,kD,E,iB,C,GCMa,EAAA,MAAA,CAAA,EAAA,6BAAA,IAAA,GAJb,IAAA,EAAA,EAAA,eACA,EAAA,EAAA,+BACA,EAAA,EAAA,yBAEO,IAAM,EAA6B,UAEtC,AADsB,IAAI,EAAA,WAAU,CAAE,kBACxB,OAAO,CAAC,AAAA,CAAA,EAAA,EAAA,QAAO,AAAP,EAAS,OAAO,GAAG,OAAO,CAAC,UAAU,EAE7D,GAAI,CAEF,MAAM,AAAA,CAAA,EAAA,EAAA,yCAAyC,AAAzC,EAA0C,cAGhD,EAAoB,mBACtB,CAAE,MAAO,EAAO,CACd,QAAQ,KAAK,CAAC,wCAAyC,GAEvD,IAAM,EAAe,IAAI,EAAA,WAAU,CAAE,iBACrC,EAAa,OAAO,CAAC,2DACrB,EAAa,QAAQ,CAAC,CAAE,QAAS,OAAQ,EAC3C,CACF,EAGM,EAAsB,AAAC,IAC3B,IAAM,EAAiB,SAAS,aAAa,CAAC,EAC1C,CAAA,aAA0B,YAC5B,EAAe,KAAK,GAEpB,QAAQ,IAAI,CAAC,CAAC,+BAA+B,EAAE,EAAS,CAAC,CAE7D,C,E,C,c,Q,8B,Q,wB,Q,iD,O,E,C,M,C,S,C,C,C,C,C,E,I,E,E,kD,E,iB,C,GCfA,EAAA,MAAA,CAAA,EAAA,6BAAA,IAAsB,GAYtB,EAAA,MAAA,CAAA,EAAA,4CAAA,IAAsB,GA5BtB,IAAA,EAAA,EAAA,eACA,EAAA,EAAA,uBAeO,eAAe,IACpB,GAAI,CACF,IAAM,EAAW,AAAA,CAAA,EAAA,EAAA,SAAS,AAAT,EAAU,GAAG,CAAa,oCAE3C,OADiB,MAAM,EAAS,KAAK,EAEvC,CAAE,MAAO,EAAO,CAEd,MADA,QAAQ,KAAK,CAAC,8CAA+C,GACvD,CACR,CACF,CAGO,eAAe,EACpB,CAAyB,EAKzB,IAAM,EAAO,IAAI,EAAA,aAAY,CAAY,EAAmB,CAC1D,YAAa,YACb,eAAgB,gBAChB,cAAe,aACjB,GAGA,EAAK,cAAc,CAAC,AAAC,IACnB,EAAc,QAAQ,CAAC,CACrB,QAAS,MACX,GACO,IAIT,EAAK,aAAa,CAAC,AAAC,IAClB,EAAa,QAAQ,CAAC,CACpB,QAAS,MACX,GACO,IAIT,EAAK,WAAW,CAAC,CAAC,CAAE,QAAA,CAAO,CAAE,WAAA,CAAU,CAAE,IACvC,IAAM,EAAW,IAAI,EAAA,WAAU,CAAE,GAcjC,OAXA,EAAS,YAAY,CAAC,OAAQ,EAAQ,QAAQ,EAI9C,AADiB,EAAS,mBAAmB,CAAC,aACrC,OAAO,CAAC,EAAQ,SAAS,EAGlC,EAAW,QAAQ,CAAC,CAClB,QAAS,OACX,GAEO,CACT,GAGA,GAAI,CAEF,EAAK,mBAAmB,CAAC,CAAA,GAEzB,IAAM,EAAQ,MAAM,IAGpB,EAAM,IAAI,CAAC,CAAC,EAAG,IAAM,EAAE,SAAS,CAAC,aAAa,CAAC,EAAE,SAAS,GAG1D,EAAK,OAAO,CAAC,GAGb,EAAK,mBAAmB,CAAC,CAAA,EAC3B,CAAE,MAAO,EAAO,CACd,QAAQ,KAAK,CAAC,iCAAkC,GAGhD,EAAK,OAAO,CAAC,EAAE,EAGf,EAAK,mBAAmB,CAAC,CAAA,EAC3B,CACF,C,E,C,c,Q,sB,Q,iD,O,E,E,E,C,E","sources":["<anon>","src/modules/student_dashboard/studentDashboard.ts","src/modules/student_dashboard/listStudentDashboardFiles.ts"],"sourcesContent":["// modules are defined as an array\n// [ module function, map of requires ]\n//\n// map of requires is short require name -> numeric require\n//\n// anything defined in a previous bundle is accessed via the\n// orig method which is the require for previous bundles\n\n(function (modules, entry, mainEntry, parcelRequireName, globalName) {\n  /* eslint-disable no-undef */\n  var globalObject =\n    typeof globalThis !== 'undefined'\n      ? globalThis\n      : typeof self !== 'undefined'\n      ? self\n      : typeof window !== 'undefined'\n      ? window\n      : typeof global !== 'undefined'\n      ? global\n      : {};\n  /* eslint-enable no-undef */\n\n  // Save the require from previous bundle to this closure if any\n  var previousRequire =\n    typeof globalObject[parcelRequireName] === 'function' &&\n    globalObject[parcelRequireName];\n\n  var cache = previousRequire.cache || {};\n  // Do not use `require` to prevent Webpack from trying to bundle this call\n  var nodeRequire =\n    typeof module !== 'undefined' &&\n    typeof module.require === 'function' &&\n    module.require.bind(module);\n\n  function newRequire(name, jumped) {\n    if (!cache[name]) {\n      if (!modules[name]) {\n        // if we cannot find the module within our internal map or\n        // cache jump to the current global require ie. the last bundle\n        // that was added to the page.\n        var currentRequire =\n          typeof globalObject[parcelRequireName] === 'function' &&\n          globalObject[parcelRequireName];\n        if (!jumped && currentRequire) {\n          return currentRequire(name, true);\n        }\n\n        // If there are other bundles on this page the require from the\n        // previous one is saved to 'previousRequire'. Repeat this as\n        // many times as there are bundles until the module is found or\n        // we exhaust the require chain.\n        if (previousRequire) {\n          return previousRequire(name, true);\n        }\n\n        // Try the node require function if it exists.\n        if (nodeRequire && typeof name === 'string') {\n          return nodeRequire(name);\n        }\n\n        var err = new Error(\"Cannot find module '\" + name + \"'\");\n        err.code = 'MODULE_NOT_FOUND';\n        throw err;\n      }\n\n      localRequire.resolve = resolve;\n      localRequire.cache = {};\n\n      var module = (cache[name] = new newRequire.Module(name));\n\n      modules[name][0].call(\n        module.exports,\n        localRequire,\n        module,\n        module.exports,\n        this\n      );\n    }\n\n    return cache[name].exports;\n\n    function localRequire(x) {\n      var res = localRequire.resolve(x);\n      return res === false ? {} : newRequire(res);\n    }\n\n    function resolve(x) {\n      var id = modules[name][1][x];\n      return id != null ? id : x;\n    }\n  }\n\n  function Module(moduleName) {\n    this.id = moduleName;\n    this.bundle = newRequire;\n    this.exports = {};\n  }\n\n  newRequire.isParcelRequire = true;\n  newRequire.Module = Module;\n  newRequire.modules = modules;\n  newRequire.cache = cache;\n  newRequire.parent = previousRequire;\n  newRequire.register = function (id, exports) {\n    modules[id] = [\n      function (require, module) {\n        module.exports = exports;\n      },\n      {},\n    ];\n  };\n\n  Object.defineProperty(newRequire, 'root', {\n    get: function () {\n      return globalObject[parcelRequireName];\n    },\n  });\n\n  globalObject[parcelRequireName] = newRequire;\n\n  for (var i = 0; i < entry.length; i++) {\n    newRequire(entry[i]);\n  }\n\n  if (mainEntry) {\n    // Expose entry point to Node, AMD or browser globals\n    // Based on https://github.com/ForbesLindesay/umd/blob/master/template.js\n    var mainExports = newRequire(mainEntry);\n\n    // CommonJS\n    if (typeof exports === 'object' && typeof module !== 'undefined') {\n      module.exports = mainExports;\n\n      // RequireJS\n    } else if (typeof define === 'function' && define.amd) {\n      define(function () {\n        return mainExports;\n      });\n\n      // <script>\n    } else if (globalName) {\n      this[globalName] = mainExports;\n    }\n  }\n})({\"2mMi9\":[function(require,module,exports) {\n// src/pages/dashboard.ts\nvar parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"initializeStudentDashboard\", ()=>initializeStudentDashboard);\nvar _core = require(\"@xatom/core\");\nvar _listStudentDashboardFiles = require(\"./listStudentDashboardFiles\"); // Adjust path if necessary\nvar _authConfig = require(\"../../auth/authConfig\");\nconst initializeStudentDashboard = async ()=>{\n    const firstNameText = new (0, _core.WFComponent)(\"#firstNameText\");\n    firstNameText.setText((0, _authConfig.userAuth).getUser().profile.first_name);\n    try {\n        // Initialize and render the dynamic file list\n        await (0, _listStudentDashboardFiles.initializeDynamicStudentDashboardFileList)(\"#filesList\"); // Replace with your actual container selector\n        // Trigger the success event if needed\n        triggerSuccessEvent(\".success_trigger\");\n    } catch (error) {\n        console.error(\"Error initializing student dashboard:\", error);\n        // Optionally, display an error message to the user\n        const requestError = new (0, _core.WFComponent)(\"#requestError\");\n        requestError.setText(\"Failed to load dashboard files. Please try again later.\");\n        requestError.setStyle({\n            display: \"block\"\n        });\n    }\n};\n// Function to programmatically trigger a click event on a specified selector\nconst triggerSuccessEvent = (selector)=>{\n    const successTrigger = document.querySelector(selector);\n    if (successTrigger instanceof HTMLElement) successTrigger.click();\n    else console.warn(`No element found for selector: ${selector}`);\n};\n\n},{\"@xatom/core\":\"65YBq\",\"./listStudentDashboardFiles\":\"e8U4r\",\"../../auth/authConfig\":\"dHwPR\",\"@parcel/transformer-js/src/esmodule-helpers.js\":\"jiucr\"}],\"e8U4r\":[function(require,module,exports) {\n// src/pages/listStudentFilesDashboard.ts\nvar parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\n// Function to fetch files for the authenticated student\nparcelHelpers.export(exports, \"fetchStudentDashboardFiles\", ()=>fetchStudentDashboardFiles);\n// Function to initialize and render the dynamic file list for the student dashboard\nparcelHelpers.export(exports, \"initializeDynamicStudentDashboardFileList\", ()=>initializeDynamicStudentDashboardFileList);\nvar _core = require(\"@xatom/core\");\nvar _apiConfig = require(\"../../api/apiConfig\");\nasync function fetchStudentDashboardFiles() {\n    try {\n        const getFiles = (0, _apiConfig.apiClient).get(\"/student_files/student-dashboard\");\n        const response = await getFiles.fetch();\n        return response;\n    } catch (error) {\n        console.error(\"Error fetching dashboard files for student:\", error);\n        throw error;\n    }\n}\nasync function initializeDynamicStudentDashboardFileList(containerSelector) {\n    // No need to get student ID from URL since the auth token identifies the user\n    // Initialize a new instance of WFDynamicList for Files\n    const list = new (0, _core.WFDynamicList)(containerSelector, {\n        rowSelector: \"#fileCard\",\n        loaderSelector: \"#filesloading\",\n        emptySelector: \"#filesEmpty\"\n    });\n    // Customize the rendering of the loader\n    list.loaderRenderer((loaderElement)=>{\n        loaderElement.setStyle({\n            display: \"flex\"\n        });\n        return loaderElement;\n    });\n    // Customize the rendering of the empty state\n    list.emptyRenderer((emptyElement)=>{\n        emptyElement.setStyle({\n            display: \"flex\"\n        });\n        return emptyElement;\n    });\n    // Customize the rendering of list items (File Cards)\n    list.rowRenderer(({ rowData, rowElement })=>{\n        const fileCard = new (0, _core.WFComponent)(rowElement);\n        // Assuming the entire row is a link to the file\n        fileCard.setAttribute(\"href\", rowData.file_url);\n        // Set the fileName to file_name\n        const fileName = fileCard.getChildAsComponent(\"#fileName\");\n        fileName.setText(rowData.file_name);\n        // Show the list item\n        rowElement.setStyle({\n            display: \"block\"\n        });\n        return rowElement;\n    });\n    // Load and display file data\n    try {\n        // Enable the loading state\n        list.changeLoadingStatus(true);\n        const files = await fetchStudentDashboardFiles();\n        // Sort files alphabetically by file_name\n        files.sort((a, b)=>a.file_name.localeCompare(b.file_name));\n        // Set the data to be displayed in the dynamic list\n        list.setData(files);\n        // Disable the loading state\n        list.changeLoadingStatus(false);\n    } catch (error) {\n        console.error(\"Error loading dashboard files:\", error);\n        // If there's an error, set an empty array to trigger the empty state\n        list.setData([]);\n        // Disable the loading state\n        list.changeLoadingStatus(false);\n    }\n}\n\n},{\"@xatom/core\":\"65YBq\",\"../../api/apiConfig\":\"dUmIV\",\"@parcel/transformer-js/src/esmodule-helpers.js\":\"jiucr\"}]},[], null, \"parcelRequired346\")\n\n//# sourceMappingURL=studentDashboard.b7c84d07.js.map\n","// src/pages/dashboard.ts\n\nimport { WFComponent } from \"@xatom/core\";\nimport { initializeDynamicStudentDashboardFileList } from \"./listStudentDashboardFiles\"; // Adjust path if necessary\nimport { userAuth } from \"../../auth/authConfig\";\n\nexport const initializeStudentDashboard = async () => {\n    const firstNameText = new WFComponent(\"#firstNameText\");\n    firstNameText.setText(userAuth.getUser().profile.first_name);\n\n  try {\n    // Initialize and render the dynamic file list\n    await initializeDynamicStudentDashboardFileList(\"#filesList\"); // Replace with your actual container selector\n\n    // Trigger the success event if needed\n    triggerSuccessEvent(\".success_trigger\");\n  } catch (error) {\n    console.error(\"Error initializing student dashboard:\", error);\n    // Optionally, display an error message to the user\n    const requestError = new WFComponent(\"#requestError\");\n    requestError.setText(\"Failed to load dashboard files. Please try again later.\");\n    requestError.setStyle({ display: \"block\" });\n  }\n};\n\n// Function to programmatically trigger a click event on a specified selector\nconst triggerSuccessEvent = (selector: string) => {\n  const successTrigger = document.querySelector(selector);\n  if (successTrigger instanceof HTMLElement) {\n    successTrigger.click();\n  } else {\n    console.warn(`No element found for selector: ${selector}`);\n  }\n};\n","// src/pages/listStudentFilesDashboard.ts\n\nimport { WFDynamicList, WFComponent } from \"@xatom/core\";\nimport { apiClient } from \"../../api/apiConfig\";\n\n// Define the FileItem interface based on the API response\ninterface FileItem {\n  id: number;\n  file_name: string;\n  file_url: string;\n  program_id?: string | null;\n  workshop_id?: string | null;\n  session_id?: string | null;\n  user_id: number;\n  created_at: number;\n}\n\n// Function to fetch files for the authenticated student\nexport async function fetchStudentDashboardFiles(): Promise<FileItem[]> {\n  try {\n    const getFiles = apiClient.get<FileItem[]>(\"/student_files/student-dashboard\");\n    const response = await getFiles.fetch();\n    return response;\n  } catch (error) {\n    console.error(\"Error fetching dashboard files for student:\", error);\n    throw error;\n  }\n}\n\n// Function to initialize and render the dynamic file list for the student dashboard\nexport async function initializeDynamicStudentDashboardFileList(\n  containerSelector: string\n) {\n  // No need to get student ID from URL since the auth token identifies the user\n\n  // Initialize a new instance of WFDynamicList for Files\n  const list = new WFDynamicList<FileItem>(containerSelector, {\n    rowSelector: \"#fileCard\", // Using ID selector for template\n    loaderSelector: \"#filesloading\", // Selector for the loader\n    emptySelector: \"#filesEmpty\", // Selector for the empty state\n  });\n\n  // Customize the rendering of the loader\n  list.loaderRenderer((loaderElement) => {\n    loaderElement.setStyle({\n      display: \"flex\",\n    });\n    return loaderElement;\n  });\n\n  // Customize the rendering of the empty state\n  list.emptyRenderer((emptyElement) => {\n    emptyElement.setStyle({\n      display: \"flex\",\n    });\n    return emptyElement;\n  });\n\n  // Customize the rendering of list items (File Cards)\n  list.rowRenderer(({ rowData, rowElement }) => {\n    const fileCard = new WFComponent(rowElement);\n\n    // Assuming the entire row is a link to the file\n    fileCard.setAttribute(\"href\", rowData.file_url);\n\n    // Set the fileName to file_name\n    const fileName = fileCard.getChildAsComponent(\"#fileName\");\n    fileName.setText(rowData.file_name);\n\n    // Show the list item\n    rowElement.setStyle({\n      display: \"block\",\n    });\n\n    return rowElement;\n  });\n\n  // Load and display file data\n  try {\n    // Enable the loading state\n    list.changeLoadingStatus(true);\n\n    const files = await fetchStudentDashboardFiles();\n\n    // Sort files alphabetically by file_name\n    files.sort((a, b) => a.file_name.localeCompare(b.file_name));\n\n    // Set the data to be displayed in the dynamic list\n    list.setData(files);\n\n    // Disable the loading state\n    list.changeLoadingStatus(false);\n  } catch (error) {\n    console.error(\"Error loading dashboard files:\", error);\n\n    // If there's an error, set an empty array to trigger the empty state\n    list.setData([]);\n\n    // Disable the loading state\n    list.changeLoadingStatus(false);\n  }\n}\n"],"names":["modules","entry","mainEntry","parcelRequireName","globalName","globalObject","globalThis","self","window","global","previousRequire","cache","nodeRequire","module","require","bind","newRequire","name","jumped","currentRequire","err","Error","code","localRequire","resolve","x","id","Module","call","exports","res","isParcelRequire","moduleName","bundle","parent","register","Object","defineProperty","get","i","length","parcelHelpers","defineInteropFlag","export","initializeStudentDashboard","_core","_listStudentDashboardFiles","_authConfig","firstNameText","WFComponent","setText","userAuth","getUser","profile","first_name","initializeDynamicStudentDashboardFileList","triggerSuccessEvent","error","console","requestError","setStyle","display","selector","successTrigger","document","querySelector","HTMLElement","click","warn","fetchStudentDashboardFiles","_apiConfig","getFiles","apiClient","fetch","containerSelector","list","WFDynamicList","rowSelector","loaderSelector","emptySelector","loaderRenderer","loaderElement","emptyRenderer","emptyElement","rowRenderer","rowData","rowElement","fileCard","setAttribute","file_url","fileName","getChildAsComponent","file_name","changeLoadingStatus","files","sort","a","b","localeCompare","setData"],"version":3,"file":"studentDashboard.b7c84d07.js.map"}