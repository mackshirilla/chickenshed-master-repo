{"mappings":"C,A,S,C,C,C,C,C,C,C,C,C,E,I,E,A,a,O,W,W,A,a,O,K,K,A,a,O,O,O,A,a,O,O,O,C,E,E,A,Y,O,C,C,E,E,C,C,E,C,E,E,K,E,C,E,E,A,a,O,Q,A,Y,O,O,O,E,O,O,C,I,C,Q,S,E,C,C,C,E,G,C,C,C,E,C,C,G,C,C,C,E,C,C,I,E,A,Y,O,C,C,E,E,C,C,E,C,G,C,G,E,O,E,E,C,G,G,E,O,E,E,C,G,G,G,A,U,O,E,O,E,G,I,E,A,M,uB,E,I,O,E,I,C,mB,C,C,E,O,C,S,C,E,I,E,C,C,E,C,E,C,E,C,O,A,M,E,E,C,E,E,K,C,C,E,I,E,C,C,E,C,I,E,M,C,G,C,C,E,C,E,C,I,C,E,O,C,E,E,E,O,C,I,C,C,O,C,C,E,C,O,C,S,E,C,E,I,E,E,O,C,G,M,A,C,I,E,C,E,E,E,C,C,E,e,C,C,E,E,M,C,S,C,E,I,C,E,C,E,I,C,M,C,E,I,C,O,C,C,C,E,E,O,C,E,E,K,C,E,E,M,C,E,E,Q,C,S,C,C,C,E,C,C,E,C,C,S,C,C,C,E,E,O,C,C,E,C,E,A,E,O,c,C,E,O,C,I,W,O,C,C,E,A,C,G,C,C,E,C,E,I,I,E,E,E,E,M,C,I,E,C,C,E,C,E,C,M,C,S,C,C,C,C,C,E,I,E,E,kD,E,iB,C,GCWa,EAAA,MAAA,CAAA,EAAA,+BAAA,IAAA,GATb,IAAA,EAAA,EAAA,uBACA,EAAA,EAAA,uBACA,EAAA,EAAA,yBACA,EAAA,EAAA,0BACA,EAAA,EAAA,mBACA,EAAA,EAAA,mBACA,EAAA,EAAA,6BACA,EAAA,EAAA,sBAEO,IAAM,EAA+B,UAG1C,IAAM,EAAiB,AADL,IAAI,gBAAgB,OAAO,QAAQ,CAAC,MAAM,EAC3B,GAAG,CAAC,MACrC,GAAI,CAAC,EAAgB,CACnB,QAAQ,KAAK,CAAC,sCACd,MACF,CAEA,IAAM,EAAY,SAAS,EAAgB,GAG3C,OAAM,AAAA,CAAA,EAAA,EAAA,iBAAgB,AAAhB,EAAkB,GAGxB,AAAA,CAAA,EAAA,EAAA,uBAAsB,AAAtB,IAGA,MAAM,AAAA,CAAA,EAAA,EAAA,2BAA0B,AAA1B,EAA4B,GAGlC,MAAM,AAAA,CAAA,EAAA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","sources":["<anon>","src/modules/dashboard/studentProfile/index.ts","src/modules/dashboard/studentProfile/getStudentDetails.ts","node_modules/.pnpm/@xatom+image@1.0.0_@xatom+core@1.0.12/node_modules/@xatom/image/dist/index.js","src/modules/dashboard/studentProfile/editStudentDialog.ts","src/utils/formUtils.ts","src/utils/validationUtils.ts","src/modules/dashboard/studentProfile/editEmergencyDialog.ts","src/modules/dashboard/studentProfile/studentRegistrations.ts","src/modules/dashboard/studentProfile/deleteStudent.ts","src/modules/dashboard/studentProfile/caregiverView.ts","src/modules/dashboard/studentProfile/registrationBreadcrumbs.ts","src/modules/dashboard/studentProfile/listStudentFiles.ts"],"sourcesContent":["// modules are defined as an array\n// [ module function, map of requires ]\n//\n// map of requires is short require name -> numeric require\n//\n// anything defined in a previous bundle is accessed via the\n// orig method which is the require for previous bundles\n\n(function (modules, entry, mainEntry, parcelRequireName, globalName) {\n  /* eslint-disable no-undef */\n  var globalObject =\n    typeof globalThis !== 'undefined'\n      ? globalThis\n      : typeof self !== 'undefined'\n      ? self\n      : typeof window !== 'undefined'\n      ? window\n      : typeof global !== 'undefined'\n      ? global\n      : {};\n  /* eslint-enable no-undef */\n\n  // Save the require from previous bundle to this closure if any\n  var previousRequire =\n    typeof globalObject[parcelRequireName] === 'function' &&\n    globalObject[parcelRequireName];\n\n  var cache = previousRequire.cache || {};\n  // Do not use `require` to prevent Webpack from trying to bundle this call\n  var nodeRequire =\n    typeof module !== 'undefined' &&\n    typeof module.require === 'function' &&\n    module.require.bind(module);\n\n  function newRequire(name, jumped) {\n    if (!cache[name]) {\n      if (!modules[name]) {\n        // if we cannot find the module within our internal map or\n        // cache jump to the current global require ie. the last bundle\n        // that was added to the page.\n        var currentRequire =\n          typeof globalObject[parcelRequireName] === 'function' &&\n          globalObject[parcelRequireName];\n        if (!jumped && currentRequire) {\n          return currentRequire(name, true);\n        }\n\n        // If there are other bundles on this page the require from the\n        // previous one is saved to 'previousRequire'. Repeat this as\n        // many times as there are bundles until the module is found or\n        // we exhaust the require chain.\n        if (previousRequire) {\n          return previousRequire(name, true);\n        }\n\n        // Try the node require function if it exists.\n        if (nodeRequire && typeof name === 'string') {\n          return nodeRequire(name);\n        }\n\n        var err = new Error(\"Cannot find module '\" + name + \"'\");\n        err.code = 'MODULE_NOT_FOUND';\n        throw err;\n      }\n\n      localRequire.resolve = resolve;\n      localRequire.cache = {};\n\n      var module = (cache[name] = new newRequire.Module(name));\n\n      modules[name][0].call(\n        module.exports,\n        localRequire,\n        module,\n        module.exports,\n        this\n      );\n    }\n\n    return cache[name].exports;\n\n    function localRequire(x) {\n      var res = localRequire.resolve(x);\n      return res === false ? {} : newRequire(res);\n    }\n\n    function resolve(x) {\n      var id = modules[name][1][x];\n      return id != null ? id : x;\n    }\n  }\n\n  function Module(moduleName) {\n    this.id = moduleName;\n    this.bundle = newRequire;\n    this.exports = {};\n  }\n\n  newRequire.isParcelRequire = true;\n  newRequire.Module = Module;\n  newRequire.modules = modules;\n  newRequire.cache = cache;\n  newRequire.parent = previousRequire;\n  newRequire.register = function (id, exports) {\n    modules[id] = [\n      function (require, module) {\n        module.exports = exports;\n      },\n      {},\n    ];\n  };\n\n  Object.defineProperty(newRequire, 'root', {\n    get: function () {\n      return globalObject[parcelRequireName];\n    },\n  });\n\n  globalObject[parcelRequireName] = newRequire;\n\n  for (var i = 0; i < entry.length; i++) {\n    newRequire(entry[i]);\n  }\n\n  if (mainEntry) {\n    // Expose entry point to Node, AMD or browser globals\n    // Based on https://github.com/ForbesLindesay/umd/blob/master/template.js\n    var mainExports = newRequire(mainEntry);\n\n    // CommonJS\n    if (typeof exports === 'object' && typeof module !== 'undefined') {\n      module.exports = mainExports;\n\n      // RequireJS\n    } else if (typeof define === 'function' && define.amd) {\n      define(function () {\n        return mainExports;\n      });\n\n      // <script>\n    } else if (globalName) {\n      this[globalName] = mainExports;\n    }\n  }\n})({\"hmkpP\":[function(require,module,exports) {\n// src/modules/pages/studentProfile/index.ts\nvar parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"initializeStudentProfilePage\", ()=>initializeStudentProfilePage);\nvar _getStudentDetails = require(\"./getStudentDetails\");\nvar _editStudentDialog = require(\"./editStudentDialog\");\nvar _editEmergencyDialog = require(\"./editEmergencyDialog\");\nvar _studentRegistrations = require(\"./studentRegistrations\");\nvar _deleteStudent = require(\"./deleteStudent\");\nvar _caregiverView = require(\"./caregiverView\");\nvar _registrationBreadcrumbs = require(\"./registrationBreadcrumbs\");\nvar _listStudentFiles = require(\"./listStudentFiles\");\nconst initializeStudentProfilePage = async ()=>{\n    // Get the student ID from the URL\n    const urlParams = new URLSearchParams(window.location.search);\n    const studentIdParam = urlParams.get(\"id\");\n    if (!studentIdParam) {\n        console.error(\"No student ID provided in the URL.\");\n        return;\n    }\n    const studentId = parseInt(studentIdParam, 10);\n    // Fetch and display student details\n    await (0, _getStudentDetails.getStudentDetails)(studentId);\n    // Initialize the caregiver view adjustments\n    (0, _caregiverView.initializeCaregiverView)();\n    // Initialize the edit student dialog\n    await (0, _editStudentDialog.initializeEditStudentDialog)(studentId);\n    // Initialize the edit emergency contact dialog\n    await (0, _editEmergencyDialog.initializeEditEmergencyDialog)(studentId);\n    await (0, _listStudentFiles.initializeDynamicStudentFileList)(\"#filesList\"); // Initialize the student files list\n    // Initialize the student registrations list\n    (0, _studentRegistrations.initializeStudentRegistrations)(studentId);\n    // Initialize the delete student functionality\n    (0, _deleteStudent.initializeDeleteStudent)(studentId);\n    // Initialize registration breadcrumbs\n    (0, _registrationBreadcrumbs.initializeRegistrationBreadcrumbs)(); // Initialize the breadcrumbs\n    // Add an event listener to remove current_student from localStorage when navigating away\n    window.addEventListener(\"beforeunload\", ()=>{\n        localStorage.removeItem(\"current_student\");\n    });\n};\n\n},{\"./getStudentDetails\":\"dHqSp\",\"./editStudentDialog\":\"3iajS\",\"./editEmergencyDialog\":\"5x0QN\",\"./studentRegistrations\":\"ldRWJ\",\"./deleteStudent\":\"cDWYt\",\"./caregiverView\":\"9Px6R\",\"./registrationBreadcrumbs\":\"8g6ag\",\"./listStudentFiles\":\"9uLdx\",\"@parcel/transformer-js/src/esmodule-helpers.js\":\"jiucr\"}],\"dHqSp\":[function(require,module,exports) {\n// src/modules/pages/studentProfile/getStudentDetails.ts\nvar parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"getStudentDetails\", ()=>getStudentDetails);\nvar _apiConfig = require(\"../../../api/apiConfig\");\nvar _core = require(\"@xatom/core\");\nvar _image = require(\"@xatom/image\");\nconst getStudentDetails = async (studentId)=>{\n    // Show loading spinner\n    const loadingSpinner = new (0, _core.WFComponent)(\".dashboard_loading_wall\");\n    console.log(\"Displaying loading spinner\");\n    loadingSpinner.setStyle({\n        display: \"flex\"\n    });\n    try {\n        const response = await (0, _apiConfig.apiClient).get(`/dashboard/profiles/student/${studentId}`).fetch();\n        if (response) {\n            const student = response; // Define an interface for better type safety\n            // Hide the loading spinner\n            triggerSuccessEvent(\".success_trigger\");\n            // Update the breadcrumb with the student's name\n            const studentBreadcrumb = new (0, _core.WFComponent)(\"#studentBreadcrumb\");\n            studentBreadcrumb.setText(`${student.first_name} ${student.last_name}`);\n            // Set student name\n            const studentFullName = new (0, _core.WFComponent)(\"#studentFullName\");\n            studentFullName.setText(`${student.first_name} ${student.last_name}`);\n            // Set profile picture\n            const studentProfilePicture = new (0, _image.WFImage)(\"#studentProfilePicture\");\n            if (student.profile_pic && student.profile_pic.url) studentProfilePicture.setImage(student.profile_pic.url);\n            else {\n                console.log(\"No profile picture available\");\n                studentProfilePicture.setImage(\"https://cdn.prod.website-files.com/667f080f36260b9afbdc46b2/667f080f36260b9afbdc46be_placeholder.svg\");\n            }\n            // Set email\n            const studentEmail = new (0, _core.WFComponent)(\"#studentEmail\");\n            studentEmail.setText(student.email || \"N/A\");\n            // Set phone\n            const studentPhone = new (0, _core.WFComponent)(\"#studentPhone\");\n            studentPhone.setText(student.phone || \"N/A\");\n            // Set date of birth\n            const studentDob = new (0, _core.WFComponent)(\"#studentDob\");\n            studentDob.setText(student.dob || \"N/A\");\n            // Set gender\n            const studentGender = new (0, _core.WFComponent)(\"#studentGender\");\n            studentGender.setText(student.gender || \"N/A\");\n            // Set school\n            const studentSchool = new (0, _core.WFComponent)(\"#studentSchool\");\n            studentSchool.setText(student.school || \"N/A\");\n            // Set grade\n            const studentGrade = new (0, _core.WFComponent)(\"#studentGrade\");\n            studentGrade.setText(student.grade || \"N/A\");\n            // Set ethnicity (if available)\n            const studentEthnicity = new (0, _core.WFComponent)(\"#studentEthnicity\");\n            studentEthnicity.setText(student.ethnicity || \"N/A\");\n            // Set health information\n            const studentHealth = new (0, _core.WFComponent)(\"#studentHealth\");\n            studentHealth.setText(student.health || \"N/A\");\n            // Set dismissal names\n            const studentDismissal = new (0, _core.WFComponent)(\"#studentDismissal\");\n            studentDismissal.setText(student.dismissal_names || \"N/A\");\n            // Set send texts preference\n            const studentTextTrue = new (0, _core.WFComponent)(\"#studentTextTrue\");\n            const studentTextFalse = new (0, _core.WFComponent)(\"#studentTextFalse\");\n            if (student.send_texts) {\n                studentTextTrue.setStyle({\n                    display: \"block\"\n                });\n                studentTextFalse.setStyle({\n                    display: \"none\"\n                });\n            } else {\n                studentTextTrue.setStyle({\n                    display: \"none\"\n                });\n                studentTextFalse.setStyle({\n                    display: \"block\"\n                });\n            }\n            // Set independent travel\n            const studentTravelTrue = new (0, _core.WFComponent)(\"#studentTravelTrue\");\n            const studentTravelFalse = new (0, _core.WFComponent)(\"#studentTravelFalse\");\n            if (student.independent_travel) {\n                studentTravelTrue.setStyle({\n                    display: \"block\"\n                });\n                studentTravelFalse.setStyle({\n                    display: \"none\"\n                });\n            } else {\n                studentTravelTrue.setStyle({\n                    display: \"none\"\n                });\n                studentTravelFalse.setStyle({\n                    display: \"block\"\n                });\n            }\n            // Set photo release\n            const studentPhotoTrue = new (0, _core.WFComponent)(\"#studentPhotoTrue\");\n            const studentPhotoFalse = new (0, _core.WFComponent)(\"#studentPhotoFalse\");\n            if (student.photo_release) {\n                studentPhotoTrue.setStyle({\n                    display: \"block\"\n                });\n                studentPhotoFalse.setStyle({\n                    display: \"none\"\n                });\n            } else {\n                studentPhotoTrue.setStyle({\n                    display: \"none\"\n                });\n                studentPhotoFalse.setStyle({\n                    display: \"block\"\n                });\n            }\n            // Set status pills\n            const studentApprovedPill = new (0, _core.WFComponent)(\"#studentApprovedPill\");\n            const studentPendingPill = new (0, _core.WFComponent)(\"#studentPendingPill\");\n            if (student.Status === \"Approved\") {\n                studentApprovedPill.setStyle({\n                    display: \"block\"\n                });\n                studentPendingPill.setStyle({\n                    display: \"none\"\n                });\n            } else {\n                studentApprovedPill.setStyle({\n                    display: \"none\"\n                });\n                studentPendingPill.setStyle({\n                    display: \"block\"\n                });\n            }\n            // Save student data for later use (e.g., in edit forms)\n            localStorage.setItem(\"current_student\", JSON.stringify(student));\n        } else {\n            // If response is null, display an alert and navigate back\n            alert(\"Error: Received null response from the server.\");\n            console.error(\"Received null response from the server.\");\n            // Navigate back to the previous page\n            window.history.back();\n        }\n    } catch (error) {\n        console.error(\"Error fetching student details:\", error);\n        // Display the error message in an alert box\n        alert(`Error fetching student details: ${error.message || error}`);\n        // Navigate back to the previous page\n        window.history.back();\n    } finally{\n        // Hide loading spinner in all cases\n        loadingSpinner.setStyle({\n            display: \"none\"\n        });\n    }\n};\nconst triggerSuccessEvent = (selector)=>{\n    const successTrigger = document.querySelector(selector);\n    if (successTrigger instanceof HTMLElement) successTrigger.click();\n};\n\n},{\"../../../api/apiConfig\":\"dUmIV\",\"@xatom/core\":\"65YBq\",\"@xatom/image\":\"bavwf\",\"@parcel/transformer-js/src/esmodule-helpers.js\":\"jiucr\"}],\"bavwf\":[function(require,module,exports) {\nvar t = require(\"d023971cccd819e3\");\nvar e, r, s, i, o, n, u = {};\ne = u, r = \"WFImage\", s = ()=>c, Object.defineProperty(e, r, {\n    get: s,\n    set: i,\n    enumerable: !0,\n    configurable: !0\n});\nclass c extends t.WFComponent {\n    constructor(t){\n        super(t);\n    }\n    getImageConfig() {\n        return this._config;\n    }\n    getSrc() {\n        return this.getAttribute(\"src\");\n    }\n    getSizes() {\n        return this.getAttribute(\"sizes\");\n    }\n    getSrcSet() {\n        return this.getAttribute(\"srcset\");\n    }\n    getLoading() {\n        return this.getAttribute(\"loading\");\n    }\n    onLoad(t) {\n        return this.on(\"load\", t), ()=>{\n            this.off(\"load\", t);\n        };\n    }\n    onLoadError(t) {\n        return this.on(\"error\", t), ()=>{\n            this.off(\"error\", t);\n        };\n    }\n    setImage(t) {\n        if (\"string\" == typeof t) this.setAttribute(\"src\", t), this.removeAttribute(\"srcset\"), this.removeAttribute(\"sizes\");\n        else {\n            if (this.setAttribute(\"src\", t.src), \"object\" == typeof t && t.srcSet && t.srcSet.length && t.sizes && t.sizes.length) {\n                const e = t.srcSet.map((t)=>`${t.url} ${t.size}`).join(\", \");\n                this.setAttribute(\"srcset\", e);\n            } else this.removeAttribute(\"srcset\"), this.removeAttribute(\"sizes\");\n            t.loading && this.setAttribute(\"loading\", t.loading);\n        }\n    }\n}\no = module.exports, n = u, Object.keys(n).forEach(function(t) {\n    \"default\" === t || \"__esModule\" === t || o.hasOwnProperty(t) || Object.defineProperty(o, t, {\n        enumerable: !0,\n        get: function() {\n            return n[t];\n        }\n    });\n});\n\n},{\"d023971cccd819e3\":\"65YBq\"}],\"3iajS\":[function(require,module,exports) {\n// src/modules/pages/studentProfile/editStudentDialog.ts\nvar parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"initializeEditStudentDialog\", ()=>initializeEditStudentDialog);\nvar _core = require(\"@xatom/core\");\nvar _image = require(\"@xatom/image\");\nvar _apiConfig = require(\"../../../api/apiConfig\");\nvar _formUtils = require(\"../../../utils/formUtils\");\nvar _validationUtils = require(\"../../../utils/validationUtils\");\nvar _getStudentDetails = require(\"./getStudentDetails\");\nconst initializeEditStudentDialog = (studentId)=>{\n    // Attempt to retrieve and initialize the \"Open Edit Dialog\" button\n    let openEditDialogButton = null;\n    try {\n        openEditDialogButton = new (0, _core.WFComponent)(\"#openEditStudentDialog\");\n    } catch (error) {\n        console.warn(\"Element #openEditStudentDialog not found. Skipping initialization of edit dialog opener.\");\n    }\n    // Attempt to retrieve the edit student dialog element\n    const editStudentDialogElement = document.getElementById(\"editStudentDialog\");\n    // Attempt to retrieve and initialize the \"Close Dialog\" button\n    let closeDialogButton = null;\n    try {\n        closeDialogButton = new (0, _core.WFComponent)(\"#close-dialog-btn\");\n    } catch (error) {\n        console.warn(\"Element #close-dialog-btn not found. Skipping initialization of dialog closer.\");\n    }\n    // If the \"Open Edit Dialog\" button exists, set up the click event listener\n    if (openEditDialogButton && editStudentDialogElement) openEditDialogButton.on(\"click\", ()=>{\n        populateEditStudentForm();\n        editStudentDialogElement.showModal();\n    });\n    // If the \"Close Dialog\" button exists and the dialog element is present, set up the click event listener\n    if (closeDialogButton && editStudentDialogElement) closeDialogButton.on(\"click\", ()=>{\n        editStudentDialogElement.close();\n    });\n    // Initialize the form if it exists\n    let form = null;\n    try {\n        form = new (0, _core.WFFormComponent)(\"#editStudentForm\");\n    } catch (error) {\n        console.warn(\"Element #editStudentForm not found. Skipping form initialization.\");\n    }\n    // Initialize error component for form submission errors if it exists\n    let formSubmitError = null;\n    try {\n        formSubmitError = new (0, _core.WFComponent)(\"#editStudentSubmitError\");\n    } catch (error) {\n        console.warn(\"Element #editStudentSubmitError not found. Skipping initialization of form submission error display.\");\n    }\n    // Define validation rules for each field if the form exists\n    const fields = form ? [\n        {\n            input: new (0, _core.WFComponent)(\"#firstNameInput\"),\n            error: new (0, _core.WFComponent)(\"#firstNameInputError\"),\n            validationFn: (0, _validationUtils.validateNotEmpty),\n            message: \"First name is required\"\n        },\n        {\n            input: new (0, _core.WFComponent)(\"#lastNameInput\"),\n            error: new (0, _core.WFComponent)(\"#lastNameInputError\"),\n            validationFn: (0, _validationUtils.validateNotEmpty),\n            message: \"Last name is required\"\n        },\n        {\n            input: new (0, _core.WFComponent)(\"#emailInput\"),\n            error: new (0, _core.WFComponent)(\"#emailInputError\"),\n            validationFn: (0, _validationUtils.validateEmailOptional),\n            message: \"Invalid email format\"\n        },\n        {\n            input: new (0, _core.WFComponent)(\"#phoneNumberInput\"),\n            error: new (0, _core.WFComponent)(\"#phoneNumberInputError\"),\n            validationFn: (0, _validationUtils.validatePhoneNumber),\n            message: \"Phone number must be in the format (xxx) xxx-xxxx\"\n        },\n        {\n            input: new (0, _core.WFComponent)(\"#dobInput\"),\n            error: new (0, _core.WFComponent)(\"#dobInputError\"),\n            validationFn: (0, _validationUtils.validateNotEmpty),\n            message: \"Date of birth is required\"\n        },\n        {\n            input: new (0, _core.WFComponent)(\"#genderInput\"),\n            error: new (0, _core.WFComponent)(\"#genderInputError\"),\n            validationFn: (0, _validationUtils.validateSelectField),\n            message: \"Please select a gender\"\n        },\n        {\n            input: new (0, _core.WFComponent)(\"#schoolInput\"),\n            error: new (0, _core.WFComponent)(\"#schoolInputError\"),\n            validationFn: (0, _validationUtils.validateNotEmpty),\n            message: \"School is required\"\n        },\n        {\n            input: new (0, _core.WFComponent)(\"#gradeInput\"),\n            error: new (0, _core.WFComponent)(\"#gradeInputError\"),\n            validationFn: (0, _validationUtils.validateSelectField),\n            message: \"Please select a grade\"\n        },\n        {\n            input: new (0, _core.WFComponent)(\"#healthInput\"),\n            error: new (0, _core.WFComponent)(\"#healthInputError\"),\n            validationFn: (0, _validationUtils.validateNotEmpty),\n            message: \"Health information is required\"\n        },\n        {\n            input: new (0, _core.WFComponent)(\"#dismissalNamesInput\"),\n            error: new (0, _core.WFComponent)(\"#dismissalNamesInputError\"),\n            validationFn: (0, _validationUtils.validateNotEmpty),\n            message: \"Dismissal names are required\"\n        },\n        {\n            input: new (0, _core.WFComponent)(\"#familyInvolvedInput\"),\n            error: new (0, _core.WFComponent)(\"#familyInvolvedInputError\"),\n            validationFn: (0, _validationUtils.validateNotEmpty),\n            message: \"Family involvement information is required\"\n        }\n    ] : [];\n    // Setup validation for each field if the form exists\n    if (form && formSubmitError) fields.forEach(({ input, error, validationFn, message })=>{\n        try {\n            (0, _formUtils.setupValidation)(input, error, (0, _formUtils.createValidationFunction)(input, validationFn, message), formSubmitError);\n        } catch (error) {\n            console.warn(`Validation setup failed for one of the fields: ${message}. Error:`, error);\n        }\n    });\n    // Setup checkbox components if they exist\n    let sendTextsInput = null;\n    let independentTravelInput = null;\n    let photoReleaseInput = null;\n    try {\n        sendTextsInput = new (0, _core.WFComponent)(\"#sendTextsInput\");\n    } catch (error) {\n        console.warn(\"Element #sendTextsInput not found. Skipping initialization of sendTextsInput.\");\n    }\n    try {\n        independentTravelInput = new (0, _core.WFComponent)(\"#independentTravelInput\");\n    } catch (error) {\n        console.warn(\"Element #independentTravelInput not found. Skipping initialization of independentTravelInput.\");\n    }\n    try {\n        photoReleaseInput = new (0, _core.WFComponent)(\"#photoReleaseInput\");\n    } catch (error) {\n        console.warn(\"Element #photoReleaseInput not found. Skipping initialization of photoReleaseInput.\");\n    }\n    // Handle form submission if the form exists\n    if (form && formSubmitError) form.onFormSubmit(async (formData, event)=>{\n        event.preventDefault();\n        // Show loading animation inside submit button if it exists\n        let requestingAnimation = null;\n        try {\n            requestingAnimation = new (0, _core.WFComponent)(\"#requestingAnimation\");\n            requestingAnimation.setStyle({\n                display: \"block\"\n            });\n        } catch (error) {\n            console.warn(\"Element #requestingAnimation not found. Skipping loading animation.\");\n        }\n        let isFormValid = true;\n        // Validate all fields\n        fields.forEach(({ input, error, validationFn, message })=>{\n            try {\n                const errorMessage = (0, _formUtils.createValidationFunction)(input, validationFn, message)();\n                if (errorMessage) {\n                    (0, _formUtils.toggleError)(error, errorMessage, true);\n                    isFormValid = false;\n                } else (0, _formUtils.toggleError)(error, \"\", false);\n            } catch (error) {\n                console.warn(`Validation failed for field \"${message}\". Error:`, error);\n                isFormValid = false;\n            }\n        });\n        // No validation required for checkboxes since they are optional\n        if (!isFormValid) {\n            (0, _formUtils.toggleError)(formSubmitError, \"Please correct all errors above.\", true);\n            // Hide loading animation if it exists\n            if (requestingAnimation) requestingAnimation.setStyle({\n                display: \"none\"\n            });\n            return;\n        } else (0, _formUtils.toggleError)(formSubmitError, \"\", false);\n        // Disable submit button if it exists\n        let submitButton = null;\n        try {\n            submitButton = new (0, _core.WFComponent)(\"#editStudentSubmitButton\");\n            submitButton.setAttribute(\"disabled\", \"true\");\n        } catch (error) {\n            console.warn(\"Element #editStudentSubmitButton not found. Skipping disabling the submit button.\");\n        }\n        // Prepare data for API\n        const dataToUpdate = {\n            ...formData\n        };\n        try {\n            // Send update request to API\n            const response = await (0, _apiConfig.apiClient).post(`/profiles/students/update_profile/${studentId}`, {\n                data: dataToUpdate\n            }).fetch();\n            if (response.status === \"success\") {\n                // Update successful\n                // Refresh the student details on the page\n                await (0, _getStudentDetails.getStudentDetails)(studentId);\n                // Reset the form with updated information\n                populateEditStudentForm();\n                // Close the dialog after successful request and data refresh if the dialog exists\n                if (editStudentDialogElement) editStudentDialogElement.close();\n            } else throw new Error(response.message || \"Update failed\");\n        } catch (error) {\n            console.error(\"Error updating student profile:\", error);\n            (0, _formUtils.toggleError)(formSubmitError, error.message || \"An error occurred\", true);\n        } finally{\n            // Hide loading animation if it exists\n            if (requestingAnimation) requestingAnimation.setStyle({\n                display: \"none\"\n            });\n            // Re-enable submit button if it exists\n            if (submitButton) submitButton.removeAttribute(\"disabled\");\n        }\n    });\n    // Set up the file upload for the profile picture if the input exists\n    try {\n        const profilePictureInput = new (0, _core.WFComponent)(\"#profilePictureInput\");\n        const profilePictureInputError = new (0, _core.WFComponent)(\"#profilePictureInputError\");\n        const profilePictureInputSuccess = new (0, _core.WFComponent)(\"#profilePictureInputSuccess\");\n        (0, _formUtils.setupFileUpload)(profilePictureInput, profilePictureInputError, profilePictureInputSuccess, \"/profiles/students/image-upload\");\n    } catch (error) {\n        console.warn(\"One or more profile picture upload elements not found. Skipping file upload setup.\");\n    }\n};\n// Function to populate the form with existing student data\nconst populateEditStudentForm = ()=>{\n    const studentData = localStorage.getItem(\"current_student\");\n    if (!studentData) {\n        console.error(\"No student data found\");\n        return;\n    }\n    let student;\n    try {\n        student = JSON.parse(studentData);\n    } catch (parseError) {\n        console.error(\"Error parsing student data from localStorage:\", parseError);\n        return;\n    }\n    // Log the student data for debugging\n    console.log(\"Populating form with student data:\", student);\n    // Helper function to set input value if the element exists\n    const setInputValue = (selector, value, isCheckbox = false)=>{\n        try {\n            const element = document.querySelector(selector);\n            if (element) {\n                if (isCheckbox && element instanceof HTMLInputElement) {\n                    element.checked = Boolean(value);\n                    console.log(`Set checkbox ${selector} to`, value);\n                } else if (element instanceof HTMLInputElement || element instanceof HTMLSelectElement || element instanceof HTMLTextAreaElement) {\n                    element.value = String(value);\n                    console.log(`Set value of ${selector} to`, value);\n                } else console.warn(`Element ${selector} is not an input, select, or textarea. Skipping setting its value.`);\n            } else console.warn(`Element ${selector} not found. Skipping setting its value.`);\n        } catch (error) {\n            console.warn(`Error setting value for ${selector}:`, error);\n        }\n    };\n    // Set form fields using the helper function\n    setInputValue(\"#firstNameInput\", student.first_name);\n    setInputValue(\"#lastNameInput\", student.last_name);\n    setInputValue(\"#emailInput\", student.email);\n    setInputValue(\"#phoneNumberInput\", student.phone);\n    setInputValue(\"#sendTextsInput\", student.send_texts, true);\n    setInputValue(\"#dobInput\", student.dob);\n    setInputValue(\"#genderInput\", student.gender);\n    setInputValue(\"#schoolInput\", student.school);\n    setInputValue(\"#gradeInput\", student.grade);\n    setInputValue(\"#healthInput\", student.health); // Ensure this selector matches an input/select/textarea\n    setInputValue(\"#dismissalNamesInput\", student.dismissal_names);\n    setInputValue(\"#independentTravelInput\", student.independent_travel, true);\n    setInputValue(\"#familyInvolvedInput\", student.family_involved);\n    setInputValue(\"#photoReleaseInput\", student.photo_release, true);\n    // Set profile picture preview using WFImage if the element exists\n    try {\n        const profilePictureImage = new (0, _image.WFImage)(\"#profilePictureImage\");\n        if (student.profile_pic && student.profile_pic.url) {\n            profilePictureImage.setImage(student.profile_pic.url);\n            console.log(\"Set profile picture to:\", student.profile_pic.url);\n        } else {\n            profilePictureImage.setImage(\"https://cdn.prod.website-files.com/667f080f36260b9afbdc46b2/667f080f36260b9afbdc46be_placeholder.svg\");\n            console.log(\"Set profile picture to default-image-url\");\n        }\n    } catch (error) {\n        console.warn(\"Element #profilePictureImage not found. Skipping setting profile picture.\");\n    }\n};\n\n},{\"@xatom/core\":\"65YBq\",\"@xatom/image\":\"bavwf\",\"../../../api/apiConfig\":\"dUmIV\",\"../../../utils/formUtils\":\"gepHz\",\"../../../utils/validationUtils\":\"gu2z7\",\"./getStudentDetails\":\"dHqSp\",\"@parcel/transformer-js/src/esmodule-helpers.js\":\"jiucr\"}],\"gepHz\":[function(require,module,exports) {\nvar parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"toggleError\", ()=>toggleError);\nparcelHelpers.export(exports, \"setupValidation\", ()=>setupValidation);\nparcelHelpers.export(exports, \"createValidationFunction\", ()=>createValidationFunction);\nparcelHelpers.export(exports, \"createCheckboxValidationFunction\", ()=>createCheckboxValidationFunction);\nparcelHelpers.export(exports, \"setupCheckboxValidation\", ()=>setupCheckboxValidation);\nparcelHelpers.export(exports, \"validateSelectedSessions\", ()=>validateSelectedSessions);\n/**\n * Updates the user's profile picture URL in the authentication system.\n * @param {string} imageUrl - The URL of the uploaded image.\n */ parcelHelpers.export(exports, \"setProfilePicUrl\", ()=>setProfilePicUrl);\n/**\n * Handles file upload and displays the uploaded image.\n * @param {WFComponent} fileInput - The WFComponent instance for the file input field.\n * @param {WFComponent} fileInputError - The WFComponent instance for displaying error messages.\n * @param {WFComponent} fileInputSuccess - The WFComponent instance for displaying success messages.\n * @param {string} uploadEndpoint - The endpoint to which the file is sent.\n * @returns {Promise<string>} A promise that resolves with the URL of the uploaded image.\n */ /**\n * Handles file upload and displays the uploaded image.\n * Only JPEG files less than 2 MB can be uploaded.\n * @param {WFComponent} fileInput - The WFComponent instance for the file input field.\n * @param {WFComponent} fileInputError - The WFComponent instance for displaying error messages.\n * @param {WFComponent} fileInputSuccess - The WFComponent instance for displaying success messages.\n * @param {string} uploadEndpoint - The endpoint to which the file is sent.\n * @returns {Promise<string>} A promise that resolves with the URL of the uploaded image.\n */ parcelHelpers.export(exports, \"setupFileUpload\", ()=>setupFileUpload);\nparcelHelpers.export(exports, \"formatPhoneNumber\", ()=>formatPhoneNumber);\nvar _core = require(\"@xatom/core\");\nvar _image = require(\"@xatom/image\");\nvar _apiConfig = require(\"../api/apiConfig\");\nvar _authConfig = require(\"../auth/authConfig\");\nfunction toggleError(errorMessageComponent, message, show) {\n    errorMessageComponent.updateTextViaAttrVar({\n        text: show ? message : \"\"\n    });\n    errorMessageComponent.setStyle({\n        display: show ? \"flex\" : \"none\"\n    });\n}\nfunction setupValidation(inputComponent, errorComponent, validate, requestErrorComponent // Optional component to clear on input change\n) {\n    const validateAndUpdate = ()=>{\n        const errorMessage = validate();\n        toggleError(errorComponent, errorMessage, !!errorMessage);\n        if (requestErrorComponent && errorMessage === \"\") // Clear request error message when the user is correcting the input\n        toggleError(requestErrorComponent, \"\", false);\n    };\n    // Attach event listeners for real-time validation\n    inputComponent.on(\"input\", validateAndUpdate);\n    inputComponent.on(\"blur\", validateAndUpdate);\n    inputComponent.on(\"change\", validateAndUpdate);\n}\nfunction createValidationFunction(inputComponent, validationFn, errorMessage) {\n    return ()=>{\n        const inputElement = inputComponent.getElement();\n        const isValid = validationFn(inputElement.value);\n        return isValid ? \"\" : errorMessage;\n    };\n}\nfunction createCheckboxValidationFunction(checkboxComponent, errorMessage) {\n    return ()=>{\n        const checkbox = checkboxComponent.getElement();\n        return checkbox.checked ? \"\" : errorMessage;\n    };\n}\nfunction setupCheckboxValidation(checkboxComponent, checkboxErrorComponent, errorMessage) {\n    const validate = createCheckboxValidationFunction(checkboxComponent, errorMessage);\n    setupValidation(checkboxComponent, checkboxErrorComponent, validate);\n}\nfunction validateSelectedSessions(selectedSessions, errorMessageComponent, errorMessage) {\n    const isValid = selectedSessions.length > 0 && selectedSessions.some((session)=>session.studentIds.length > 0);\n    if (!isValid) toggleError(errorMessageComponent, errorMessage, true);\n    else toggleError(errorMessageComponent, \"\", false);\n    return isValid;\n}\nfunction setProfilePicUrl(imageUrl) {\n    const user = (0, _authConfig.userAuth).getUser();\n    if (user && user.profile) {\n        // Ensure the profile_picture object exists\n        user.profile.profile_pic = user.profile.profile_pic || {\n            url: \"\"\n        };\n        // Set the profile picture URL\n        user.profile.profile_pic.url = imageUrl;\n        (0, _authConfig.userAuth).setUser(user);\n        localStorage.setItem(\"auth_user\", JSON.stringify(user));\n    }\n}\nfunction setupFileUpload(fileInput, fileInputError, fileInputSuccess, uploadEndpoint) {\n    const profilePictureImage = new (0, _image.WFImage)(\"#profilePictureImage\");\n    const uploadAnimation = new (0, _core.WFComponent)(\"#uploadAnimation\");\n    const overlay = new (0, _core.WFComponent)(\".drop-zone\");\n    let dragCounter = 0;\n    return new Promise((resolve)=>{\n        const handleFile = (file)=>{\n            // Validate file type and size\n            const validTypes = [\n                \"image/jpeg\",\n                \"image/jpg\"\n            ];\n            const maxSizeInBytes = 2097152; // 2 MB\n            if (!validTypes.includes(file.type) && !/\\.(jpg|jpeg)$/i.test(file.name)) {\n                const errorMessage = \"Only JPEG images are allowed.\";\n                toggleError(fileInputError, errorMessage, true);\n                // Reset file input value\n                fileInput.getElement().value = \"\";\n                return;\n            }\n            if (file.size > maxSizeInBytes) {\n                const errorMessage = \"File size must be less than 2 MB.\";\n                toggleError(fileInputError, errorMessage, true);\n                // Reset file input value\n                fileInput.getElement().value = \"\";\n                return;\n            }\n            // Show upload animation immediately\n            uploadAnimation.setStyle({\n                display: \"flex\"\n            });\n            // Hide error and success messages\n            fileInputError.setStyle({\n                display: \"none\"\n            });\n            fileInputSuccess.setStyle({\n                display: \"none\"\n            });\n            const reader = new FileReader();\n            // Display preview image as soon as the file is loaded into memory\n            reader.onload = (event)=>{\n                // Set the preview image for the profile picture\n                const result = event.target?.result;\n                profilePictureImage.setImage(result);\n                // Hide overlay once the image is set\n                overlay.setStyle({\n                    display: \"none\"\n                });\n            };\n            reader.readAsDataURL(file);\n            const formData = new FormData();\n            formData.append(\"profile_picture\", file);\n            const existingStudent = localStorage.getItem(\"current_student\");\n            if (existingStudent) {\n                const student = JSON.parse(existingStudent);\n                formData.append(\"student_profile_id\", student.id.toString());\n            }\n            // Send the file to the server\n            const postRequest = (0, _apiConfig.apiClient).post(uploadEndpoint, {\n                data: formData\n            });\n            postRequest.onData((response)=>{\n                if (response.status === \"success\") {\n                    const imageUrl = response.url.profile_pic.url;\n                    // Update the profile picture URL in the user session and local storage\n                    setProfilePicUrl(imageUrl);\n                    // Update the image for other parts of the UI as well\n                    profilePictureImage.setImage(imageUrl);\n                    // Store the URL in local storage\n                    localStorage.setItem(\"image_upload\", imageUrl);\n                    // Show success message and hide upload animation\n                    fileInputSuccess.setStyle({\n                        display: \"flex\"\n                    });\n                    uploadAnimation.setStyle({\n                        display: \"none\"\n                    });\n                    // Resolve with the uploaded image URL\n                    resolve(imageUrl);\n                } else {\n                    const errorMessage = \"Failed to upload profile picture.\";\n                    toggleError(fileInputError, errorMessage, true);\n                    uploadAnimation.setStyle({\n                        display: \"none\"\n                    });\n                    overlay.setStyle({\n                        display: \"none\"\n                    });\n                    dragCounter = 0;\n                    // Reset file input value\n                    fileInput.getElement().value = \"\";\n                }\n            });\n            postRequest.onError((error)=>{\n                let errorMessage = \"An error occurred during image upload.\";\n                if (error.response && error.response.data) errorMessage = error.response.data.message || errorMessage;\n                else if (error.message) errorMessage = error.message;\n                // Show error message and hide upload animation\n                toggleError(fileInputError, errorMessage, true);\n                uploadAnimation.setStyle({\n                    display: \"none\"\n                });\n                overlay.setStyle({\n                    display: \"none\"\n                });\n                dragCounter = 0;\n                // Reset file input value\n                fileInput.getElement().value = \"\";\n            });\n            // Make the API call\n            postRequest.fetch();\n        };\n        // Event listener for file input changes\n        fileInput.on(\"change\", ()=>{\n            const file = fileInput.getElement().files?.[0];\n            if (file) handleFile(file);\n        });\n        // Event listeners for drag-and-drop\n        const dragZoneElement = document.body;\n        dragZoneElement.addEventListener(\"dragenter\", (event)=>{\n            event.preventDefault();\n            dragCounter++;\n            if (dragCounter === 1) overlay.setStyle({\n                display: \"flex\"\n            });\n        });\n        dragZoneElement.addEventListener(\"dragleave\", ()=>{\n            dragCounter--;\n            if (dragCounter <= 0) {\n                overlay.setStyle({\n                    display: \"none\"\n                });\n                dragCounter = 0;\n            }\n        });\n        dragZoneElement.addEventListener(\"dragover\", (event)=>{\n            event.preventDefault();\n        });\n        dragZoneElement.addEventListener(\"drop\", (event)=>{\n            event.preventDefault();\n            const files = event.dataTransfer?.files;\n            if (files?.length) handleFile(files[0]);\n            overlay.setStyle({\n                display: \"none\"\n            });\n            dragCounter = 0;\n        });\n    });\n}\nconst formatPhoneNumber = (value)=>{\n    const cleaned = value.replace(/\\D/g, \"\"); // Remove all non-digit characters\n    if (cleaned.length <= 3) return cleaned;\n    else if (cleaned.length <= 6) return `(${cleaned.slice(0, 3)}) ${cleaned.slice(3)}`;\n    else if (cleaned.length <= 10) return `(${cleaned.slice(0, 3)}) ${cleaned.slice(3, 6)}-${cleaned.slice(6)}`;\n    else // If more than 10 digits, truncate the extra digits\n    return `(${cleaned.slice(0, 3)}) ${cleaned.slice(3, 6)}-${cleaned.slice(6, 10)}`;\n};\n\n},{\"@xatom/core\":\"65YBq\",\"@xatom/image\":\"bavwf\",\"../api/apiConfig\":\"dUmIV\",\"../auth/authConfig\":\"dHwPR\",\"@parcel/transformer-js/src/esmodule-helpers.js\":\"jiucr\"}],\"gu2z7\":[function(require,module,exports) {\nvar parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"validateNotEmpty\", ()=>validateNotEmpty);\nparcelHelpers.export(exports, \"validateEmail\", ()=>validateEmail);\nparcelHelpers.export(exports, \"validateEmailOptional\", ()=>validateEmailOptional);\nparcelHelpers.export(exports, \"validatePasswordRequirements\", ()=>validatePasswordRequirements);\nparcelHelpers.export(exports, \"validateCheckbox\", ()=>validateCheckbox);\nparcelHelpers.export(exports, \"validatePasswordsMatch\", ()=>validatePasswordsMatch);\nparcelHelpers.export(exports, \"validateSelectField\", ()=>validateSelectField);\nparcelHelpers.export(exports, \"validatePhoneNumber\", ()=>validatePhoneNumber);\nparcelHelpers.export(exports, \"validatePhoneNumberOptional\", ()=>validatePhoneNumberOptional);\nfunction validateNotEmpty(input) {\n    return input !== undefined && input.trim() !== \"\";\n}\nfunction validateEmail(input) {\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    return emailRegex.test(input);\n}\nconst validateEmailOptional = (value)=>{\n    if (value.trim() === \"\") // Email is optional, so empty string is valid\n    return true;\n    // Validate the email format if not empty\n    return validateEmail(value);\n};\nfunction validatePasswordRequirements(password) {\n    const hasLowercase = /[a-z]/.test(password);\n    const hasUppercase = /[A-Z]/.test(password);\n    const hasDigit = /\\d/.test(password);\n    const hasSpecialChar = /[!@#$%^&*(),.?\":{}|<>]/.test(password);\n    const hasValidLength = password.length >= 8;\n    return hasLowercase && hasUppercase && hasDigit && hasSpecialChar && hasValidLength;\n}\nfunction validateCheckbox(checked) {\n    return checked;\n}\nfunction validatePasswordsMatch(originalPassword, confirmPassword) {\n    return originalPassword === confirmPassword;\n}\nfunction validateSelectField(input) {\n    return input !== undefined && input !== \"N/A\";\n}\nfunction validatePhoneNumber(input) {\n    const phoneRegex = /^\\(\\d{3}\\)\\s\\d{3}-\\d{4}$/;\n    return phoneRegex.test(input);\n}\nconst validatePhoneNumberOptional = (value)=>{\n    if (value.trim() === \"\") // Phone number is optional, so empty string is valid\n    return true;\n    // Validate the phone number format if not empty\n    return validatePhoneNumber(value);\n};\n\n},{\"@parcel/transformer-js/src/esmodule-helpers.js\":\"jiucr\"}],\"5x0QN\":[function(require,module,exports) {\n// src/modules/pages/studentProfile/editEmergencyDialog.ts\nvar parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"initializeEditEmergencyDialog\", ()=>initializeEditEmergencyDialog);\nvar _core = require(\"@xatom/core\");\nvar _apiConfig = require(\"../../../api/apiConfig\");\nvar _formUtils = require(\"../../../utils/formUtils\");\nvar _validationUtils = require(\"../../../utils/validationUtils\");\nvar _getStudentDetails = require(\"./getStudentDetails\");\nconst initializeEditEmergencyDialog = (studentId)=>{\n    const openDialogButton = new (0, _core.WFComponent)(\"#openEmergencyContactDialog\");\n    const emergencyDialog = document.getElementById(\"editEmergencyContactDialog\");\n    const closeDialogButton = new (0, _core.WFComponent)(\"#close-emergency-dialog-btn\");\n    // Open the dialog when the button is clicked\n    openDialogButton.on(\"click\", async ()=>{\n        // Fetch the latest student details before populating the form\n        await (0, _getStudentDetails.getStudentDetails)(studentId);\n        // Populate the form with the latest emergency contact details\n        populateEmergencyContactForm();\n        // Update the emergency contact full name on the page\n        updateEmergencyContactFullName();\n        emergencyDialog.showModal();\n    });\n    // Close the dialog when the close button is clicked\n    closeDialogButton.on(\"click\", ()=>{\n        emergencyDialog.close();\n    });\n    // Initialize the form\n    const form = new (0, _core.WFFormComponent)(\"#editEmergencyContactForm\");\n    // Initialize error component for form submission errors\n    const formSubmitError = new (0, _core.WFComponent)(\"#editEmergencySubmitError\");\n    // Define validation rules\n    const fields = [\n        {\n            input: new (0, _core.WFComponent)(\"#emergencyFirstNameInput\"),\n            error: new (0, _core.WFComponent)(\"#emergencyFirstNameInputError\"),\n            validationFn: (0, _validationUtils.validateNotEmpty),\n            message: \"First name is required\"\n        },\n        {\n            input: new (0, _core.WFComponent)(\"#emergencyLastNameInput\"),\n            error: new (0, _core.WFComponent)(\"#emergencyLastNameInputError\"),\n            validationFn: (0, _validationUtils.validateNotEmpty),\n            message: \"Last name is required\"\n        },\n        {\n            input: new (0, _core.WFComponent)(\"#emergencyEmailInput\"),\n            error: new (0, _core.WFComponent)(\"#emergencyEmailInputError\"),\n            validationFn: (0, _validationUtils.validateEmailOptional),\n            message: \"Invalid email format\"\n        },\n        {\n            input: new (0, _core.WFComponent)(\"#emergencyPhoneInput\"),\n            error: new (0, _core.WFComponent)(\"#emergencyPhoneInputError\"),\n            validationFn: (0, _validationUtils.validatePhoneNumber),\n            message: \"Phone number must be in the format (xxx) xxx-xxxx\"\n        },\n        {\n            input: new (0, _core.WFComponent)(\"#emergencyRelationshipInput\"),\n            error: new (0, _core.WFComponent)(\"#emergencyRelationshipInputError\"),\n            validationFn: (0, _validationUtils.validateNotEmpty),\n            message: \"Relationship is required\"\n        }\n    ];\n    // Setup validation for each field\n    fields.forEach(({ input, error, validationFn, message })=>{\n        (0, _formUtils.setupValidation)(input, error, (0, _formUtils.createValidationFunction)(input, validationFn, message), formSubmitError);\n    });\n    // Handle form submission\n    form.onFormSubmit(async (formData, event)=>{\n        event.preventDefault();\n        let isFormValid = true;\n        // Validate all fields\n        fields.forEach(({ input, error, validationFn, message })=>{\n            const errorMessage = (0, _formUtils.createValidationFunction)(input, validationFn, message)();\n            if (errorMessage) {\n                (0, _formUtils.toggleError)(error, errorMessage, true);\n                isFormValid = false;\n            } else (0, _formUtils.toggleError)(error, \"\", false);\n        });\n        if (!isFormValid) {\n            (0, _formUtils.toggleError)(formSubmitError, \"Please correct all errors above.\", true);\n            return;\n        } else (0, _formUtils.toggleError)(formSubmitError, \"\", false);\n        // Show loading animation inside submit button\n        const requestingAnimation = new (0, _core.WFComponent)(\"#requestingEmergencyAnimation\");\n        requestingAnimation.setStyle({\n            display: \"block\"\n        });\n        // Disable submit button\n        const submitButton = new (0, _core.WFComponent)(\"#editEmergencySubmitButton\");\n        submitButton.setAttribute(\"disabled\", \"true\");\n        // Prepare data for API\n        const dataToUpdate = {\n            ...formData\n        };\n        try {\n            // Send update request to API\n            const response = await (0, _apiConfig.apiClient).post(`/profiles/students/update_profile/${studentId}`, {\n                data: dataToUpdate\n            }).fetch();\n            if (response.status === \"success\") {\n                // Update successful\n                // Refresh the student details on the page\n                await (0, _getStudentDetails.getStudentDetails)(studentId);\n                // Reset the form with updated information\n                populateEmergencyContactForm();\n                // Update the emergency contact full name on the page\n                updateEmergencyContactFullName();\n                // Close the dialog after successful request and data refresh\n                emergencyDialog.close();\n            } else throw new Error(response.message || \"Update failed\");\n        } catch (error) {\n            console.error(\"Error updating emergency contact:\", error);\n            (0, _formUtils.toggleError)(formSubmitError, error.message || \"An error occurred\", true);\n        } finally{\n            requestingAnimation.setStyle({\n                display: \"none\"\n            });\n            submitButton.removeAttribute(\"disabled\");\n        }\n    });\n    // Update the emergency contact full name on page load\n    updateEmergencyContactFullName();\n};\n// Function to populate the form with existing emergency contact data\nconst populateEmergencyContactForm = ()=>{\n    const studentData = localStorage.getItem(\"current_student\");\n    if (!studentData) {\n        console.error(\"No student data found\");\n        return;\n    }\n    const student = JSON.parse(studentData);\n    // Set form fields directly from student object\n    const emergencyFirstNameInput = new (0, _core.WFComponent)(\"#emergencyFirstNameInput\").getElement();\n    emergencyFirstNameInput.value = student.emergency_first_name || \"\";\n    const emergencyLastNameInput = new (0, _core.WFComponent)(\"#emergencyLastNameInput\").getElement();\n    emergencyLastNameInput.value = student.emergency_last_name || \"\";\n    const emergencyEmailInput = new (0, _core.WFComponent)(\"#emergencyEmailInput\").getElement();\n    emergencyEmailInput.value = student.emergency_email || \"\";\n    const emergencyPhoneInput = new (0, _core.WFComponent)(\"#emergencyPhoneInput\").getElement();\n    emergencyPhoneInput.value = student.emergency_phone || \"\";\n    const emergencyRelationshipInput = new (0, _core.WFComponent)(\"#emergencyRelationshipInput\").getElement();\n    emergencyRelationshipInput.value = student.emergency_relationship || \"\";\n};\n// Function to update the emergency contact full name on the page\nconst updateEmergencyContactFullName = ()=>{\n    const studentData = localStorage.getItem(\"current_student\");\n    if (!studentData) {\n        console.error(\"No student data found\");\n        return;\n    }\n    const student = JSON.parse(studentData);\n    const fullName = `${student.emergency_first_name || \"\"} ${student.emergency_last_name || \"\"}`.trim();\n    const fullNameComponent = new (0, _core.WFComponent)(\"#emergencyContactFullName\");\n    fullNameComponent.setText(fullName);\n};\n\n},{\"@xatom/core\":\"65YBq\",\"../../../api/apiConfig\":\"dUmIV\",\"../../../utils/formUtils\":\"gepHz\",\"../../../utils/validationUtils\":\"gu2z7\",\"./getStudentDetails\":\"dHqSp\",\"@parcel/transformer-js/src/esmodule-helpers.js\":\"jiucr\"}],\"ldRWJ\":[function(require,module,exports) {\n// src/modules/pages/studentProfile/studentRegistrations.ts\nvar parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\n// ----- FETCHING FUNCTION -----\n/**\n * Fetch registrations for a student from the new endpoint/response.\n */ parcelHelpers.export(exports, \"fetchStudentRegistrations\", ()=>fetchStudentRegistrations);\n// ----- INITIALIZER FOR THE DYNAMIC LIST -----\n/**\n * Initializes the dynamic list of registrations for a given student.\n * @param studentId - The ID of the student.\n */ parcelHelpers.export(exports, \"initializeStudentRegistrations\", ()=>initializeStudentRegistrations);\nvar _core = require(\"@xatom/core\");\nvar _image = require(\"@xatom/image\");\nvar _apiConfig = require(\"../../../api/apiConfig\");\nasync function fetchStudentRegistrations(studentId) {\n    try {\n        const response = await (0, _apiConfig.apiClient).get(`/dashboard/profiles/student/${studentId}/registrations`).fetch();\n        // The API directly returns an array of Registration objects\n        if (response) {\n            const registrations = response;\n            return registrations;\n        } else {\n            console.error(\"No registrations found for the student.\");\n            return [];\n        }\n    } catch (error) {\n        console.error(\"Error fetching student registrations:\", error);\n        return [];\n    }\n}\nasync function initializeStudentRegistrations(studentId) {\n    // 1) Create the dynamic list\n    const list = new (0, _core.WFDynamicList)(\"#listRegistration\", {\n        rowSelector: \"#listRegistrationCard\",\n        loaderSelector: \"#listRegistrationloading\",\n        emptySelector: \"#listRegistrationEmpty\"\n    });\n    // 2) Customize the loader\n    list.loaderRenderer((loaderElement)=>{\n        loaderElement.setStyle({\n            display: \"flex\"\n        });\n        return loaderElement;\n    });\n    // 3) Customize the empty state\n    list.emptyRenderer((emptyElement)=>{\n        emptyElement.setStyle({\n            display: \"flex\"\n        });\n        return emptyElement;\n    });\n    // 4) Customize how each row (registration card) is rendered\n    list.rowRenderer(({ rowData, rowElement })=>{\n        const registrationCard = new (0, _core.WFComponent)(rowElement);\n        // Retrieve the student's name from localStorage\n        const currentStudent = localStorage.getItem(\"current_student\");\n        let studentName = \"N/A\";\n        if (currentStudent) try {\n            const student = JSON.parse(currentStudent);\n            studentName = `${student.first_name || \"\"} ${student.last_name || \"\"}`.trim() || \"N/A\";\n        } catch (parseError) {\n            console.error(\"Error parsing current_student from localStorage:\", parseError);\n        }\n        else console.warn(\"current_student not found in localStorage.\");\n        // Build the link\n        // rowData.program is the numeric Program ID\n        // rowData.subscription_id is the numeric subscription\n        // rowData.workshop might be 0 if no workshop\n        let href = `/dashboard/registration/subscription/workshop?program=${encodeURIComponent(String(rowData.program))}&subscription=${encodeURIComponent(String(rowData.subscription_id))}`;\n        // If workshop > 0, add workshop param\n        if (rowData.workshop && rowData.workshop !== 0) href += `&workshop=${encodeURIComponent(String(rowData.workshop))}`;\n        // Set this link on the card element\n        registrationCard.setAttribute(\"href\", href);\n        // Add the 'registration-link' class for possible event delegation\n        registrationCard.addCssClass(\"registration-link\");\n        // ----- Breadcrumb Data Attributes -----\n        registrationCard.setAttribute(\"data-student-id\", String(rowData.student_profile_id));\n        registrationCard.setAttribute(\"data-student-name\", studentName);\n        // The new data has `program_details` and possibly `workshop_details`\n        const programNameStr = rowData.program_details.name || \"\";\n        const workshopNameStr = rowData.workshop_details?.Name || \"\";\n        registrationCard.setAttribute(\"data-program-name\", programNameStr);\n        registrationCard.setAttribute(\"data-program-id\", String(rowData.program));\n        // If there's a real workshop, store it\n        if (rowData.workshop && rowData.workshop !== 0) {\n            registrationCard.setAttribute(\"data-workshop-name\", workshopNameStr);\n            registrationCard.setAttribute(\"data-workshop-id\", String(rowData.workshop));\n        } else {\n            // No workshop\n            registrationCard.setAttribute(\"data-workshop-name\", \"\");\n            registrationCard.setAttribute(\"data-workshop-id\", \"\");\n        }\n        registrationCard.setAttribute(\"data-subscription-id\", String(rowData.subscription_id));\n        // ----- Update UI Elements in the Card -----\n        // #cardProgramName => from rowData.program_details.name\n        const programNameCmp = registrationCard.getChildAsComponent(\"#cardProgramName\");\n        if (programNameCmp) programNameCmp.setText(programNameStr || \"N/A\");\n        else console.warn(\"#cardProgramName not found in registrationCard.\");\n        // #cardWorkshopName => from rowData.workshop_details?.Name\n        const workshopNameCmp = registrationCard.getChildAsComponent(\"#cardWorkshopName\");\n        if (workshopNameCmp) workshopNameCmp.setText(workshopNameStr || \"\");\n        else console.warn(\"#cardWorkshopName not found in registrationCard.\");\n        // #cardRegistrationImage => from rowData.program_details.Main_Image\n        // (The new response does not include a direct image_url for each registration,\n        //  so we'll assume the program image is the fallback.)\n        const registrationImageElement = registrationCard.getChildAsComponent(\"#cardRegistrationImage\");\n        if (registrationImageElement) {\n            const registrationImage = new (0, _image.WFImage)(registrationImageElement.getElement());\n            if (rowData.program_details?.Main_Image) registrationImage.setImage(rowData.program_details.Main_Image);\n            else registrationImage.setImage(\"https://cdn.prod.website-files.com/667f080f36260b9afbdc46b2/667f080f36260b9afbdc46be_placeholder.svg\");\n        } else console.warn(\"#cardRegistrationImage not found in registrationCard.\");\n        // ----- Status Pills (#cardActivePill, #cardDepositPill, etc.) -----\n        const activePill = registrationCard.getChildAsComponent(\"#cardActivePill\");\n        const depositPill = registrationCard.getChildAsComponent(\"#cardDepositPill\");\n        if (activePill && depositPill) {\n            if (rowData.status === \"Active\") {\n                activePill.setStyle({\n                    display: \"block\"\n                });\n                depositPill.setStyle({\n                    display: \"none\"\n                });\n            } else if (rowData.status === \"Deposit Paid\") {\n                activePill.setStyle({\n                    display: \"none\"\n                });\n                depositPill.setStyle({\n                    display: \"block\"\n                });\n            } else {\n                // Handle other statuses if needed\n                activePill.setStyle({\n                    display: \"none\"\n                });\n                depositPill.setStyle({\n                    display: \"none\"\n                });\n            }\n        } else console.warn(\"Status pills (#cardActivePill or #cardDepositPill) not found in registrationCard.\");\n        // Finally, ensure the card is displayed\n        rowElement.setStyle({\n            display: \"block\"\n        });\n        // Return rowElement to WFDynamicList\n        return rowElement;\n    });\n    // 5) Fetch and load the registrations\n    try {\n        list.changeLoadingStatus(true);\n        const registrations = await fetchStudentRegistrations(studentId);\n        // Optionally sort descending by created_at\n        registrations.sort((a, b)=>b.created_at - a.created_at);\n        list.setData(registrations);\n        list.changeLoadingStatus(false);\n    } catch (error) {\n        console.error(\"Error initializing student registrations:\", error);\n        list.setData([]); // Empty state\n        list.changeLoadingStatus(false);\n    }\n}\n\n},{\"@xatom/core\":\"65YBq\",\"@xatom/image\":\"bavwf\",\"../../../api/apiConfig\":\"dUmIV\",\"@parcel/transformer-js/src/esmodule-helpers.js\":\"jiucr\"}],\"cDWYt\":[function(require,module,exports) {\n// src/modules/pages/studentProfile/deleteStudent.ts\nvar parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\n/**\n * Initializes the delete student functionality.\n * @param studentId - The ID of the student to be deleted.\n */ parcelHelpers.export(exports, \"initializeDeleteStudent\", ()=>initializeDeleteStudent);\nvar _core = require(\"@xatom/core\");\nvar _apiConfig = require(\"../../../api/apiConfig\");\nvar _studentRegistrations = require(\"./studentRegistrations\"); // Import the fetch function\nfunction initializeDeleteStudent(studentId) {\n    // Attempt to retrieve and initialize the \"Open Delete Dialog\" button\n    let openDeleteDialogBtn = null;\n    try {\n        openDeleteDialogBtn = new (0, _core.WFComponent)(\"#openDeleteDialog\");\n    } catch (error) {\n        console.warn(\"Element #openDeleteDialog not found. Skipping initialization of delete dialog opener.\");\n    }\n    // Attempt to retrieve the delete student dialog element\n    const deleteStudentDialogElement = document.getElementById(\"deleteStudentDialog\");\n    // Attempt to retrieve and initialize the \"Close Delete Dialog\" button\n    let closeDeleteDialogBtn = null;\n    try {\n        closeDeleteDialogBtn = new (0, _core.WFComponent)(\"#close-delete-dialog-btn\");\n    } catch (error) {\n        console.warn(\"Element #close-delete-dialog-btn not found. Skipping initialization of delete dialog closer.\");\n    }\n    // Attempt to retrieve and initialize the \"Final Delete\" button\n    let deleteStudentFinalBtn = null;\n    try {\n        deleteStudentFinalBtn = new (0, _core.WFComponent)(\"#deleteStudentFinal\");\n    } catch (error) {\n        console.warn(\"Element #deleteStudentFinal not found. Skipping initialization of final delete button.\");\n    }\n    // Attempt to retrieve and initialize the \"Delete Student Error\" component\n    let deleteStudentError = null;\n    try {\n        deleteStudentError = new (0, _core.WFComponent)(\"#deleteStudentError\");\n    } catch (error) {\n        console.warn(\"Element #deleteStudentError not found. Skipping initialization of delete student error display.\");\n    }\n    // Attempt to retrieve and initialize the \"Page Main\" component\n    let pageMain = null;\n    try {\n        pageMain = new (0, _core.WFComponent)(\".page_main\");\n    } catch (error) {\n        console.warn(\"Element with class .page_main not found. Skipping initialization of page main.\");\n    }\n    // Attempt to retrieve and initialize the loader animations\n    let requestingAnimation = null;\n    let deleteRequestingAnimation = null;\n    try {\n        requestingAnimation = new (0, _core.WFComponent)(\"#requestingAnimation\");\n        deleteRequestingAnimation = new (0, _core.WFComponent)(\"#deleteRequestingAnimation\");\n        // Initially hide the loader animations\n        requestingAnimation.setStyle({\n            display: \"none\"\n        });\n        deleteRequestingAnimation.setStyle({\n            display: \"none\"\n        });\n    } catch (error) {\n        console.warn(\"Loader animation elements not found. Skipping initialization of loader animations.\");\n    }\n    /**\n   * Shows the delete confirmation dialog and updates the data-brand attribute.\n   */ const showDeleteDialog = ()=>{\n        if (deleteStudentDialogElement && pageMain) {\n            deleteStudentDialogElement.showModal(); // Display the dialog\n            pageMain.setAttribute(\"data-brand\", \"6\"); // Update data-brand to 6\n        } else console.warn(\"Cannot show delete dialog because either deleteStudentDialogElement or pageMain is not available.\");\n    };\n    /**\n   * Hides the delete confirmation dialog and reverts the data-brand attribute.\n   */ const hideDeleteDialog = ()=>{\n        if (deleteStudentDialogElement && pageMain && deleteStudentError) {\n            deleteStudentDialogElement.close(); // Close the dialog\n            pageMain.setAttribute(\"data-brand\", \"2\"); // Revert data-brand to 2\n            deleteStudentError.setStyle({\n                display: \"none\"\n            }); // Hide any previous error messages\n        } else console.warn(\"Cannot hide delete dialog because either deleteStudentDialogElement, pageMain, or deleteStudentError is not available.\");\n    };\n    /**\n   * Handles the deletion of the student.\n   */ const handleDeleteStudent = async ()=>{\n        try {\n            // Fetch the current registrations for the student\n            const registrations = await (0, _studentRegistrations.fetchStudentRegistrations)(studentId);\n            // Check if there are any current registrations\n            if (registrations.length > 0) {\n                alert(\"You must remove this student from any current registrations before you may delete them.\");\n                return; // Exit the function early; do not proceed with deletion\n            }\n            // Hide previous error messages if available\n            if (deleteStudentError) deleteStudentError.setStyle({\n                display: \"none\"\n            });\n            // Show the loader animation and disable the delete button if available\n            if (deleteRequestingAnimation && deleteStudentFinalBtn) {\n                deleteRequestingAnimation.setStyle({\n                    display: \"flex\"\n                });\n                deleteStudentFinalBtn.setAttribute(\"disabled\", \"true\");\n            }\n            // Send the DELETE request to the API\n            const response = await (0, _apiConfig.apiClient).delete(`/profiles/student/${studentId}`).fetch();\n            // Hide the loader animation and re-enable the delete button if available\n            if (deleteRequestingAnimation && deleteStudentFinalBtn) {\n                deleteRequestingAnimation.setStyle({\n                    display: \"none\"\n                });\n                deleteStudentFinalBtn.removeAttribute(\"disabled\");\n            }\n            if (response && response.status === 200) {\n                // Successfully deleted the student\n                // Optionally, display a success message before redirecting\n                alert(\"Student has been successfully deleted.\");\n                // Redirect to the students list page or another appropriate page\n                window.location.href = \"/dashboard\"; // Adjust the URL as needed\n            } else // Handle unexpected successful responses\n            throw new Error(\"Unexpected response from the server.\");\n        } catch (error) {\n            console.error(\"Error deleting student:\", error);\n            // Hide the loader animation and re-enable the delete button if available\n            if (deleteRequestingAnimation && deleteStudentFinalBtn) {\n                deleteRequestingAnimation.setStyle({\n                    display: \"none\"\n                });\n                deleteStudentFinalBtn.removeAttribute(\"disabled\");\n            }\n            // Display the error message if the error component exists\n            if (deleteStudentError) {\n                deleteStudentError.setStyle({\n                    display: \"flex\"\n                });\n                try {\n                    deleteStudentError.getChildAsComponent(\".error-text\").setText(error.message || \"An unexpected error occurred while deleting the student.\");\n                } catch (childError) {\n                    console.warn(\"Could not set text for .error-text within #deleteStudentError:\", childError);\n                }\n            }\n        }\n    };\n    // Event listener to open the delete dialog if the open button and dialog exist\n    if (openDeleteDialogBtn && deleteStudentDialogElement && pageMain) openDeleteDialogBtn.on(\"click\", showDeleteDialog);\n    else console.warn(\"Cannot attach click event to #openDeleteDialog because required elements are missing.\");\n    // Event listener to close the delete dialog if the close button and dialog exist\n    if (closeDeleteDialogBtn && deleteStudentDialogElement && pageMain && deleteStudentError) closeDeleteDialogBtn.on(\"click\", hideDeleteDialog);\n    else console.warn(\"Cannot attach click event to #close-delete-dialog-btn because required elements are missing.\");\n    // Event listener for the final delete action if the delete button exists\n    if (deleteStudentFinalBtn) deleteStudentFinalBtn.on(\"click\", handleDeleteStudent);\n    else console.warn(\"Cannot attach click event to #deleteStudentFinal because the element is missing.\");\n}\n\n},{\"@xatom/core\":\"65YBq\",\"../../../api/apiConfig\":\"dUmIV\",\"./studentRegistrations\":\"ldRWJ\",\"@parcel/transformer-js/src/esmodule-helpers.js\":\"jiucr\"}],\"9Px6R\":[function(require,module,exports) {\n// src/modules/pages/studentProfile/caregiverView.ts\nvar parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"initializeCaregiverView\", ()=>initializeCaregiverView);\nvar _core = require(\"@xatom/core\");\nconst initializeCaregiverView = ()=>{\n    // Retrieve the current student data from localStorage\n    const studentData = localStorage.getItem(\"current_student\");\n    if (!studentData) {\n        console.error(\"No student data found in localStorage.\");\n        return;\n    }\n    let student;\n    try {\n        student = JSON.parse(studentData);\n    } catch (parseError) {\n        console.error(\"Error parsing student data from localStorage:\", parseError);\n        return;\n    }\n    // Check if the current user is a caregiver\n    if (student.caregiver === true) {\n        // List of DOM selectors to remove for caregivers\n        const selectorsToRemove = [\n            \"#openEditStudentDialog\",\n            \"#openDeleteDialog\",\n            \"#editEmergencySubmitButton\",\n            \"#editStudentDialog\",\n            \"#deleteStudentDialog\"\n        ];\n        // Iterate over each selector and remove the corresponding element from the DOM\n        selectorsToRemove.forEach((selector)=>{\n            try {\n                const component = new (0, _core.WFComponent)(selector);\n                component.remove();\n                console.log(`Removed element with selector: ${selector}`);\n            } catch (error) {\n                console.error(`Failed to remove element with selector ${selector}:`, error);\n            }\n        });\n        // Disable the edit emergency contact form to prevent submission\n        try {\n            const editEmergencyForm = new (0, _core.WFFormComponent)(\"#editEmergencyContactForm\");\n            editEmergencyForm.disableForm();\n            console.log(\"Disabled #editEmergencyContactForm to prevent submissions.\");\n        } catch (error) {\n            console.error(\"Failed to disable #editEmergencyContactForm:\", error);\n        }\n    } else console.log(\"Current user is not a caregiver. No changes applied.\");\n};\n\n},{\"@xatom/core\":\"65YBq\",\"@parcel/transformer-js/src/esmodule-helpers.js\":\"jiucr\"}],\"8g6ag\":[function(require,module,exports) {\n// src/modules/pages/studentProfile/registrationBreadcrumbs.ts\nvar parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"initializeRegistrationBreadcrumbs\", ()=>initializeRegistrationBreadcrumbs);\nconst initializeRegistrationBreadcrumbs = ()=>{\n    // Define the selector for registration links.\n    // Update this selector based on the actual structure of your registration links.\n    const registrationLinkSelector = \".registration-link\";\n    /**\n   * Event handler for registration link clicks.\n   * @param event - The click event.\n   */ const handleRegistrationClick = (event)=>{\n        // Prevent the default action if necessary.\n        // Uncomment the next line if you want to handle navigation manually.\n        // event.preventDefault();\n        const target = event.target;\n        // Traverse up the DOM to find the registration link element if the click is on a child element.\n        const registrationLink = target.closest(registrationLinkSelector);\n        if (!registrationLink) {\n            console.warn(\"Clicked element is not a registration link.\");\n            return;\n        }\n        // Extract data attributes from the registration link.\n        const studentId = parseInt(registrationLink.getAttribute(\"data-student-id\") || \"0\", 10);\n        const studentName = registrationLink.getAttribute(\"data-student-name\") || \"\";\n        const workshopName = registrationLink.getAttribute(\"data-workshop-name\") || \"\";\n        const workshopId = registrationLink.getAttribute(\"data-workshop-id\") || \"\";\n        const programName = registrationLink.getAttribute(\"data-program-name\") || \"\";\n        const programId = registrationLink.getAttribute(\"data-program-id\") || \"\";\n        const subscriptionId = parseInt(registrationLink.getAttribute(\"data-subscription-id\") || \"0\", 10);\n        // Validate the extracted data.\n        if (!studentId || !studentName || !programName || !programId || !subscriptionId) {\n            console.error(\"Incomplete registration data. Cannot set caregiver_breadcrumbs.\");\n            return;\n        }\n        // Create the caregiver_breadcrumbs object.\n        const caregiverBreadcrumbs = {\n            student_id: studentId,\n            student_name: studentName,\n            workshop_name: workshopName,\n            workshop_id: workshopId,\n            program_name: programName,\n            program_id: programId,\n            subscription_id: subscriptionId\n        };\n        // Store the object in localStorage.\n        try {\n            localStorage.setItem(\"caregiver_breadcrumbs\", JSON.stringify(caregiverBreadcrumbs));\n            console.log(\"caregiver_breadcrumbs set in localStorage:\", caregiverBreadcrumbs);\n        } catch (error) {\n            console.error(\"Failed to set caregiver_breadcrumbs in localStorage:\", error);\n        }\n    };\n    /**\n   * Attaches the event listener using event delegation.\n   */ const attachEventListener = ()=>{\n        // Attach the event listener to a common ancestor.\n        // Update the selector based on your DOM structure. Here, we use the document body.\n        const commonAncestor = document.body;\n        if (!commonAncestor) {\n            console.error(\"Common ancestor for event delegation not found.\");\n            return;\n        }\n        commonAncestor.addEventListener(\"click\", handleRegistrationClick);\n        console.log(\"Event listener for registration links attached.\");\n    };\n    // Initialize the event listeners.\n    attachEventListener();\n};\n\n},{\"@parcel/transformer-js/src/esmodule-helpers.js\":\"jiucr\"}],\"9uLdx\":[function(require,module,exports) {\n// src/pages/listStudentFiles.ts\nvar parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\n// Function to fetch files for a specific student\nparcelHelpers.export(exports, \"fetchStudentFiles\", ()=>fetchStudentFiles);\n// Function to initialize and render the dynamic file list for a student\nparcelHelpers.export(exports, \"initializeDynamicStudentFileList\", ()=>initializeDynamicStudentFileList);\nvar _core = require(\"@xatom/core\");\nvar _apiConfig = require(\"../../../api/apiConfig\");\n// Function to get the student_id from URL parameters\nfunction getStudentIdFromUrl() {\n    const urlParams = new URLSearchParams(window.location.search);\n    return urlParams.get(\"id\");\n}\nasync function fetchStudentFiles(studentId) {\n    try {\n        const getFiles = (0, _apiConfig.apiClient).get(`/student_files/student/${studentId}`);\n        const response = await getFiles.fetch();\n        return response;\n    } catch (error) {\n        console.error(\"Error fetching files for student:\", error);\n        throw error;\n    }\n}\nasync function initializeDynamicStudentFileList(containerSelector) {\n    // Get the student ID from the URL\n    const studentId = getStudentIdFromUrl();\n    if (!studentId) {\n        console.error(\"No student ID provided in URL\");\n        return;\n    }\n    // Initialize a new instance of WFDynamicList for Files\n    const list = new (0, _core.WFDynamicList)(containerSelector, {\n        rowSelector: \"#fileCard\",\n        loaderSelector: \"#filesloading\",\n        emptySelector: \"#filesEmpty\"\n    });\n    // Customize the rendering of the loader\n    list.loaderRenderer((loaderElement)=>{\n        loaderElement.setStyle({\n            display: \"flex\"\n        });\n        return loaderElement;\n    });\n    // Customize the rendering of the empty state\n    list.emptyRenderer((emptyElement)=>{\n        emptyElement.setStyle({\n            display: \"flex\"\n        });\n        return emptyElement;\n    });\n    // Customize the rendering of list items (File Cards)\n    list.rowRenderer(({ rowData, rowElement })=>{\n        const fileCard = new (0, _core.WFComponent)(rowElement);\n        // Set the fileCard's href to file_url\n        fileCard.setAttribute(\"href\", rowData.file_url);\n        // Set the fileName to file_name\n        const fileName = fileCard.getChildAsComponent(\"#fileName\");\n        fileName.setText(rowData.file_name);\n        // Show the list item\n        rowElement.setStyle({\n            display: \"block\"\n        });\n        return rowElement;\n    });\n    // Load and display file data\n    try {\n        // Enable the loading state\n        list.changeLoadingStatus(true);\n        const files = await fetchStudentFiles(studentId);\n        // Sort files alphabetically by file_name\n        files.sort((a, b)=>a.file_name.localeCompare(b.file_name));\n        // Set the data to be displayed in the dynamic list\n        list.setData(files);\n        // Disable the loading state\n        list.changeLoadingStatus(false);\n    } catch (error) {\n        console.error(\"Error loading files:\", error);\n        // If there's an error, set an empty array to trigger the empty state\n        list.setData([]);\n        // Disable the loading state\n        list.changeLoadingStatus(false);\n    }\n}\n\n},{\"@xatom/core\":\"65YBq\",\"../../../api/apiConfig\":\"dUmIV\",\"@parcel/transformer-js/src/esmodule-helpers.js\":\"jiucr\"}]},[], null, \"parcelRequired346\")\n\n//# sourceMappingURL=studentProfile.cb57278e.js.map\n","// src/modules/pages/studentProfile/index.ts\n\nimport { getStudentDetails } from \"./getStudentDetails\";\nimport { initializeEditStudentDialog } from \"./editStudentDialog\";\nimport { initializeEditEmergencyDialog } from \"./editEmergencyDialog\";\nimport { initializeStudentRegistrations } from \"./studentRegistrations\";\nimport { initializeDeleteStudent } from \"./deleteStudent\";\nimport { initializeCaregiverView } from \"./caregiverView\";\nimport { initializeRegistrationBreadcrumbs } from \"./registrationBreadcrumbs\";\nimport { initializeDynamicStudentFileList } from \"./listStudentFiles\";\n\nexport const initializeStudentProfilePage = async () => {\n  // Get the student ID from the URL\n  const urlParams = new URLSearchParams(window.location.search);\n  const studentIdParam = urlParams.get(\"id\");\n  if (!studentIdParam) {\n    console.error(\"No student ID provided in the URL.\");\n    return;\n  }\n\n  const studentId = parseInt(studentIdParam, 10);\n\n  // Fetch and display student details\n  await getStudentDetails(studentId);\n\n  // Initialize the caregiver view adjustments\n  initializeCaregiverView();\n\n  // Initialize the edit student dialog\n  await initializeEditStudentDialog(studentId);\n\n  // Initialize the edit emergency contact dialog\n  await initializeEditEmergencyDialog(studentId);\n\n  await initializeDynamicStudentFileList(\"#filesList\"); // Initialize the student files list\n\n  // Initialize the student registrations list\n  initializeStudentRegistrations(studentId);\n\n  // Initialize the delete student functionality\n  initializeDeleteStudent(studentId);\n\n  // Initialize registration breadcrumbs\n  initializeRegistrationBreadcrumbs(); // Initialize the breadcrumbs\n\n  // Add an event listener to remove current_student from localStorage when navigating away\n  window.addEventListener(\"beforeunload\", () => {\n    localStorage.removeItem(\"current_student\");\n  });\n};\n","// src/modules/pages/studentProfile/getStudentDetails.ts\n\nimport { apiClient } from \"../../../api/apiConfig\";\nimport { WFComponent } from \"@xatom/core\";\nimport { WFImage } from \"@xatom/image\";\n\nexport const getStudentDetails = async (studentId: number) => {\n  // Show loading spinner\n  const loadingSpinner = new WFComponent(\".dashboard_loading_wall\");\n  console.log(\"Displaying loading spinner\");\n  loadingSpinner.setStyle({ display: \"flex\" });\n\n  try {\n    const response = await apiClient\n      .get(`/dashboard/profiles/student/${studentId}`)\n      .fetch();\n\n    if (response) {\n      const student = response as any; // Define an interface for better type safety\n\n      // Hide the loading spinner\n      triggerSuccessEvent(\".success_trigger\");\n\n      // Update the breadcrumb with the student's name\n      const studentBreadcrumb = new WFComponent(\"#studentBreadcrumb\");\n      studentBreadcrumb.setText(`${student.first_name} ${student.last_name}`);\n\n      // Set student name\n      const studentFullName = new WFComponent(\"#studentFullName\");\n      studentFullName.setText(`${student.first_name} ${student.last_name}`);\n\n      // Set profile picture\n      const studentProfilePicture = new WFImage(\"#studentProfilePicture\");\n      if (student.profile_pic && student.profile_pic.url) {\n        studentProfilePicture.setImage(student.profile_pic.url);\n      } else {\n        console.log(\"No profile picture available\");\n        studentProfilePicture.setImage(\n          \"https://cdn.prod.website-files.com/667f080f36260b9afbdc46b2/667f080f36260b9afbdc46be_placeholder.svg\"\n        );\n      }\n\n      // Set email\n      const studentEmail = new WFComponent(\"#studentEmail\");\n      studentEmail.setText(student.email || \"N/A\");\n\n      // Set phone\n      const studentPhone = new WFComponent(\"#studentPhone\");\n      studentPhone.setText(student.phone || \"N/A\");\n\n      // Set date of birth\n      const studentDob = new WFComponent(\"#studentDob\");\n      studentDob.setText(student.dob || \"N/A\");\n\n      // Set gender\n      const studentGender = new WFComponent(\"#studentGender\");\n      studentGender.setText(student.gender || \"N/A\");\n\n      // Set school\n      const studentSchool = new WFComponent(\"#studentSchool\");\n      studentSchool.setText(student.school || \"N/A\");\n\n      // Set grade\n      const studentGrade = new WFComponent(\"#studentGrade\");\n      studentGrade.setText(student.grade || \"N/A\");\n\n      // Set ethnicity (if available)\n      const studentEthnicity = new WFComponent(\"#studentEthnicity\");\n      studentEthnicity.setText(student.ethnicity || \"N/A\");\n\n      // Set health information\n      const studentHealth = new WFComponent(\"#studentHealth\");\n      studentHealth.setText(student.health || \"N/A\");\n\n      // Set dismissal names\n      const studentDismissal = new WFComponent(\"#studentDismissal\");\n      studentDismissal.setText(student.dismissal_names || \"N/A\");\n\n      // Set send texts preference\n      const studentTextTrue = new WFComponent(\"#studentTextTrue\");\n      const studentTextFalse = new WFComponent(\"#studentTextFalse\");\n      if (student.send_texts) {\n        studentTextTrue.setStyle({ display: \"block\" });\n        studentTextFalse.setStyle({ display: \"none\" });\n      } else {\n        studentTextTrue.setStyle({ display: \"none\" });\n        studentTextFalse.setStyle({ display: \"block\" });\n      }\n\n      // Set independent travel\n      const studentTravelTrue = new WFComponent(\"#studentTravelTrue\");\n      const studentTravelFalse = new WFComponent(\"#studentTravelFalse\");\n      if (student.independent_travel) {\n        studentTravelTrue.setStyle({ display: \"block\" });\n        studentTravelFalse.setStyle({ display: \"none\" });\n      } else {\n        studentTravelTrue.setStyle({ display: \"none\" });\n        studentTravelFalse.setStyle({ display: \"block\" });\n      }\n\n      // Set photo release\n      const studentPhotoTrue = new WFComponent(\"#studentPhotoTrue\");\n      const studentPhotoFalse = new WFComponent(\"#studentPhotoFalse\");\n      if (student.photo_release) {\n        studentPhotoTrue.setStyle({ display: \"block\" });\n        studentPhotoFalse.setStyle({ display: \"none\" });\n      } else {\n        studentPhotoTrue.setStyle({ display: \"none\" });\n        studentPhotoFalse.setStyle({ display: \"block\" });\n      }\n\n      // Set status pills\n      const studentApprovedPill = new WFComponent(\"#studentApprovedPill\");\n      const studentPendingPill = new WFComponent(\"#studentPendingPill\");\n      if (student.Status === \"Approved\") {\n        studentApprovedPill.setStyle({ display: \"block\" });\n        studentPendingPill.setStyle({ display: \"none\" });\n      } else {\n        studentApprovedPill.setStyle({ display: \"none\" });\n        studentPendingPill.setStyle({ display: \"block\" });\n      }\n\n      // Save student data for later use (e.g., in edit forms)\n      localStorage.setItem(\"current_student\", JSON.stringify(student));\n    } else {\n      // If response is null, display an alert and navigate back\n      alert(\"Error: Received null response from the server.\");\n      console.error(\"Received null response from the server.\");\n\n      // Navigate back to the previous page\n      window.history.back();\n    }\n  } catch (error: any) {\n    console.error(\"Error fetching student details:\", error);\n    // Display the error message in an alert box\n    alert(`Error fetching student details: ${error.message || error}`);\n\n    // Navigate back to the previous page\n    window.history.back();\n  } finally {\n    // Hide loading spinner in all cases\n    loadingSpinner.setStyle({ display: \"none\" });\n  }\n};\n\nconst triggerSuccessEvent = (selector: string) => {\n  const successTrigger = document.querySelector(selector);\n  if (successTrigger instanceof HTMLElement) {\n    successTrigger.click();\n  }\n};\n","var t=require(\"@xatom/core\");var e,r,s,i,o,n,u={};e=u,r=\"WFImage\",s=()=>c,Object.defineProperty(e,r,{get:s,set:i,enumerable:!0,configurable:!0});class c extends t.WFComponent{constructor(t){super(t)}getImageConfig(){return this._config}getSrc(){return this.getAttribute(\"src\")}getSizes(){return this.getAttribute(\"sizes\")}getSrcSet(){return this.getAttribute(\"srcset\")}getLoading(){return this.getAttribute(\"loading\")}onLoad(t){return this.on(\"load\",t),()=>{this.off(\"load\",t)}}onLoadError(t){return this.on(\"error\",t),()=>{this.off(\"error\",t)}}setImage(t){if(\"string\"==typeof t)this.setAttribute(\"src\",t),this.removeAttribute(\"srcset\"),this.removeAttribute(\"sizes\");else{if(this.setAttribute(\"src\",t.src),\"object\"==typeof t&&t.srcSet&&t.srcSet.length&&t.sizes&&t.sizes.length){const e=t.srcSet.map((t=>`${t.url} ${t.size}`)).join(\", \");this.setAttribute(\"srcset\",e)}else this.removeAttribute(\"srcset\"),this.removeAttribute(\"sizes\");t.loading&&this.setAttribute(\"loading\",t.loading)}}}o=module.exports,n=u,Object.keys(n).forEach((function(t){\"default\"===t||\"__esModule\"===t||o.hasOwnProperty(t)||Object.defineProperty(o,t,{enumerable:!0,get:function(){return n[t]}})}));","// src/modules/pages/studentProfile/editStudentDialog.ts\n\nimport { WFComponent, WFFormComponent } from \"@xatom/core\";\nimport { WFImage } from \"@xatom/image\";\nimport { apiClient } from \"../../../api/apiConfig\";\nimport {\n  setupValidation,\n  createValidationFunction,\n  toggleError,\n  setupFileUpload,\n} from \"../../../utils/formUtils\";\nimport {\n  validateNotEmpty,\n  validateEmailOptional,\n  validatePhoneNumber,\n  validateSelectField,\n} from \"../../../utils/validationUtils\";\nimport { getStudentDetails } from \"./getStudentDetails\";\n\n// Define the ApiResponse interface to type the API responses\ninterface ApiResponse {\n  status: string;\n  message?: string;\n  profile_pic?: any;\n  [key: string]: any;\n}\n\nexport const initializeEditStudentDialog = (studentId: number) => {\n  // Attempt to retrieve and initialize the \"Open Edit Dialog\" button\n  let openEditDialogButton: WFComponent | null = null;\n  try {\n    openEditDialogButton = new WFComponent(\"#openEditStudentDialog\");\n  } catch (error) {\n    console.warn(\n      \"Element #openEditStudentDialog not found. Skipping initialization of edit dialog opener.\"\n    );\n  }\n\n  // Attempt to retrieve the edit student dialog element\n  const editStudentDialogElement = document.getElementById(\n    \"editStudentDialog\"\n  ) as HTMLDialogElement | null;\n\n  // Attempt to retrieve and initialize the \"Close Dialog\" button\n  let closeDialogButton: WFComponent | null = null;\n  try {\n    closeDialogButton = new WFComponent(\"#close-dialog-btn\");\n  } catch (error) {\n    console.warn(\n      \"Element #close-dialog-btn not found. Skipping initialization of dialog closer.\"\n    );\n  }\n\n  // If the \"Open Edit Dialog\" button exists, set up the click event listener\n  if (openEditDialogButton && editStudentDialogElement) {\n    openEditDialogButton.on(\"click\", () => {\n      populateEditStudentForm();\n      editStudentDialogElement.showModal();\n    });\n  }\n\n  // If the \"Close Dialog\" button exists and the dialog element is present, set up the click event listener\n  if (closeDialogButton && editStudentDialogElement) {\n    closeDialogButton.on(\"click\", () => {\n      editStudentDialogElement.close();\n    });\n  }\n\n  // Initialize the form if it exists\n  let form: WFFormComponent<any> | null = null;\n  try {\n    form = new WFFormComponent<{\n      profile_pic: File | null;\n      first_name: string;\n      last_name: string;\n      email: string;\n      phone: string;\n      send_texts: boolean;\n      dob: string;\n      gender: string;\n      school: string;\n      grade: string;\n      health: string;\n      dismissal_names: string;\n      independent_travel: boolean;\n      family_involved: string;\n      photo_release: boolean;\n    }>(\"#editStudentForm\");\n  } catch (error) {\n    console.warn(\n      \"Element #editStudentForm not found. Skipping form initialization.\"\n    );\n  }\n\n  // Initialize error component for form submission errors if it exists\n  let formSubmitError: WFComponent | null = null;\n  try {\n    formSubmitError = new WFComponent(\"#editStudentSubmitError\");\n  } catch (error) {\n    console.warn(\n      \"Element #editStudentSubmitError not found. Skipping initialization of form submission error display.\"\n    );\n  }\n\n  // Define validation rules for each field if the form exists\n  const fields = form\n    ? [\n        {\n          input: new WFComponent(\"#firstNameInput\"),\n          error: new WFComponent(\"#firstNameInputError\"),\n          validationFn: validateNotEmpty,\n          message: \"First name is required\",\n        },\n        {\n          input: new WFComponent(\"#lastNameInput\"),\n          error: new WFComponent(\"#lastNameInputError\"),\n          validationFn: validateNotEmpty,\n          message: \"Last name is required\",\n        },\n        {\n          input: new WFComponent(\"#emailInput\"),\n          error: new WFComponent(\"#emailInputError\"),\n          validationFn: validateEmailOptional,\n          message: \"Invalid email format\",\n        },\n        {\n          input: new WFComponent(\"#phoneNumberInput\"),\n          error: new WFComponent(\"#phoneNumberInputError\"),\n          validationFn: validatePhoneNumber,\n          message: \"Phone number must be in the format (xxx) xxx-xxxx\",\n        },\n        {\n          input: new WFComponent(\"#dobInput\"),\n          error: new WFComponent(\"#dobInputError\"),\n          validationFn: validateNotEmpty,\n          message: \"Date of birth is required\",\n        },\n        {\n          input: new WFComponent(\"#genderInput\"),\n          error: new WFComponent(\"#genderInputError\"),\n          validationFn: validateSelectField,\n          message: \"Please select a gender\",\n        },\n        {\n          input: new WFComponent(\"#schoolInput\"),\n          error: new WFComponent(\"#schoolInputError\"),\n          validationFn: validateNotEmpty,\n          message: \"School is required\",\n        },\n        {\n          input: new WFComponent(\"#gradeInput\"),\n          error: new WFComponent(\"#gradeInputError\"),\n          validationFn: validateSelectField,\n          message: \"Please select a grade\",\n        },\n        {\n          input: new WFComponent(\"#healthInput\"),\n          error: new WFComponent(\"#healthInputError\"),\n          validationFn: validateNotEmpty,\n          message: \"Health information is required\",\n        },\n        {\n          input: new WFComponent(\"#dismissalNamesInput\"),\n          error: new WFComponent(\"#dismissalNamesInputError\"),\n          validationFn: validateNotEmpty,\n          message: \"Dismissal names are required\",\n        },\n        {\n          input: new WFComponent(\"#familyInvolvedInput\"),\n          error: new WFComponent(\"#familyInvolvedInputError\"),\n          validationFn: validateNotEmpty,\n          message: \"Family involvement information is required\",\n        },\n      ]\n    : [];\n\n  // Setup validation for each field if the form exists\n  if (form && formSubmitError) {\n    fields.forEach(({ input, error, validationFn, message }) => {\n      try {\n        setupValidation(\n          input,\n          error,\n          createValidationFunction(input, validationFn, message),\n          formSubmitError\n        );\n      } catch (error) {\n        console.warn(\n          `Validation setup failed for one of the fields: ${message}. Error:`,\n          error\n        );\n      }\n    });\n  }\n\n  // Setup checkbox components if they exist\n  let sendTextsInput: WFComponent | null = null;\n  let independentTravelInput: WFComponent | null = null;\n  let photoReleaseInput: WFComponent | null = null;\n\n  try {\n    sendTextsInput = new WFComponent(\"#sendTextsInput\");\n  } catch (error) {\n    console.warn(\n      \"Element #sendTextsInput not found. Skipping initialization of sendTextsInput.\"\n    );\n  }\n\n  try {\n    independentTravelInput = new WFComponent(\"#independentTravelInput\");\n  } catch (error) {\n    console.warn(\n      \"Element #independentTravelInput not found. Skipping initialization of independentTravelInput.\"\n    );\n  }\n\n  try {\n    photoReleaseInput = new WFComponent(\"#photoReleaseInput\");\n  } catch (error) {\n    console.warn(\n      \"Element #photoReleaseInput not found. Skipping initialization of photoReleaseInput.\"\n    );\n  }\n\n  // Handle form submission if the form exists\n  if (form && formSubmitError) {\n    form.onFormSubmit(async (formData, event) => {\n      event.preventDefault();\n      // Show loading animation inside submit button if it exists\n      let requestingAnimation: WFComponent | null = null;\n      try {\n        requestingAnimation = new WFComponent(\"#requestingAnimation\");\n        requestingAnimation.setStyle({ display: \"block\" });\n      } catch (error) {\n        console.warn(\n          \"Element #requestingAnimation not found. Skipping loading animation.\"\n        );\n      }\n\n      let isFormValid = true;\n\n      // Validate all fields\n      fields.forEach(({ input, error, validationFn, message }) => {\n        try {\n          const errorMessage = createValidationFunction(\n            input,\n            validationFn,\n            message\n          )();\n          if (errorMessage) {\n            toggleError(error, errorMessage, true);\n            isFormValid = false;\n          } else {\n            toggleError(error, \"\", false);\n          }\n        } catch (error) {\n          console.warn(\n            `Validation failed for field \"${message}\". Error:`,\n            error\n          );\n          isFormValid = false;\n        }\n      });\n\n      // No validation required for checkboxes since they are optional\n\n      if (!isFormValid) {\n        toggleError(formSubmitError, \"Please correct all errors above.\", true);\n        // Hide loading animation if it exists\n        if (requestingAnimation) {\n          requestingAnimation.setStyle({ display: \"none\" });\n        }\n        return;\n      } else {\n        toggleError(formSubmitError, \"\", false);\n      }\n\n      // Disable submit button if it exists\n      let submitButton: WFComponent | null = null;\n      try {\n        submitButton = new WFComponent(\"#editStudentSubmitButton\");\n        submitButton.setAttribute(\"disabled\", \"true\");\n      } catch (error) {\n        console.warn(\n          \"Element #editStudentSubmitButton not found. Skipping disabling the submit button.\"\n        );\n      }\n\n      // Prepare data for API\n      const dataToUpdate = { ...formData };\n\n      try {\n        // Send update request to API\n        const response = (await apiClient\n          .post(`/profiles/students/update_profile/${studentId}`, {\n            data: dataToUpdate,\n          })\n          .fetch()) as ApiResponse;\n\n        if (response.status === \"success\") {\n          // Update successful\n\n          // Refresh the student details on the page\n          await getStudentDetails(studentId);\n\n          // Reset the form with updated information\n          populateEditStudentForm();\n\n          // Close the dialog after successful request and data refresh if the dialog exists\n          if (editStudentDialogElement) {\n            editStudentDialogElement.close();\n          }\n        } else {\n          throw new Error(response.message || \"Update failed\");\n        }\n      } catch (error: any) {\n        console.error(\"Error updating student profile:\", error);\n        toggleError(\n          formSubmitError,\n          error.message || \"An error occurred\",\n          true\n        );\n      } finally {\n        // Hide loading animation if it exists\n        if (requestingAnimation) {\n          requestingAnimation.setStyle({ display: \"none\" });\n        }\n        // Re-enable submit button if it exists\n        if (submitButton) {\n          submitButton.removeAttribute(\"disabled\");\n        }\n      }\n    });\n  }\n\n  // Set up the file upload for the profile picture if the input exists\n  try {\n    const profilePictureInput = new WFComponent(\"#profilePictureInput\");\n    const profilePictureInputError = new WFComponent(\n      \"#profilePictureInputError\"\n    );\n    const profilePictureInputSuccess = new WFComponent(\n      \"#profilePictureInputSuccess\"\n    );\n    setupFileUpload(\n      profilePictureInput,\n      profilePictureInputError,\n      profilePictureInputSuccess,\n      \"/profiles/students/image-upload\"\n    );\n  } catch (error) {\n    console.warn(\n      \"One or more profile picture upload elements not found. Skipping file upload setup.\"\n    );\n  }\n};\n\n// Function to populate the form with existing student data\nconst populateEditStudentForm = () => {\n  const studentData = localStorage.getItem(\"current_student\");\n  if (!studentData) {\n    console.error(\"No student data found\");\n    return;\n  }\n\n  let student: any;\n  try {\n    student = JSON.parse(studentData);\n  } catch (parseError) {\n    console.error(\"Error parsing student data from localStorage:\", parseError);\n    return;\n  }\n\n  // Log the student data for debugging\n  console.log(\"Populating form with student data:\", student);\n\n  // Helper function to set input value if the element exists\n  const setInputValue = (\n    selector: string,\n    value: string | boolean,\n    isCheckbox: boolean = false\n  ) => {\n    try {\n      const element = document.querySelector(selector) as\n        | HTMLInputElement\n        | HTMLSelectElement\n        | HTMLTextAreaElement\n        | null;\n      if (element) {\n        if (isCheckbox && element instanceof HTMLInputElement) {\n          element.checked = Boolean(value);\n          console.log(`Set checkbox ${selector} to`, value);\n        } else if (\n          element instanceof HTMLInputElement ||\n          element instanceof HTMLSelectElement ||\n          element instanceof HTMLTextAreaElement\n        ) {\n          element.value = String(value);\n          console.log(`Set value of ${selector} to`, value);\n        } else {\n          console.warn(\n            `Element ${selector} is not an input, select, or textarea. Skipping setting its value.`\n          );\n        }\n      } else {\n        console.warn(\n          `Element ${selector} not found. Skipping setting its value.`\n        );\n      }\n    } catch (error) {\n      console.warn(`Error setting value for ${selector}:`, error);\n    }\n  };\n\n  // Set form fields using the helper function\n  setInputValue(\"#firstNameInput\", student.first_name);\n  setInputValue(\"#lastNameInput\", student.last_name);\n  setInputValue(\"#emailInput\", student.email);\n  setInputValue(\"#phoneNumberInput\", student.phone);\n  setInputValue(\"#sendTextsInput\", student.send_texts, true);\n  setInputValue(\"#dobInput\", student.dob);\n  setInputValue(\"#genderInput\", student.gender);\n  setInputValue(\"#schoolInput\", student.school);\n  setInputValue(\"#gradeInput\", student.grade);\n  setInputValue(\"#healthInput\", student.health); // Ensure this selector matches an input/select/textarea\n  setInputValue(\"#dismissalNamesInput\", student.dismissal_names);\n  setInputValue(\"#independentTravelInput\", student.independent_travel, true);\n  setInputValue(\"#familyInvolvedInput\", student.family_involved);\n  setInputValue(\"#photoReleaseInput\", student.photo_release, true);\n\n  // Set profile picture preview using WFImage if the element exists\n  try {\n    const profilePictureImage = new WFImage(\"#profilePictureImage\");\n    if (student.profile_pic && student.profile_pic.url) {\n      profilePictureImage.setImage(student.profile_pic.url);\n      console.log(\"Set profile picture to:\", student.profile_pic.url);\n    } else {\n      profilePictureImage.setImage(\"https://cdn.prod.website-files.com/667f080f36260b9afbdc46b2/667f080f36260b9afbdc46be_placeholder.svg\");\n      console.log(\"Set profile picture to default-image-url\");\n    }\n  } catch (error) {\n    console.warn(\n      \"Element #profilePictureImage not found. Skipping setting profile picture.\"\n    );\n  }\n};\n","import { WFComponent } from \"@xatom/core\";\nimport { WFImage } from \"@xatom/image\";\nimport { apiClient } from \"../api/apiConfig\";\nimport { userAuth } from \"../auth/authConfig\";\n\nexport function toggleError(\n  errorMessageComponent: WFComponent<any>,\n  message: string,\n  show: boolean\n): void {\n  errorMessageComponent.updateTextViaAttrVar({ text: show ? message : \"\" });\n  errorMessageComponent.setStyle({ display: show ? \"flex\" : \"none\" });\n}\n\nexport function setupValidation(\n  inputComponent: WFComponent,\n  errorComponent: WFComponent,\n  validate: () => string,\n  requestErrorComponent?: WFComponent // Optional component to clear on input change\n) {\n  const validateAndUpdate = () => {\n    const errorMessage = validate();\n    toggleError(errorComponent, errorMessage, !!errorMessage);\n    if (requestErrorComponent && errorMessage === \"\") {\n      // Clear request error message when the user is correcting the input\n      toggleError(requestErrorComponent, \"\", false);\n    }\n  };\n\n  // Attach event listeners for real-time validation\n  inputComponent.on(\"input\", validateAndUpdate);\n  inputComponent.on(\"blur\", validateAndUpdate);\n  inputComponent.on(\"change\", validateAndUpdate);\n}\n\nexport function createValidationFunction(\n  inputComponent: WFComponent,\n  validationFn: (input: string) => boolean,\n  errorMessage: string\n): () => string {\n  return () => {\n    const inputElement = inputComponent.getElement() as HTMLInputElement;\n    const isValid = validationFn(inputElement.value);\n    return isValid ? \"\" : errorMessage;\n  };\n}\n\nexport function createCheckboxValidationFunction(\n  checkboxComponent: WFComponent,\n  errorMessage: string\n): () => string {\n  return () => {\n    const checkbox = checkboxComponent.getElement() as HTMLInputElement;\n    return checkbox.checked ? \"\" : errorMessage;\n  };\n}\n\nexport function setupCheckboxValidation(\n  checkboxComponent: WFComponent,\n  checkboxErrorComponent: WFComponent,\n  errorMessage: string\n) {\n  const validate = createCheckboxValidationFunction(\n    checkboxComponent,\n    errorMessage\n  );\n  setupValidation(checkboxComponent, checkboxErrorComponent, validate);\n}\n\nexport function validateSelectedSessions(\n  selectedSessions: { sessionId: string; studentIds: string[] }[],\n  errorMessageComponent: WFComponent<any>,\n  errorMessage: string\n): boolean {\n  const isValid =\n    selectedSessions.length > 0 &&\n    selectedSessions.some((session) => session.studentIds.length > 0);\n\n  if (!isValid) {\n    toggleError(errorMessageComponent, errorMessage, true);\n  } else {\n    toggleError(errorMessageComponent, \"\", false);\n  }\n\n  return isValid;\n}\n\ntype fileUploadResponse = {\n  status: string;\n  url: {\n    profile_pic: {\n      url: string;\n    };\n  };\n};\n\n/**\n * Updates the user's profile picture URL in the authentication system.\n * @param {string} imageUrl - The URL of the uploaded image.\n */\nexport function setProfilePicUrl(imageUrl: string): void {\n  const user = userAuth.getUser();\n  if (user && user.profile) {\n    // Ensure the profile_picture object exists\n    user.profile.profile_pic = user.profile.profile_pic || { url: \"\" };\n\n    // Set the profile picture URL\n    user.profile.profile_pic.url = imageUrl;\n    userAuth.setUser(user);\n    localStorage.setItem(\"auth_user\", JSON.stringify(user));\n  }\n}\n\n/**\n * Handles file upload and displays the uploaded image.\n * @param {WFComponent} fileInput - The WFComponent instance for the file input field.\n * @param {WFComponent} fileInputError - The WFComponent instance for displaying error messages.\n * @param {WFComponent} fileInputSuccess - The WFComponent instance for displaying success messages.\n * @param {string} uploadEndpoint - The endpoint to which the file is sent.\n * @returns {Promise<string>} A promise that resolves with the URL of the uploaded image.\n */\n/**\n * Handles file upload and displays the uploaded image.\n * Only JPEG files less than 2 MB can be uploaded.\n * @param {WFComponent} fileInput - The WFComponent instance for the file input field.\n * @param {WFComponent} fileInputError - The WFComponent instance for displaying error messages.\n * @param {WFComponent} fileInputSuccess - The WFComponent instance for displaying success messages.\n * @param {string} uploadEndpoint - The endpoint to which the file is sent.\n * @returns {Promise<string>} A promise that resolves with the URL of the uploaded image.\n */\nexport function setupFileUpload(\n  fileInput: WFComponent,\n  fileInputError: WFComponent,\n  fileInputSuccess: WFComponent,\n  uploadEndpoint: string\n): Promise<string> {\n  const profilePictureImage = new WFImage(\"#profilePictureImage\");\n  const uploadAnimation = new WFComponent(\"#uploadAnimation\");\n\n  const overlay = new WFComponent(\".drop-zone\");\n  let dragCounter = 0;\n\n  return new Promise<string>((resolve) => {\n    const handleFile = (file: File) => {\n      // Validate file type and size\n      const validTypes = [\"image/jpeg\", \"image/jpg\"];\n      const maxSizeInBytes = 2 * 1024 * 1024; // 2 MB\n\n      if (\n        !validTypes.includes(file.type) &&\n        !/\\.(jpg|jpeg)$/i.test(file.name)\n      ) {\n        const errorMessage = \"Only JPEG images are allowed.\";\n        toggleError(fileInputError, errorMessage, true);\n        // Reset file input value\n        (fileInput.getElement() as HTMLInputElement).value = \"\";\n        return;\n      }\n\n      if (file.size > maxSizeInBytes) {\n        const errorMessage = \"File size must be less than 2 MB.\";\n        toggleError(fileInputError, errorMessage, true);\n        // Reset file input value\n        (fileInput.getElement() as HTMLInputElement).value = \"\";\n        return;\n      }\n\n      // Show upload animation immediately\n      uploadAnimation.setStyle({ display: \"flex\" });\n\n      // Hide error and success messages\n      fileInputError.setStyle({ display: \"none\" });\n      fileInputSuccess.setStyle({ display: \"none\" });\n\n      const reader = new FileReader();\n\n      // Display preview image as soon as the file is loaded into memory\n      reader.onload = (event) => {\n        // Set the preview image for the profile picture\n        const result = event.target?.result as string;\n        profilePictureImage.setImage(result);\n\n        // Hide overlay once the image is set\n        overlay.setStyle({ display: \"none\" });\n      };\n\n      reader.readAsDataURL(file);\n\n      const formData = new FormData();\n      formData.append(\"profile_picture\", file);\n\n      const existingStudent = localStorage.getItem(\"current_student\");\n      if (existingStudent) {\n        const student = JSON.parse(existingStudent);\n        formData.append(\"student_profile_id\", student.id.toString());\n      }\n\n      // Send the file to the server\n      const postRequest = apiClient.post<fileUploadResponse>(uploadEndpoint, {\n        data: formData,\n      });\n\n      postRequest.onData((response) => {\n        if (response.status === \"success\") {\n          const imageUrl = response.url.profile_pic.url;\n\n          // Update the profile picture URL in the user session and local storage\n          setProfilePicUrl(imageUrl);\n\n          // Update the image for other parts of the UI as well\n          profilePictureImage.setImage(imageUrl);\n\n          // Store the URL in local storage\n          localStorage.setItem(\"image_upload\", imageUrl);\n\n          // Show success message and hide upload animation\n          fileInputSuccess.setStyle({ display: \"flex\" });\n          uploadAnimation.setStyle({ display: \"none\" });\n\n          // Resolve with the uploaded image URL\n          resolve(imageUrl);\n        } else {\n          const errorMessage = \"Failed to upload profile picture.\";\n          toggleError(fileInputError, errorMessage, true);\n          uploadAnimation.setStyle({ display: \"none\" });\n          overlay.setStyle({ display: \"none\" });\n          dragCounter = 0;\n          // Reset file input value\n          (fileInput.getElement() as HTMLInputElement).value = \"\";\n        }\n      });\n\n      postRequest.onError((error) => {\n        let errorMessage = \"An error occurred during image upload.\";\n        if (error.response && error.response.data) {\n          errorMessage = error.response.data.message || errorMessage;\n        } else if (error.message) {\n          errorMessage = error.message;\n        }\n\n        // Show error message and hide upload animation\n        toggleError(fileInputError, errorMessage, true);\n        uploadAnimation.setStyle({ display: \"none\" });\n        overlay.setStyle({ display: \"none\" });\n        dragCounter = 0;\n        // Reset file input value\n        (fileInput.getElement() as HTMLInputElement).value = \"\";\n      });\n\n      // Make the API call\n      postRequest.fetch();\n    };\n\n    // Event listener for file input changes\n    fileInput.on(\"change\", () => {\n      const file = (fileInput.getElement() as HTMLInputElement).files?.[0];\n      if (file) {\n        handleFile(file);\n      }\n    });\n\n    // Event listeners for drag-and-drop\n    const dragZoneElement = document.body;\n    dragZoneElement.addEventListener(\"dragenter\", (event) => {\n      event.preventDefault();\n      dragCounter++;\n      if (dragCounter === 1) {\n        overlay.setStyle({ display: \"flex\" });\n      }\n    });\n\n    dragZoneElement.addEventListener(\"dragleave\", () => {\n      dragCounter--;\n      if (dragCounter <= 0) {\n        overlay.setStyle({ display: \"none\" });\n        dragCounter = 0;\n      }\n    });\n\n    dragZoneElement.addEventListener(\"dragover\", (event) => {\n      event.preventDefault();\n    });\n\n    dragZoneElement.addEventListener(\"drop\", (event) => {\n      event.preventDefault();\n\n      const files = event.dataTransfer?.files;\n      if (files?.length) {\n        handleFile(files[0]);\n      }\n\n      overlay.setStyle({ display: \"none\" });\n      dragCounter = 0;\n    });\n  });\n}\n\n// src/utils/formUtils.ts\n\n/**\n * Formats a phone number string to the format (xxx) xxx-xxxx.\n * If the input contains more than 10 digits, it truncates the extra digits.\n * If it contains fewer, it formats as much as possible.\n *\n * @param value - The raw phone number string.\n * @returns The formatted phone number string.\n */\nexport const formatPhoneNumber = (value: string): string => {\n  const cleaned = value.replace(/\\D/g, \"\"); // Remove all non-digit characters\n\n  if (cleaned.length <= 3) {\n    return cleaned;\n  } else if (cleaned.length <= 6) {\n    return `(${cleaned.slice(0, 3)}) ${cleaned.slice(3)}`;\n  } else if (cleaned.length <= 10) {\n    return `(${cleaned.slice(0, 3)}) ${cleaned.slice(3, 6)}-${cleaned.slice(\n      6\n    )}`;\n  } else {\n    // If more than 10 digits, truncate the extra digits\n    return `(${cleaned.slice(0, 3)}) ${cleaned.slice(3, 6)}-${cleaned.slice(\n      6,\n      10\n    )}`;\n  }\n};\n","import { WFComponent } from \"@xatom/core\";\nimport { toggleError } from \"./formUtils\";\n\nexport function validateNotEmpty(input: string | undefined): boolean {\n  return input !== undefined && input.trim() !== \"\";\n}\n\nexport function validateEmail(input: string): boolean {\n  const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n  return emailRegex.test(input);\n}\n\n/**\n * Validates that the email is either empty or correctly formatted.\n * @param value The email input value.\n * @returns True if valid, false otherwise.\n */\nexport const validateEmailOptional = (value: string): boolean => {\n  if (value.trim() === \"\") {\n    // Email is optional, so empty string is valid\n    return true;\n  }\n  // Validate the email format if not empty\n  return validateEmail(value);\n};\n\nexport function validatePasswordRequirements(password: string): boolean {\n  const hasLowercase = /[a-z]/.test(password);\n  const hasUppercase = /[A-Z]/.test(password);\n  const hasDigit = /\\d/.test(password);\n  const hasSpecialChar = /[!@#$%^&*(),.?\":{}|<>]/.test(password);\n  const hasValidLength = password.length >= 8;\n  return (\n    hasLowercase && hasUppercase && hasDigit && hasSpecialChar && hasValidLength\n  );\n}\n\nexport function validateCheckbox(checked: boolean): boolean {\n  return checked;\n}\n\nexport function validatePasswordsMatch(\n  originalPassword: string,\n  confirmPassword: string\n): boolean {\n  return originalPassword === confirmPassword;\n}\n\nexport function validateSelectField(input: string | undefined): boolean {\n  return input !== undefined && input !== \"N/A\";\n}\n\nexport function validatePhoneNumber(input: string): boolean {\n  const phoneRegex = /^\\(\\d{3}\\)\\s\\d{3}-\\d{4}$/;\n  return phoneRegex.test(input);\n}\n\nexport const validatePhoneNumberOptional = (value: string): boolean => {\n  if (value.trim() === \"\") {\n    // Phone number is optional, so empty string is valid\n    return true;\n  }\n  // Validate the phone number format if not empty\n  return validatePhoneNumber(value);\n};\n","// src/modules/pages/studentProfile/editEmergencyDialog.ts\n\nimport { WFComponent, WFFormComponent } from \"@xatom/core\";\nimport { apiClient } from \"../../../api/apiConfig\";\nimport {\n  setupValidation,\n  createValidationFunction,\n  toggleError,\n} from \"../../../utils/formUtils\";\nimport {\n  validateNotEmpty,\n  validateEmailOptional,\n  validatePhoneNumber,\n} from \"../../../utils/validationUtils\";\nimport { getStudentDetails } from \"./getStudentDetails\";\n\n// Define the ApiResponse interface to type the API responses\ninterface ApiResponse {\n  status: string;\n  message?: string;\n  [key: string]: any;\n}\n\nexport const initializeEditEmergencyDialog = (studentId: number) => {\n  const openDialogButton = new WFComponent(\"#openEmergencyContactDialog\");\n  const emergencyDialog = document.getElementById(\n    \"editEmergencyContactDialog\"\n  ) as HTMLDialogElement;\n  const closeDialogButton = new WFComponent(\"#close-emergency-dialog-btn\");\n\n  // Open the dialog when the button is clicked\n  openDialogButton.on(\"click\", async () => {\n    // Fetch the latest student details before populating the form\n    await getStudentDetails(studentId);\n\n    // Populate the form with the latest emergency contact details\n    populateEmergencyContactForm();\n\n    // Update the emergency contact full name on the page\n    updateEmergencyContactFullName();\n\n    emergencyDialog.showModal();\n  });\n\n  // Close the dialog when the close button is clicked\n  closeDialogButton.on(\"click\", () => {\n    emergencyDialog.close();\n  });\n\n  // Initialize the form\n  const form = new WFFormComponent<{\n    emergency_first_name: string;\n    emergency_last_name: string;\n    emergency_email: string;\n    emergency_phone: string;\n    emergency_relationship: string;\n  }>(\"#editEmergencyContactForm\");\n\n  // Initialize error component for form submission errors\n  const formSubmitError = new WFComponent(\"#editEmergencySubmitError\");\n\n  // Define validation rules\n  const fields = [\n    {\n      input: new WFComponent(\"#emergencyFirstNameInput\"),\n      error: new WFComponent(\"#emergencyFirstNameInputError\"),\n      validationFn: validateNotEmpty,\n      message: \"First name is required\",\n    },\n    {\n      input: new WFComponent(\"#emergencyLastNameInput\"),\n      error: new WFComponent(\"#emergencyLastNameInputError\"),\n      validationFn: validateNotEmpty,\n      message: \"Last name is required\",\n    },\n    {\n      input: new WFComponent(\"#emergencyEmailInput\"),\n      error: new WFComponent(\"#emergencyEmailInputError\"),\n      validationFn: validateEmailOptional,\n      message: \"Invalid email format\",\n    },\n    {\n      input: new WFComponent(\"#emergencyPhoneInput\"),\n      error: new WFComponent(\"#emergencyPhoneInputError\"),\n      validationFn: validatePhoneNumber,\n      message: \"Phone number must be in the format (xxx) xxx-xxxx\",\n    },\n    {\n      input: new WFComponent(\"#emergencyRelationshipInput\"),\n      error: new WFComponent(\"#emergencyRelationshipInputError\"),\n      validationFn: validateNotEmpty,\n      message: \"Relationship is required\",\n    },\n  ];\n\n  // Setup validation for each field\n  fields.forEach(({ input, error, validationFn, message }) => {\n    setupValidation(\n      input,\n      error,\n      createValidationFunction(input, validationFn, message),\n      formSubmitError\n    );\n  });\n\n  // Handle form submission\n  form.onFormSubmit(async (formData, event) => {\n    event.preventDefault();\n\n    let isFormValid = true;\n\n    // Validate all fields\n    fields.forEach(({ input, error, validationFn, message }) => {\n      const errorMessage = createValidationFunction(\n        input,\n        validationFn,\n        message\n      )();\n      if (errorMessage) {\n        toggleError(error, errorMessage, true);\n        isFormValid = false;\n      } else {\n        toggleError(error, \"\", false);\n      }\n    });\n\n    if (!isFormValid) {\n      toggleError(formSubmitError, \"Please correct all errors above.\", true);\n      return;\n    } else {\n      toggleError(formSubmitError, \"\", false);\n    }\n\n    // Show loading animation inside submit button\n    const requestingAnimation = new WFComponent(\n      \"#requestingEmergencyAnimation\"\n    );\n    requestingAnimation.setStyle({ display: \"block\" });\n\n    // Disable submit button\n    const submitButton = new WFComponent(\"#editEmergencySubmitButton\");\n    submitButton.setAttribute(\"disabled\", \"true\");\n\n    // Prepare data for API\n    const dataToUpdate = { ...formData };\n\n    try {\n      // Send update request to API\n      const response = (await apiClient\n        .post(`/profiles/students/update_profile/${studentId}`, {\n          data: dataToUpdate,\n        })\n        .fetch()) as ApiResponse;\n\n      if (response.status === \"success\") {\n        // Update successful\n\n        // Refresh the student details on the page\n        await getStudentDetails(studentId);\n\n        // Reset the form with updated information\n        populateEmergencyContactForm();\n\n        // Update the emergency contact full name on the page\n        updateEmergencyContactFullName();\n\n        // Close the dialog after successful request and data refresh\n        emergencyDialog.close();\n      } else {\n        throw new Error(response.message || \"Update failed\");\n      }\n    } catch (error: any) {\n      console.error(\"Error updating emergency contact:\", error);\n      toggleError(formSubmitError, error.message || \"An error occurred\", true);\n    } finally {\n      requestingAnimation.setStyle({ display: \"none\" });\n      submitButton.removeAttribute(\"disabled\");\n    }\n  });\n\n  // Update the emergency contact full name on page load\n  updateEmergencyContactFullName();\n};\n\n// Function to populate the form with existing emergency contact data\nconst populateEmergencyContactForm = () => {\n  const studentData = localStorage.getItem(\"current_student\");\n  if (!studentData) {\n    console.error(\"No student data found\");\n    return;\n  }\n\n  const student = JSON.parse(studentData);\n\n  // Set form fields directly from student object\n  const emergencyFirstNameInput = new WFComponent(\n    \"#emergencyFirstNameInput\"\n  ).getElement() as HTMLInputElement;\n  emergencyFirstNameInput.value = student.emergency_first_name || \"\";\n\n  const emergencyLastNameInput = new WFComponent(\n    \"#emergencyLastNameInput\"\n  ).getElement() as HTMLInputElement;\n  emergencyLastNameInput.value = student.emergency_last_name || \"\";\n\n  const emergencyEmailInput = new WFComponent(\n    \"#emergencyEmailInput\"\n  ).getElement() as HTMLInputElement;\n  emergencyEmailInput.value = student.emergency_email || \"\";\n\n  const emergencyPhoneInput = new WFComponent(\n    \"#emergencyPhoneInput\"\n  ).getElement() as HTMLInputElement;\n  emergencyPhoneInput.value = student.emergency_phone || \"\";\n\n  const emergencyRelationshipInput = new WFComponent(\n    \"#emergencyRelationshipInput\"\n  ).getElement() as HTMLInputElement;\n  emergencyRelationshipInput.value = student.emergency_relationship || \"\";\n};\n\n// Function to update the emergency contact full name on the page\nconst updateEmergencyContactFullName = () => {\n  const studentData = localStorage.getItem(\"current_student\");\n  if (!studentData) {\n    console.error(\"No student data found\");\n    return;\n  }\n\n  const student = JSON.parse(studentData);\n\n  const fullName = `${student.emergency_first_name || \"\"} ${\n    student.emergency_last_name || \"\"\n  }`.trim();\n\n  const fullNameComponent = new WFComponent(\"#emergencyContactFullName\");\n  fullNameComponent.setText(fullName);\n};\n","// src/modules/pages/studentProfile/studentRegistrations.ts\n\nimport { WFDynamicList, WFComponent } from \"@xatom/core\";\nimport { WFImage } from \"@xatom/image\";\nimport { apiClient } from \"../../../api/apiConfig\";\n\n// ----- NEW INTERFACES BASED ON UPDATED RESPONSE -----\n\ninterface ProgramDetails {\n  id: number;\n  name: string;\n  Main_Image: string;\n}\n\ninterface WorkshopDetails {\n  id: number;\n  Name: string;\n}\n\n// The shape of each registration item in the new array\ninterface Registration {\n  id: number;\n  status: string;\n  subscription_type: string;\n  program: number;          // Program ID\n  workshop: number;         // Workshop ID (could be 0 if no workshop)\n  session: number;\n  subscription_id: number;\n  price_id: string;\n  user_id: number;\n  student_profile_id: number;\n  cancellation_reason: string;\n  created_at: number;\n\n  // Nested objects for program/workshop details\n  program_details: ProgramDetails;\n  workshop_details?: WorkshopDetails; // Optional if missing\n\n  // Additional fields if needed\n}\n\n// ----- FETCHING FUNCTION -----\n\n/**\n * Fetch registrations for a student from the new endpoint/response.\n */\nexport async function fetchStudentRegistrations(\n  studentId: number\n): Promise<Registration[]> {\n  try {\n    const response = await apiClient\n      .get(`/dashboard/profiles/student/${studentId}/registrations`)\n      .fetch();\n\n    // The API directly returns an array of Registration objects\n    if (response) {\n      const registrations = response as Registration[];\n      return registrations;\n    } else {\n      console.error(\"No registrations found for the student.\");\n      return [];\n    }\n  } catch (error) {\n    console.error(\"Error fetching student registrations:\", error);\n    return [];\n  }\n}\n\n// ----- INITIALIZER FOR THE DYNAMIC LIST -----\n\n/**\n * Initializes the dynamic list of registrations for a given student.\n * @param studentId - The ID of the student.\n */\nexport async function initializeStudentRegistrations(studentId: number) {\n  // 1) Create the dynamic list\n  const list = new WFDynamicList<Registration>(\"#listRegistration\", {\n    rowSelector: \"#listRegistrationCard\",\n    loaderSelector: \"#listRegistrationloading\",\n    emptySelector: \"#listRegistrationEmpty\",\n  });\n\n  // 2) Customize the loader\n  list.loaderRenderer((loaderElement) => {\n    loaderElement.setStyle({ display: \"flex\" });\n    return loaderElement;\n  });\n\n  // 3) Customize the empty state\n  list.emptyRenderer((emptyElement) => {\n    emptyElement.setStyle({ display: \"flex\" });\n    return emptyElement;\n  });\n\n  // 4) Customize how each row (registration card) is rendered\n  list.rowRenderer(({ rowData, rowElement }) => {\n    const registrationCard = new WFComponent(rowElement);\n\n    // Retrieve the student's name from localStorage\n    const currentStudent = localStorage.getItem(\"current_student\");\n    let studentName = \"N/A\";\n    if (currentStudent) {\n      try {\n        const student = JSON.parse(currentStudent);\n        studentName =\n          `${student.first_name || \"\"} ${student.last_name || \"\"}`.trim() ||\n          \"N/A\";\n      } catch (parseError) {\n        console.error(\n          \"Error parsing current_student from localStorage:\",\n          parseError\n        );\n      }\n    } else {\n      console.warn(\"current_student not found in localStorage.\");\n    }\n\n    // Build the link\n    // rowData.program is the numeric Program ID\n    // rowData.subscription_id is the numeric subscription\n    // rowData.workshop might be 0 if no workshop\n    let href = `/dashboard/registration/subscription/workshop?program=${encodeURIComponent(\n      String(rowData.program)\n    )}&subscription=${encodeURIComponent(String(rowData.subscription_id))}`;\n\n    // If workshop > 0, add workshop param\n    if (rowData.workshop && rowData.workshop !== 0) {\n      href += `&workshop=${encodeURIComponent(String(rowData.workshop))}`;\n    }\n\n    // Set this link on the card element\n    registrationCard.setAttribute(\"href\", href);\n\n    // Add the 'registration-link' class for possible event delegation\n    registrationCard.addCssClass(\"registration-link\");\n\n    // ----- Breadcrumb Data Attributes -----\n    registrationCard.setAttribute(\"data-student-id\", String(rowData.student_profile_id));\n    registrationCard.setAttribute(\"data-student-name\", studentName);\n\n    // The new data has `program_details` and possibly `workshop_details`\n    const programNameStr = rowData.program_details.name || \"\";\n    const workshopNameStr = rowData.workshop_details?.Name || \"\";\n\n    registrationCard.setAttribute(\"data-program-name\", programNameStr);\n    registrationCard.setAttribute(\"data-program-id\", String(rowData.program));\n\n    // If there's a real workshop, store it\n    if (rowData.workshop && rowData.workshop !== 0) {\n      registrationCard.setAttribute(\"data-workshop-name\", workshopNameStr);\n      registrationCard.setAttribute(\"data-workshop-id\", String(rowData.workshop));\n    } else {\n      // No workshop\n      registrationCard.setAttribute(\"data-workshop-name\", \"\");\n      registrationCard.setAttribute(\"data-workshop-id\", \"\");\n    }\n\n    registrationCard.setAttribute(\n      \"data-subscription-id\",\n      String(rowData.subscription_id)\n    );\n\n    // ----- Update UI Elements in the Card -----\n\n    // #cardProgramName => from rowData.program_details.name\n    const programNameCmp = registrationCard.getChildAsComponent(\"#cardProgramName\");\n    if (programNameCmp) {\n      programNameCmp.setText(programNameStr || \"N/A\");\n    } else {\n      console.warn(\"#cardProgramName not found in registrationCard.\");\n    }\n\n    // #cardWorkshopName => from rowData.workshop_details?.Name\n    const workshopNameCmp = registrationCard.getChildAsComponent(\"#cardWorkshopName\");\n    if (workshopNameCmp) {\n      workshopNameCmp.setText(workshopNameStr || \"\");\n    } else {\n      console.warn(\"#cardWorkshopName not found in registrationCard.\");\n    }\n\n    // #cardRegistrationImage => from rowData.program_details.Main_Image\n    // (The new response does not include a direct image_url for each registration,\n    //  so we'll assume the program image is the fallback.)\n    const registrationImageElement = registrationCard.getChildAsComponent(\n      \"#cardRegistrationImage\"\n    );\n    if (registrationImageElement) {\n      const registrationImage = new WFImage(registrationImageElement.getElement());\n      if (rowData.program_details?.Main_Image) {\n        registrationImage.setImage(rowData.program_details.Main_Image);\n      } else {\n        registrationImage.setImage(\n          \"https://cdn.prod.website-files.com/667f080f36260b9afbdc46b2/667f080f36260b9afbdc46be_placeholder.svg\"\n        );\n      }\n    } else {\n      console.warn(\"#cardRegistrationImage not found in registrationCard.\");\n    }\n\n    // ----- Status Pills (#cardActivePill, #cardDepositPill, etc.) -----\n    const activePill = registrationCard.getChildAsComponent(\"#cardActivePill\");\n    const depositPill = registrationCard.getChildAsComponent(\"#cardDepositPill\");\n    if (activePill && depositPill) {\n      if (rowData.status === \"Active\") {\n        activePill.setStyle({ display: \"block\" });\n        depositPill.setStyle({ display: \"none\" });\n      } else if (rowData.status === \"Deposit Paid\") {\n        activePill.setStyle({ display: \"none\" });\n        depositPill.setStyle({ display: \"block\" });\n      } else {\n        // Handle other statuses if needed\n        activePill.setStyle({ display: \"none\" });\n        depositPill.setStyle({ display: \"none\" });\n      }\n    } else {\n      console.warn(\n        \"Status pills (#cardActivePill or #cardDepositPill) not found in registrationCard.\"\n      );\n    }\n\n    // Finally, ensure the card is displayed\n    rowElement.setStyle({ display: \"block\" });\n\n    // Return rowElement to WFDynamicList\n    return rowElement;\n  });\n\n  // 5) Fetch and load the registrations\n  try {\n    list.changeLoadingStatus(true);\n\n    const registrations = await fetchStudentRegistrations(studentId);\n    // Optionally sort descending by created_at\n    registrations.sort((a, b) => b.created_at - a.created_at);\n\n    list.setData(registrations);\n    list.changeLoadingStatus(false);\n  } catch (error) {\n    console.error(\"Error initializing student registrations:\", error);\n    list.setData([]); // Empty state\n    list.changeLoadingStatus(false);\n  }\n}\n","// src/modules/pages/studentProfile/deleteStudent.ts\n\nimport { WFComponent } from \"@xatom/core\";\nimport { apiClient } from \"../../../api/apiConfig\";\nimport { fetchStudentRegistrations } from \"./studentRegistrations\"; // Import the fetch function\n\n/**\n * Initializes the delete student functionality.\n * @param studentId - The ID of the student to be deleted.\n */\nexport function initializeDeleteStudent(studentId: number) {\n  // Attempt to retrieve and initialize the \"Open Delete Dialog\" button\n  let openDeleteDialogBtn: WFComponent | null = null;\n  try {\n    openDeleteDialogBtn = new WFComponent(\"#openDeleteDialog\");\n  } catch (error) {\n    console.warn(\n      \"Element #openDeleteDialog not found. Skipping initialization of delete dialog opener.\"\n    );\n  }\n\n  // Attempt to retrieve the delete student dialog element\n  const deleteStudentDialogElement = document.getElementById(\n    \"deleteStudentDialog\"\n  ) as HTMLDialogElement | null;\n\n  // Attempt to retrieve and initialize the \"Close Delete Dialog\" button\n  let closeDeleteDialogBtn: WFComponent | null = null;\n  try {\n    closeDeleteDialogBtn = new WFComponent(\"#close-delete-dialog-btn\");\n  } catch (error) {\n    console.warn(\n      \"Element #close-delete-dialog-btn not found. Skipping initialization of delete dialog closer.\"\n    );\n  }\n\n  // Attempt to retrieve and initialize the \"Final Delete\" button\n  let deleteStudentFinalBtn: WFComponent | null = null;\n  try {\n    deleteStudentFinalBtn = new WFComponent(\"#deleteStudentFinal\");\n  } catch (error) {\n    console.warn(\n      \"Element #deleteStudentFinal not found. Skipping initialization of final delete button.\"\n    );\n  }\n\n  // Attempt to retrieve and initialize the \"Delete Student Error\" component\n  let deleteStudentError: WFComponent | null = null;\n  try {\n    deleteStudentError = new WFComponent(\"#deleteStudentError\");\n  } catch (error) {\n    console.warn(\n      \"Element #deleteStudentError not found. Skipping initialization of delete student error display.\"\n    );\n  }\n\n  // Attempt to retrieve and initialize the \"Page Main\" component\n  let pageMain: WFComponent | null = null;\n  try {\n    pageMain = new WFComponent(\".page_main\");\n  } catch (error) {\n    console.warn(\n      \"Element with class .page_main not found. Skipping initialization of page main.\"\n    );\n  }\n\n  // Attempt to retrieve and initialize the loader animations\n  let requestingAnimation: WFComponent | null = null;\n  let deleteRequestingAnimation: WFComponent | null = null;\n  try {\n    requestingAnimation = new WFComponent(\"#requestingAnimation\");\n    deleteRequestingAnimation = new WFComponent(\"#deleteRequestingAnimation\");\n    // Initially hide the loader animations\n    requestingAnimation.setStyle({ display: \"none\" });\n    deleteRequestingAnimation.setStyle({ display: \"none\" });\n  } catch (error) {\n    console.warn(\n      \"Loader animation elements not found. Skipping initialization of loader animations.\"\n    );\n  }\n\n  /**\n   * Shows the delete confirmation dialog and updates the data-brand attribute.\n   */\n  const showDeleteDialog = () => {\n    if (deleteStudentDialogElement && pageMain) {\n      deleteStudentDialogElement.showModal(); // Display the dialog\n      pageMain.setAttribute(\"data-brand\", \"6\"); // Update data-brand to 6\n    } else {\n      console.warn(\n        \"Cannot show delete dialog because either deleteStudentDialogElement or pageMain is not available.\"\n      );\n    }\n  };\n\n  /**\n   * Hides the delete confirmation dialog and reverts the data-brand attribute.\n   */\n  const hideDeleteDialog = () => {\n    if (deleteStudentDialogElement && pageMain && deleteStudentError) {\n      deleteStudentDialogElement.close(); // Close the dialog\n      pageMain.setAttribute(\"data-brand\", \"2\"); // Revert data-brand to 2\n      deleteStudentError.setStyle({ display: \"none\" }); // Hide any previous error messages\n    } else {\n      console.warn(\n        \"Cannot hide delete dialog because either deleteStudentDialogElement, pageMain, or deleteStudentError is not available.\"\n      );\n    }\n  };\n\n  /**\n   * Handles the deletion of the student.\n   */\n  const handleDeleteStudent = async () => {\n    try {\n      // Fetch the current registrations for the student\n      const registrations = await fetchStudentRegistrations(studentId);\n\n      // Check if there are any current registrations\n      if (registrations.length > 0) {\n        alert(\n          \"You must remove this student from any current registrations before you may delete them.\"\n        );\n        return; // Exit the function early; do not proceed with deletion\n      }\n\n      // Hide previous error messages if available\n      if (deleteStudentError) {\n        deleteStudentError.setStyle({ display: \"none\" });\n      }\n\n      // Show the loader animation and disable the delete button if available\n      if (deleteRequestingAnimation && deleteStudentFinalBtn) {\n        deleteRequestingAnimation.setStyle({ display: \"flex\" });\n        deleteStudentFinalBtn.setAttribute(\"disabled\", \"true\");\n      }\n\n      // Send the DELETE request to the API\n      const response = await apiClient\n        .delete(`/profiles/student/${studentId}`)\n        .fetch();\n\n      // Hide the loader animation and re-enable the delete button if available\n      if (deleteRequestingAnimation && deleteStudentFinalBtn) {\n        deleteRequestingAnimation.setStyle({ display: \"none\" });\n        deleteStudentFinalBtn.removeAttribute(\"disabled\");\n      }\n\n      if (response && response.status === 200) {\n        // Successfully deleted the student\n        // Optionally, display a success message before redirecting\n        alert(\"Student has been successfully deleted.\");\n\n        // Redirect to the students list page or another appropriate page\n        window.location.href = \"/dashboard\"; // Adjust the URL as needed\n      } else {\n        // Handle unexpected successful responses\n        throw new Error(\"Unexpected response from the server.\");\n      }\n    } catch (error: any) {\n      console.error(\"Error deleting student:\", error);\n\n      // Hide the loader animation and re-enable the delete button if available\n      if (deleteRequestingAnimation && deleteStudentFinalBtn) {\n        deleteRequestingAnimation.setStyle({ display: \"none\" });\n        deleteStudentFinalBtn.removeAttribute(\"disabled\");\n      }\n\n      // Display the error message if the error component exists\n      if (deleteStudentError) {\n        deleteStudentError.setStyle({ display: \"flex\" });\n        try {\n          deleteStudentError\n            .getChildAsComponent(\".error-text\")\n            .setText(\n              error.message ||\n                \"An unexpected error occurred while deleting the student.\"\n            );\n        } catch (childError) {\n          console.warn(\n            \"Could not set text for .error-text within #deleteStudentError:\",\n            childError\n          );\n        }\n      }\n    }\n  };\n\n  // Event listener to open the delete dialog if the open button and dialog exist\n  if (openDeleteDialogBtn && deleteStudentDialogElement && pageMain) {\n    openDeleteDialogBtn.on(\"click\", showDeleteDialog);\n  } else {\n    console.warn(\n      \"Cannot attach click event to #openDeleteDialog because required elements are missing.\"\n    );\n  }\n\n  // Event listener to close the delete dialog if the close button and dialog exist\n  if (\n    closeDeleteDialogBtn &&\n    deleteStudentDialogElement &&\n    pageMain &&\n    deleteStudentError\n  ) {\n    closeDeleteDialogBtn.on(\"click\", hideDeleteDialog);\n  } else {\n    console.warn(\n      \"Cannot attach click event to #close-delete-dialog-btn because required elements are missing.\"\n    );\n  }\n\n  // Event listener for the final delete action if the delete button exists\n  if (deleteStudentFinalBtn) {\n    deleteStudentFinalBtn.on(\"click\", handleDeleteStudent);\n  } else {\n    console.warn(\n      \"Cannot attach click event to #deleteStudentFinal because the element is missing.\"\n    );\n  }\n}\n","// src/modules/pages/studentProfile/caregiverView.ts\n\nimport { WFComponent, WFFormComponent } from \"@xatom/core\";\n\n/**\n * Initializes the caregiver view by adjusting the DOM and form functionalities\n * based on the caregiver status of the current student.\n */\nexport const initializeCaregiverView = () => {\n  // Retrieve the current student data from localStorage\n  const studentData = localStorage.getItem(\"current_student\");\n  if (!studentData) {\n    console.error(\"No student data found in localStorage.\");\n    return;\n  }\n\n  let student: any;\n  try {\n    student = JSON.parse(studentData);\n  } catch (parseError) {\n    console.error(\"Error parsing student data from localStorage:\", parseError);\n    return;\n  }\n\n  // Check if the current user is a caregiver\n  if (student.caregiver === true) {\n    // List of DOM selectors to remove for caregivers\n    const selectorsToRemove = [\n      \"#openEditStudentDialog\",\n      \"#openDeleteDialog\",\n      \"#editEmergencySubmitButton\",\n      \"#editStudentDialog\",\n      \"#deleteStudentDialog\",\n    ];\n\n    // Iterate over each selector and remove the corresponding element from the DOM\n    selectorsToRemove.forEach((selector) => {\n      try {\n        const component = new WFComponent(selector);\n        component.remove();\n        console.log(`Removed element with selector: ${selector}`);\n      } catch (error) {\n        console.error(\n          `Failed to remove element with selector ${selector}:`,\n          error\n        );\n      }\n    });\n\n    // Disable the edit emergency contact form to prevent submission\n    try {\n      const editEmergencyForm = new WFFormComponent(\n        \"#editEmergencyContactForm\"\n      );\n      editEmergencyForm.disableForm();\n      console.log(\"Disabled #editEmergencyContactForm to prevent submissions.\");\n    } catch (error) {\n      console.error(\"Failed to disable #editEmergencyContactForm:\", error);\n    }\n  } else {\n    console.log(\"Current user is not a caregiver. No changes applied.\");\n  }\n};\n","// src/modules/pages/studentProfile/registrationBreadcrumbs.ts\n\nimport { WFComponent } from \"@xatom/core\";\n\n/**\n * Interface representing the structure of caregiver_breadcrumbs.\n */\ninterface CaregiverBreadcrumbs {\n  student_id: number;\n  student_name: string;\n  workshop_name: string;\n  workshop_id: string;\n  program_name: string;\n  program_id: string;\n  subscription_id: number;\n}\n\n/**\n * Initializes the event listeners for registration links to set caregiver_breadcrumbs in localStorage.\n */\nexport const initializeRegistrationBreadcrumbs = () => {\n  // Define the selector for registration links.\n  // Update this selector based on the actual structure of your registration links.\n  const registrationLinkSelector = \".registration-link\";\n\n  /**\n   * Event handler for registration link clicks.\n   * @param event - The click event.\n   */\n  const handleRegistrationClick = (event: Event) => {\n    // Prevent the default action if necessary.\n    // Uncomment the next line if you want to handle navigation manually.\n    // event.preventDefault();\n\n    const target = event.target as HTMLElement;\n\n    // Traverse up the DOM to find the registration link element if the click is on a child element.\n    const registrationLink = target.closest(\n      registrationLinkSelector\n    ) as HTMLElement | null;\n\n    if (!registrationLink) {\n      console.warn(\"Clicked element is not a registration link.\");\n      return;\n    }\n\n    // Extract data attributes from the registration link.\n    const studentId = parseInt(\n      registrationLink.getAttribute(\"data-student-id\") || \"0\",\n      10\n    );\n    const studentName =\n      registrationLink.getAttribute(\"data-student-name\") || \"\";\n    const workshopName =\n      registrationLink.getAttribute(\"data-workshop-name\") || \"\";\n    const workshopId = registrationLink.getAttribute(\"data-workshop-id\") || \"\";\n    const programName =\n      registrationLink.getAttribute(\"data-program-name\") || \"\";\n    const programId = registrationLink.getAttribute(\"data-program-id\") || \"\";\n    const subscriptionId = parseInt(\n      registrationLink.getAttribute(\"data-subscription-id\") || \"0\",\n      10\n    );\n\n    // Validate the extracted data.\n    if (\n      !studentId ||\n      !studentName ||\n      !programName ||\n      !programId ||\n      !subscriptionId\n    ) {\n      console.error(\n        \"Incomplete registration data. Cannot set caregiver_breadcrumbs.\"\n      );\n      return;\n    }\n\n    // Create the caregiver_breadcrumbs object.\n    const caregiverBreadcrumbs: CaregiverBreadcrumbs = {\n      student_id: studentId,\n      student_name: studentName,\n      workshop_name: workshopName,\n      workshop_id: workshopId,\n      program_name: programName,\n      program_id: programId,\n      subscription_id: subscriptionId,\n    };\n\n    // Store the object in localStorage.\n    try {\n      localStorage.setItem(\n        \"caregiver_breadcrumbs\",\n        JSON.stringify(caregiverBreadcrumbs)\n      );\n      console.log(\n        \"caregiver_breadcrumbs set in localStorage:\",\n        caregiverBreadcrumbs\n      );\n    } catch (error) {\n      console.error(\n        \"Failed to set caregiver_breadcrumbs in localStorage:\",\n        error\n      );\n    }\n  };\n\n  /**\n   * Attaches the event listener using event delegation.\n   */\n  const attachEventListener = () => {\n    // Attach the event listener to a common ancestor.\n    // Update the selector based on your DOM structure. Here, we use the document body.\n    const commonAncestor = document.body;\n\n    if (!commonAncestor) {\n      console.error(\"Common ancestor for event delegation not found.\");\n      return;\n    }\n\n    commonAncestor.addEventListener(\"click\", handleRegistrationClick);\n    console.log(\"Event listener for registration links attached.\");\n  };\n\n  // Initialize the event listeners.\n  attachEventListener();\n};\n","// src/pages/listStudentFiles.ts\n\nimport { WFDynamicList, WFComponent } from \"@xatom/core\";\nimport { apiClient } from \"../../../api/apiConfig\";\n\n// Define the FileItem interface based on the API response\ninterface FileItem {\n  id: number;\n  file_name: string;\n  file_url: string;\n  program_id?: string | null;\n  workshop_id?: string | null;\n  session_id?: string | null;\n  user_id: number;\n  created_at: number;\n}\n\n// Function to get the student_id from URL parameters\nfunction getStudentIdFromUrl(): string | null {\n  const urlParams = new URLSearchParams(window.location.search);\n  return urlParams.get(\"id\");\n}\n\n// Function to fetch files for a specific student\nexport async function fetchStudentFiles(\n  studentId: string\n): Promise<FileItem[]> {\n  try {\n    const getFiles = apiClient.get<FileItem[]>(\n      `/student_files/student/${studentId}`\n    );\n    const response = await getFiles.fetch();\n    return response;\n  } catch (error) {\n    console.error(\"Error fetching files for student:\", error);\n    throw error;\n  }\n}\n\n// Function to initialize and render the dynamic file list for a student\nexport async function initializeDynamicStudentFileList(\n  containerSelector: string\n) {\n  // Get the student ID from the URL\n  const studentId = getStudentIdFromUrl();\n  if (!studentId) {\n    console.error(\"No student ID provided in URL\");\n    return;\n  }\n\n  // Initialize a new instance of WFDynamicList for Files\n  const list = new WFDynamicList<FileItem>(containerSelector, {\n    rowSelector: \"#fileCard\", // Using ID selector for template\n    loaderSelector: \"#filesloading\", // Selector for the loader\n    emptySelector: \"#filesEmpty\", // Selector for the empty state\n  });\n\n  // Customize the rendering of the loader\n  list.loaderRenderer((loaderElement) => {\n    loaderElement.setStyle({\n      display: \"flex\",\n    });\n    return loaderElement;\n  });\n\n  // Customize the rendering of the empty state\n  list.emptyRenderer((emptyElement) => {\n    emptyElement.setStyle({\n      display: \"flex\",\n    });\n    return emptyElement;\n  });\n\n  // Customize the rendering of list items (File Cards)\n  list.rowRenderer(({ rowData, rowElement }) => {\n    const fileCard = new WFComponent(rowElement);\n\n    // Set the fileCard's href to file_url\n    fileCard.setAttribute(\"href\", rowData.file_url);\n\n    // Set the fileName to file_name\n    const fileName = fileCard.getChildAsComponent(\"#fileName\");\n    fileName.setText(rowData.file_name);\n\n    // Show the list item\n    rowElement.setStyle({\n      display: \"block\",\n    });\n\n    return rowElement;\n  });\n\n  // Load and display file data\n  try {\n    // Enable the loading state\n    list.changeLoadingStatus(true);\n\n    const files = await fetchStudentFiles(studentId);\n\n    // Sort files alphabetically by file_name\n    files.sort((a, b) => a.file_name.localeCompare(b.file_name));\n\n    // Set the data to be displayed in the dynamic list\n    list.setData(files);\n\n    // Disable the loading state\n    list.changeLoadingStatus(false);\n  } catch (error) {\n    console.error(\"Error loading files:\", error);\n\n    // If there's an error, set an empty array to trigger the empty state\n    list.setData([]);\n\n    // Disable the loading state\n    list.changeLoadingStatus(false);\n  }\n}\n"],"names":["modules","entry","mainEntry","parcelRequireName","globalName","globalObject","globalThis","self","window","global","previousRequire","cache","nodeRequire","module","require","bind","newRequire","name","jumped","currentRequire","err","Error","code","localRequire","resolve","x","id","Module","call","exports","res","isParcelRequire","moduleName","bundle","parent","register","Object","defineProperty","get","i","length","parcelHelpers","defineInteropFlag","export","initializeStudentProfilePage","_getStudentDetails","_editStudentDialog","_editEmergencyDialog","_studentRegistrations","_deleteStudent","_caregiverView","_registrationBreadcrumbs","_listStudentFiles","studentIdParam","urlParams","URLSearchParams","location","search","console","error","studentId","parseInt","getStudentDetails","initializeCaregiverView","initializeEditStudentDialog","initializeEditEmergencyDialog","initializeDynamicStudentFileList","initializeStudentRegistrations","initializeDeleteStudent","initializeRegistrationBreadcrumbs","addEventListener","localStorage","removeItem","_apiConfig","_core","_image","loadingSpinner","WFComponent","log","setStyle","display","response","apiClient","fetch","triggerSuccessEvent","studentBreadcrumb","setText","student","first_name","last_name","studentFullName","studentProfilePicture","WFImage","profile_pic","url","setImage","studentEmail","email","studentPhone","phone","studentDob","dob","studentGender","gender","studentSchool","school","studentGrade","grade","studentEthnicity","ethnicity","studentHealth","health","studentDismissal","dismissal_names","studentTextTrue","studentTextFalse","send_texts","studentTravelTrue","studentTravelFalse","independent_travel","studentPhotoTrue","studentPhotoFalse","photo_release","studentApprovedPill","studentPendingPill","Status","setItem","JSON","stringify","alert","history","back","message","selector","successTrigger","document","querySelector","HTMLElement","click","o","t","u","c","set","enumerable","configurable","constructor","getImageConfig","_config","getSrc","getAttribute","getSizes","getSrcSet","getLoading","onLoad","on","off","onLoadError","setAttribute","removeAttribute","src","srcSet","sizes","e","map","size","join","loading","keys","forEach","hasOwnProperty","n","_formUtils","_validationUtils","openEditDialogButton","warn","editStudentDialogElement","getElementById","closeDialogButton","populateEditStudentForm","showModal","close","form","WFFormComponent","formSubmitError","fields","input","validationFn","validateNotEmpty","validateEmailOptional","validatePhoneNumber","validateSelectField","setupValidation","createValidationFunction","onFormSubmit","formData","event","preventDefault","requestingAnimation","isFormValid","errorMessage","toggleError","submitButton","dataToUpdate","post","data","status","profilePictureInput","profilePictureInputError","profilePictureInputSuccess","setupFileUpload","studentData","getItem","parse","parseError","setInputValue","value","isCheckbox","element","HTMLInputElement","checked","Boolean","HTMLSelectElement","HTMLTextAreaElement","String","family_involved","profilePictureImage","createCheckboxValidationFunction","setupCheckboxValidation","validateSelectedSessions","setProfilePicUrl","formatPhoneNumber","_authConfig","errorMessageComponent","show","updateTextViaAttrVar","text","inputComponent","errorComponent","validate","requestErrorComponent","validateAndUpdate","isValid","inputElement","getElement","checkboxComponent","checkbox","checkboxErrorComponent","selectedSessions","some","session","studentIds","imageUrl","user","userAuth","getUser","profile","setUser","fileInput","fileInputError","fileInputSuccess","uploadEndpoint","uploadAnimation","overlay","dragCounter","Promise","handleFile","file","validTypes","includes","type","test","reader","FileReader","onload","result","target","readAsDataURL","FormData","append","existingStudent","toString","postRequest","onData","onError","files","dragZoneElement","body","dataTransfer","cleaned","replace","slice","undefined","trim","validateEmail","emailRegex","validatePasswordRequirements","validateCheckbox","validatePasswordsMatch","validatePhoneNumberOptional","password","hasLowercase","hasUppercase","hasDigit","hasSpecialChar","hasValidLength","originalPassword","confirmPassword","phoneRegex","openDialogButton","emergencyDialog","populateEmergencyContactForm","updateEmergencyContactFullName","emergencyFirstNameInput","emergency_first_name","emergencyLastNameInput","emergency_last_name","emergencyEmailInput","emergency_email","emergencyPhoneInput","emergency_phone","emergencyRelationshipInput","emergency_relationship","fullName","fullNameComponent","fetchStudentRegistrations","list","WFDynamicList","rowSelector","loaderSelector","emptySelector","loaderRenderer","loaderElement","emptyRenderer","emptyElement","rowRenderer","rowData","rowElement","registrationCard","currentStudent","studentName","href","encodeURIComponent","program","subscription_id","workshop","addCssClass","student_profile_id","programNameStr","program_details","workshopNameStr","workshop_details","Name","programNameCmp","getChildAsComponent","workshopNameCmp","registrationImageElement","registrationImage","Main_Image","activePill","depositPill","changeLoadingStatus","registrations","sort","a","b","created_at","setData","openDeleteDialogBtn","deleteStudentDialogElement","closeDeleteDialogBtn","deleteStudentFinalBtn","deleteStudentError","pageMain","deleteRequestingAnimation","handleDeleteStudent","delete","childError","caregiver","selectorsToRemove","component","remove","editEmergencyForm","disableForm","handleRegistrationClick","registrationLink","closest","workshopName","workshopId","programName","programId","subscriptionId","caregiverBreadcrumbs","student_id","student_name","workshop_name","workshop_id","program_name","program_id","attachEventListener","commonAncestor","fetchStudentFiles","getFiles","containerSelector","fileCard","file_url","fileName","file_name","localeCompare"],"version":3,"file":"studentProfile.cb57278e.js.map"}