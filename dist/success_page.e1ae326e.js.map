{"mappings":"C,A,S,C,C,C,C,C,C,C,C,C,E,I,E,A,a,O,W,W,A,a,O,K,K,A,a,O,O,O,A,a,O,O,O,C,E,E,A,Y,O,C,C,E,E,C,C,E,C,E,E,K,E,C,E,E,A,a,O,Q,A,Y,O,O,O,E,O,O,C,I,C,Q,S,E,C,C,C,E,G,C,C,C,E,C,C,G,C,C,C,E,C,C,I,E,A,Y,O,C,C,E,E,C,C,E,C,G,C,G,E,O,E,E,C,G,G,E,O,E,E,C,G,G,G,A,U,O,E,O,E,G,I,E,A,M,uB,E,I,O,E,I,C,mB,C,C,E,O,C,S,C,E,I,E,C,C,E,C,E,C,E,C,O,A,M,E,E,C,E,E,K,C,C,E,I,E,C,C,E,C,I,E,M,C,G,C,C,E,C,E,C,I,C,E,O,C,E,E,E,O,C,I,C,C,O,C,C,E,C,O,C,S,E,C,E,I,E,E,O,C,G,M,A,C,I,E,C,E,E,E,C,C,E,e,C,C,E,E,M,C,S,C,E,I,C,E,C,E,I,C,M,C,E,I,C,O,C,C,C,E,E,O,C,E,E,K,C,E,E,M,C,E,E,Q,C,S,C,C,C,E,C,C,E,C,C,S,C,C,C,E,E,O,C,C,E,C,E,A,E,O,c,C,E,O,C,I,W,O,C,C,E,A,C,G,C,C,E,C,E,I,I,E,E,E,E,M,C,I,E,C,C,E,C,E,C,Q,C,S,C,C,C,C,C,E,I,E,E,kD,E,iB,C,GC+Ba,EAAA,MAAA,CAAA,EAAA,wBAAA,IAAA,GA7Bb,IAAA,EAAA,EAAA,0BACA,EAAA,EAAA,oBACA,EAAA,EAAA,sBAGA,IAAM,EAAe,KACnB,IAAM,EAAS,IAAI,gBAAgB,OAAO,QAAQ,CAAC,MAAM,EACzD,MAAO,CACL,eAAgB,EAAO,GAAG,CAAC,gBAC3B,iBAAkB,EAAO,GAAG,CAAC,mBAC7B,qBAAsB,EAAO,GAAG,CAAC,sBACnC,CACF,EAGM,EAA0B,AAAC,IAC/B,IAAM,EAAe,EAAE,CACvB,IAAK,IAAI,EAAI,EAAG,EAAI,aAAa,MAAM,CAAE,IAAK,CAC5C,IAAM,EAAM,aAAa,GAAG,CAAC,GACzB,GAAO,CAAC,EAAW,QAAQ,CAAC,IAC9B,EAAa,IAAI,CAAC,EAEtB,CACA,EAAa,OAAO,CAAC,AAAC,IACpB,aAAa,UAAU,CAAC,EAC1B,EACF,EAGa,EAAwB,KACnC,QAAQ,GAAG,CAAC,6BAGZ,EAAwB,CAAC,cAAe,YAAa,YAAY,EAGjE,GAAM,CAAE,eAAA,CAAc,CAAE,iBAAA,CAAgB,CAAE,qBAAA,CAAoB,CAAE,CAC9D,IAGE,IACF,QAAQ,GAAG,CAAC,iCACZ,AAAA,CAAA,EAAA,EAAA,yBAAwB,AAAxB,KAIE,IACF,QAAQ,GAAG,CAAC,2BACZ,AAAA,CAAA,EAAA,EAAA,mBAAkB,AAAlB,KAIE,GACF,QAAQ,GAAG,CAAC,6BACZ,AAAA,CAAA,EAAA,EAAA,qBAAoB,AAApB,KAEA,QAAQ,IAAI,CACV,0FAGN,C,E,C,yB,Q,mB,Q,qB,Q,iD,O,E,C,M,C,S,C,C,C,C,C,E,I,E,E,kD,E,iB,C,GCmOa,EAAA,MAAA,CAAA,EAAA,4BAAA,IAAA,GA/Rb,IAAA,EAAA,EAAA,eACA,EAAA,EAAA,gBACA,EAAA,EAAA,sBAmFA,OAAM,EAYJ,YAAY,CAAc,CAAE,CAC1B,IAAM,EAAc,SAAS,cAAc,CAAC,GAC5C,GAAI,CAAC,EACH,MAAM,AAAI,MAAM,CAAC,iBAAiB,EAAE,EAAO,YAAY,CAAC,CAI1D,CAAA,IAAI,CAAC,IAAI,CAAG,IAAI,EAAA,WAAW,CAAC,GAG5B,IAAI,CAAC,KAAK,CAAG,IAAI,EAAA,OAAM,CACrB,IAAI,CAAC,IAAI,CAAC,mBAAmB,CAAC,0BAA0B,UAAU,IAEpE,IAAI,CAAC,WAAW,CAAG,IAAI,CAAC,IAAI,CAAC,mBAAmB,CAAC,oBACjD,IAAI,CAAC,YAAY,CAAG,IAAI,CAAC,IAAI,CAAC,mBAAmB,CAAC,qBAClD,IAAI,CAAC,gBAAgB,CAAG,IAAI,CAAC,IAAI,CAAC,mBAAmB,CACnD,yBAEF,IAAI,CAAC,WAAW,CAAG,IAAI,CAAC,IAAI,CAAC,mBAAmB,CAAC,oBACjD,IAAI,CAAC,UAAU,CAAG,IAAI,CAAC,IAAI,CAAC,mBAAmB,CAAC,mBAChD,IAAI,CAAC,WAAW,CAAG,IAAI,CAAC,IAAI,CAAC,mBAAmB,CAAC,oBACjD,IAAI,CAAC,cAAc,CAAG,IAAI,EAAA,WAAW,CAAC,mBAGtC,IAAI,CAAC,SAAS,CAAG,GAGZ,IAAI,CAAC,WAAW,EACnB,QAAQ,IAAI,CACV,6EAGC,IAAI,CAAC,YAAY,EACpB,QAAQ,IAAI,CACV,8EAGC,IAAI,CAAC,gBAAgB,EACxB,QAAQ,IAAI,CACV,kFAGC,IAAI,CAAC,WAAW,EACnB,QAAQ,IAAI,CACV,6EAGC,IAAI,CAAC,UAAU,EAClB,QAAQ,IAAI,CACV,4EAGC,IAAI,CAAC,WAAW,EACnB,QAAQ,IAAI,CACV,6EAGC,IAAI,CAAC,KAAK,EACb,QAAQ,IAAI,CACV,mFAGC,IAAI,CAAC,cAAc,EACtB,QAAQ,IAAI,CAAC,0DAEjB,CAGA,SAAS,CAAkC,CAAE,CAC3C,QAAQ,GAAG,CAAC,2CAGZ,IAAI,CAAC,SAAS,CAAG,EAAK,OAAO,CAAC,EAAE,CAAC,QAAQ,GACzC,QAAQ,GAAG,CAAC,qBAAsB,IAAI,CAAC,SAAS,EAGhD,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,EAAK,OAAO,CAAC,IAAI,EAC1C,QAAQ,GAAG,CAAC,mBAAoB,EAAK,OAAO,CAAC,IAAI,EAGjD,IAAM,EAAe,EAAK,QAAQ,CAAG,EAAK,QAAQ,CAAC,IAAI,CAAG,GAC1D,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,GAC1B,QAAQ,GAAG,CAAC,oBAAqB,GAGjC,IAAI,CAAC,gBAAgB,CAAC,OAAO,CAAC,EAAK,iBAAiB,EACpD,QAAQ,GAAG,CAAC,wBAAyB,EAAK,iBAAiB,EAG3D,IAAM,EAAgB,EAAK,gBAAgB,CACvC,IAAI,KAAK,EAAK,gBAAgB,EAAE,kBAAkB,GAClD,wBACJ,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,GACzB,QAAQ,GAAG,CAAC,mBAAoB,GAIhC,IAAM,EAAW,EAAK,QAAQ,EAAE,YAAc,EAAK,OAAO,CAAC,UAAU,CAC/D,EACJ,EAAK,QAAQ,EAAE,sBAAwB,EAAK,OAAO,CAAC,oBAAoB,CAGtE,IACF,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,GAGpB,AAFmB,IAAI,CAAC,KAAK,CAAC,UAAU,GAE7B,GAAG,CAAG,EAAK,QAAQ,CAC1B,EAAK,QAAQ,CAAC,IAAI,EAAI,uBACtB,EAAK,OAAO,CAAC,IAAI,EAAI,sBACzB,QAAQ,GAAG,CAAC,6CAIV,IACF,IAAI,CAAC,cAAc,CAAC,OAAO,CAAC,GAE5B,AAD8B,IAAI,CAAC,cAAc,CAAC,UAAU,GACtC,KAAK,CAAC,OAAO,CAAG,QACtC,QAAQ,GAAG,CAAC,uCAId,IAAM,EAAS,EAAK,MAAM,CAAC,WAAW,EAClC,AAAW,CAAA,WAAX,GACF,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,UACxB,IAAI,CAAC,UAAU,CAAC,UAAU,GAAG,KAAK,CAAC,OAAO,CAAG,QAC7C,IAAI,CAAC,WAAW,CAAC,UAAU,GAAG,KAAK,CAAC,OAAO,CAAG,OAC9C,QAAQ,GAAG,CAAC,2BACH,AAAW,iBAAX,GACT,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,gBACzB,IAAI,CAAC,WAAW,CAAC,UAAU,GAAG,KAAK,CAAC,OAAO,CAAG,QAC9C,IAAI,CAAC,UAAU,CAAC,UAAU,GAAG,KAAK,CAAC,OAAO,CAAG,OAC7C,QAAQ,GAAG,CAAC,kCAGZ,IAAI,CAAC,UAAU,CAAC,UAAU,GAAG,KAAK,CAAC,OAAO,CAAG,OAC7C,IAAI,CAAC,WAAW,CAAC,UAAU,GAAG,KAAK,CAAC,OAAO,CAAG,OAC9C,QAAQ,GAAG,CAAC,2BAId,IAAI,CAAC,sBAAsB,EAC7B,CAGQ,wBAAyB,CAE/B,IAAM,EAA0B,IAAI,CAAC,IAAI,CAAC,UAAU,GAEpD,GAAI,CAAC,EAAyB,CAC5B,QAAQ,IAAI,CAAC,sDACb,MACF,CAEA,IAAM,EAAc,EAAwB,YAAY,CAAC,SAAW,IACpE,QAAQ,GAAG,CAAC,8BAA+B,GAE3C,GAAI,CACF,IAAM,EAAM,IAAI,IAAI,EAAa,OAAO,QAAQ,CAAC,MAAM,EACvD,EAAI,YAAY,CAAC,GAAG,CAAC,UAAW,IAAI,CAAC,SAAS,EAC9C,EAAwB,YAAY,CAAC,OAAQ,EAAI,QAAQ,IACzD,QAAQ,GAAG,CACT,oDACA,EAAI,QAAQ,GAEhB,CAAE,MAAO,EAAO,CACd,QAAQ,KAAK,CACX,wCACA,EACA,EAEJ,CACF,CAGA,MAAO,CAEL,IAAI,CAAC,IAAI,CAAC,UAAU,GAAG,KAAK,CAAC,OAAO,CAAG,QACvC,QAAQ,GAAG,CAAC,+BACd,CACF,CAGA,IAAM,EAAe,KACnB,IAAM,EAAS,IAAI,gBAAgB,OAAO,QAAQ,CAAC,MAAM,EAGzD,MAAO,CAAE,eAFc,EAAO,GAAG,CAAC,gBAET,eADF,EAAO,GAAG,CAAC,eACM,CAC1C,EAGa,EAA4B,UACvC,QAAQ,GAAG,CAAC,iCACZ,GAAM,CAAE,eAAA,CAAc,CAAE,eAAA,CAAc,CAAE,CAAG,IAE3C,GAAI,GAAkB,EACpB,GAAI,CACF,QAAQ,GAAG,CAAC,iCAEZ,IAAM,EAAU,AAAA,CAAA,EAAA,EAAA,SAAS,AAAT,EAAU,GAAG,CAC3B,CAAC,2BAA2B,EAAE,EAAe,CAAC,EAI1C,EAAiD,MAAM,IAAI,QAC/D,CAAC,EAAS,KACR,EAAQ,MAAM,CAAC,AAAC,IACd,QAAQ,GAAG,CAAC,8BAA+B,EAAS,IAAI,EACxD,EAAQ,EAAS,IAAI,CACvB,GAEA,EAAQ,OAAO,CAAC,AAAC,IACf,QAAQ,KAAK,CAAC,aAAc,GAC5B,EAAO,EACT,GAGA,EAAQ,KAAK,EACf,GAII,EAAiB,SAAS,aAAa,CAAC,oBAC1C,IACF,QAAQ,GAAG,CAAC,uCACX,EAA+B,KAAK,IAIvC,IAAM,EAAmB,IAAI,EAAiB,oBAC9C,EAAiB,QAAQ,CAAC,GAC1B,EAAiB,IAAI,EACvB,CAAE,MAAO,EAAO,CACd,QAAQ,KAAK,CAAC,oCAAqC,GAEnD,IAAM,EAAsB,SAAS,cAAc,CAAC,gBAChD,IACF,EAAoB,SAAS,CAAG,CAAC;;;QAGjC,CAAC,CACD,EAAoB,KAAK,CAAC,OAAO,CAAG,QACpC,QAAQ,GAAG,CAAC,4BAEhB,MAEA,QAAQ,GAAG,CAAC,4CAEhB,C,E,C,c,Q,e,Q,sB,Q,iD,O,E,C,M,C,S,C,C,C,C,C,EC1VA,IAAyC,EAArC,EAAE,EAAQ,oBAA+B,EAAE,CAAC,EAA0B,OAAO,cAAc,CAA3C,EAAI,UAA4C,CAAC,IAAjC,IAAI,EAAmC,GAAA,QAAM,WAAW,CAAC,EAAE,aAAa,CAAC,CAAC,EAAG,OAAM,UAAU,EAAE,WAAW,CAAC,YAAY,CAAC,CAAC,CAAC,KAAK,CAAC,EAAE,CAAC,gBAAgB,CAAC,OAAO,IAAI,CAAC,OAAO,AAAA,CAAC,QAAQ,CAAC,OAAO,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,UAAU,CAAC,OAAO,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,WAAW,CAAC,OAAO,IAAI,CAAC,YAAY,CAAC,SAAS,CAAC,YAAY,CAAC,OAAO,IAAI,CAAC,YAAY,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC,CAAC,OAAO,IAAI,CAAC,EAAE,CAAC,OAAO,GAAG,KAAK,IAAI,CAAC,GAAG,CAAC,OAAO,EAAE,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,OAAO,IAAI,CAAC,EAAE,CAAC,QAAQ,GAAG,KAAK,IAAI,CAAC,GAAG,CAAC,QAAQ,EAAE,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,GAAG,UAAU,OAAO,EAAE,IAAI,CAAC,YAAY,CAAC,MAAM,GAAG,IAAI,CAAC,eAAe,CAAC,UAAU,IAAI,CAAC,eAAe,CAAC,aAAa,CAAC,GAAG,IAAI,CAAC,YAAY,CAAC,MAAM,EAAE,GAAG,EAAE,UAAU,OAAO,GAAG,EAAE,MAAM,EAAE,EAAE,MAAM,CAAC,MAAM,EAAE,EAAE,KAAK,EAAE,EAAE,KAAK,CAAC,MAAM,CAAC,CAAC,IAAM,EAAE,EAAE,MAAM,CAAC,GAAG,CAAE,AAAA,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,EAAE,EAAE,IAAI,CAAC,CAAC,EAAG,IAAI,CAAC,MAAM,IAAI,CAAC,YAAY,CAAC,SAAS,EAAE,MAAM,IAAI,CAAC,eAAe,CAAC,UAAU,IAAI,CAAC,eAAe,CAAC,QAAS,CAAA,EAAE,OAAO,EAAE,IAAI,CAAC,YAAY,CAAC,UAAU,EAAE,OAAO,CAAC,CAAC,CAAC,CAAC,EAAE,EAAO,OAAO,CAAK,OAAO,IAAI,CAAb,GAAiB,OAAO,CAAE,SAAS,CAAC,EAAE,YAAY,GAAG,eAAe,GAAG,EAAE,cAAc,CAAC,IAAI,OAAO,cAAc,CAAC,EAAE,EAAE,CAAC,WAAW,CAAC,EAAE,IAAI,WAAW,OAAO,AAA3J,CAA4J,CAAC,EAAE,AAAA,CAAC,EAAE,E,E,C,iB,O,E,C,M,C,S,C,C,C,C,C,E,I,E,E,kD,E,iB,C,GCkNjoC,EAAA,MAAA,CAAA,EAAA,sBAAA,IAAA,GAhNb,IAAA,EAAA,EAAA,eACA,EAAA,EAAA,gBACA,EAAA,EAAA,sBAiCA,OAAM,EAUJ,YAAY,CAAc,CAAE,CAAe,CAAE,CAC3C,IAAM,EAAc,SAAS,cAAc,CAAC,GAC5C,GAAI,CAAC,EACH,MAAM,AAAI,MAAM,CAAC,iBAAiB,EAAE,EAAO,YAAY,CAAC,CAI1D,CAAA,IAAI,CAAC,IAAI,CAAG,IAAI,EAAA,WAAW,CAAC,GAC5B,IAAI,CAAC,KAAK,CAAG,IAAI,EAAA,OAAM,CACrB,IAAI,CAAC,IAAI,CAAC,mBAAmB,CAAC,yBAAyB,UAAU,IAEnE,IAAI,CAAC,cAAc,CAAG,IAAI,CAAC,IAAI,CAAC,mBAAmB,CAAC,uBACpD,IAAI,CAAC,eAAe,CAAG,IAAI,CAAC,IAAI,CAAC,mBAAmB,CAClD,wBAEF,IAAI,CAAC,eAAe,CAAG,IAAI,CAAC,IAAI,CAAC,mBAAmB,CAClD,wBAEF,IAAI,CAAC,QAAQ,CAAG,IAAI,CAAC,IAAI,CAAC,mBAAmB,CAAC,aAG9C,IAAI,CAAC,aAAa,CAAG,GACrB,IAAI,CAAC,OAAO,CAAG,EAGV,IAAI,CAAC,cAAc,EACtB,QAAQ,IAAI,CACV,0EAGC,IAAI,CAAC,QAAQ,EAChB,QAAQ,IAAI,CACV,gEAGC,IAAI,CAAC,eAAe,EACvB,QAAQ,IAAI,CACV,2EAGC,IAAI,CAAC,eAAe,EACvB,QAAQ,IAAI,CACV,2EAGC,IAAI,CAAC,KAAK,EACb,QAAQ,IAAI,CACV,2EAGN,CAGA,SAAS,CAA4B,CAAE,CAoBrC,GAnBA,QAAQ,GAAG,CAAC,qCAGZ,IAAI,CAAC,aAAa,CAAG,EAAK,cAAc,CACxC,QAAQ,GAAG,CAAC,yBAA0B,IAAI,CAAC,aAAa,EAGpD,IAAI,CAAC,cAAc,GACrB,IAAI,CAAC,cAAc,CAAC,OAAO,CAAC,EAAK,eAAe,EAChD,QAAQ,GAAG,CAAC,sBAAuB,EAAK,eAAe,GAIrD,IAAI,CAAC,eAAe,GACtB,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC,EAAK,gBAAgB,EAClD,QAAQ,GAAG,CAAC,uBAAwB,EAAK,gBAAgB,GAIvD,IAAI,CAAC,eAAe,CAAE,CACxB,IAAM,EAAgB,IAAI,KAAK,EAAK,qBAAqB,EAAE,cAAc,GACzE,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC,GAC7B,QAAQ,GAAG,CAAC,uBAAwB,EACtC,CAGI,IAAI,CAAC,QAAQ,GACf,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,EAAK,QAAQ,CAAC,QAAQ,IAC5C,QAAQ,GAAG,CAAC,uBAAwB,EAAK,QAAQ,GAI/C,EAAK,SAAS,EAAI,IAAI,CAAC,KAAK,GAC9B,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,EAAK,SAAS,EAElC,AADmB,IAAI,CAAC,KAAK,CAAC,UAAU,GAC7B,GAAG,CAAG,CAAC,EAAE,EAAK,eAAe,CAAC,oBAAoB,CAAC,CAC9D,QAAQ,GAAG,CAAC,4CAId,IAAM,EAAwB,SAAS,aAAa,CAAC,mBACjD,GAAyB,aAAiC,cAC5D,EAAsB,SAAS,CAAG,CAAI,CAAC,uBAAuB,CAC9D,EAAsB,KAAK,CAAC,OAAO,CAAG,QACtC,QAAQ,GAAG,CAAC,uCAId,IAAI,CAAC,qBAAqB,CAAC,EAAK,UAAU,CAC5C,CAGQ,sBAAsB,CAAiB,CAAE,CAE/C,IAAM,EAAyB,IAAI,CAAC,IAAI,CAAC,UAAU,GAEnD,GAAI,CAAC,EAAwB,CAC3B,QAAQ,IAAI,CAAC,qDACb,MACF,CAEA,IAAM,EAAc,EAAuB,YAAY,CAAC,SAAW,IACnE,QAAQ,GAAG,CAAC,8BAA+B,GAE3C,GAAI,CACF,GAAI,aAAa,OAAO,CAAC,eAAgB,CAEvC,IAAM,EAAM,IAAI,IAAI,EAAa,OAAO,QAAQ,CAAC,MAAM,EACvD,EAAI,YAAY,CAAC,GAAG,CAAC,cAAe,IAAI,CAAC,aAAa,EACtD,EAAI,YAAY,CAAC,GAAG,CAAC,QAAS,IAAI,CAAC,OAAO,EAC1C,EAAuB,YAAY,CAAC,OAAQ,EAAI,QAAQ,IACxD,QAAQ,GAAG,CACT,mEACA,EAAI,QAAQ,GAEhB,KAAO,CAEL,IAAM,EAAU,CAAC,mBAAmB,EAAE,mBAAmB,GAAW,CAAC,CACrE,EAAuB,YAAY,CAAC,OAAQ,GAC5C,QAAQ,GAAG,CACT,wDACA,EAEJ,CACF,CAAE,MAAO,EAAO,CACd,QAAQ,KAAK,CAAC,oCAAqC,GACnD,MAAM,0DACR,CACF,CAGA,MAAO,CACL,IAAM,EAAc,IAAI,CAAC,IAAI,CAAC,UAAU,GACpC,aAAuB,cACzB,EAAY,KAAK,CAAC,OAAO,CAAG,QAC5B,QAAQ,GAAG,CAAC,0BAEhB,CACF,CAGA,IAAM,EAAe,KACnB,IAAM,EAAS,IAAI,gBAAgB,OAAO,QAAQ,CAAC,MAAM,EAGzD,MAAO,CAAE,iBAFgB,EAAO,GAAG,CAAC,mBAET,QADX,EAAO,GAAG,CAAC,QACQ,CACrC,EAGa,EAAsB,UACjC,QAAQ,GAAG,CAAC,2BACZ,GAAM,CAAE,iBAAA,CAAgB,CAAE,QAAA,CAAO,CAAE,CAAG,IAEtC,GAAI,GAAoB,EACtB,GAAI,CACF,QAAQ,GAAG,CAAC,iCAEZ,IAAM,EAAU,AAAA,CAAA,EAAA,EAAA,SAAS,AAAT,EAAU,GAAG,CAC3B,CAAC,sBAAsB,EAAE,EAAQ,CAAC,EAI9B,EAAqC,MAAM,IAAI,QACnD,CAAC,EAAS,KACR,EAAQ,MAAM,CAAC,AAAC,IACd,QAAQ,GAAG,CAAC,wBAAyB,EAAS,IAAI,EAClD,EAAQ,EAAS,IAAI,CACvB,GAEA,EAAQ,OAAO,CAAC,AAAC,IACf,QAAQ,KAAK,CAAC,aAAc,GAC5B,EAAO,EACT,GAGA,EAAQ,KAAK,EACf,GAII,EAAiB,SAAS,aAAa,CAAC,oBAC1C,GAAkB,aAA0B,cAC9C,QAAQ,GAAG,CAAC,uCACZ,EAAe,KAAK,IAItB,IAAM,EAAa,IAAI,EAAW,kBAAmB,GACrD,EAAW,QAAQ,CAAC,GACpB,EAAW,IAAI,EACjB,CAAE,MAAO,EAAO,CACd,QAAQ,KAAK,CAAC,8BAA+B,GAC7C,MACE,0FAEJ,MAEA,QAAQ,GAAG,CAAC,gDACZ,MACE,yFAGN,C,E,C,c,Q,e,Q,sB,Q,iD,O,E,C,M,C,S,C,C,C,C,C,E,I,E,E,kD,E,iB,C,GCrEa,EAAA,MAAA,CAAA,EAAA,wBAAA,IAAA,GAhMb,IAAA,EAAA,EAAA,eACA,EAAA,EAAA,gBACA,EAAA,EAAA,sBAyBA,OAAM,EASJ,YAAY,CAAc,CAAE,CAC1B,IAAM,EAAc,SAAS,cAAc,CAAC,GAC5C,GAAI,CAAC,EACH,MAAM,AAAI,MAAM,CAAC,iBAAiB,EAAE,EAAO,YAAY,CAAC,CAI1D,CAAA,IAAI,CAAC,IAAI,CAAG,IAAI,EAAA,WAAW,CAAC,GAC5B,IAAI,CAAC,KAAK,CAAG,IAAI,EAAA,OAAM,CACrB,IAAI,CAAC,IAAI,CAAC,mBAAmB,CAAC,sBAAsB,UAAU,IAEhE,IAAI,CAAC,YAAY,CAAG,IAAI,CAAC,IAAI,CAAC,mBAAmB,CAAC,qBAClD,IAAI,CAAC,gBAAgB,CAAG,IAAI,CAAC,IAAI,CAAC,mBAAmB,CACnD,yBAEF,IAAI,CAAC,cAAc,CAAG,IAAI,CAAC,IAAI,CAAC,mBAAmB,CAAC,uBAGpD,IAAI,CAAC,UAAU,CAAG,GAClB,IAAI,CAAC,UAAU,CAAG,EAGb,IAAI,CAAC,YAAY,EACpB,QAAQ,IAAI,CACV,0EAGC,IAAI,CAAC,gBAAgB,EACxB,QAAQ,IAAI,CACV,8EAGC,IAAI,CAAC,cAAc,EACtB,QAAQ,IAAI,CACV,4EAGC,IAAI,CAAC,KAAK,EACb,QAAQ,IAAI,CACV,0EAGN,CAGA,SAAS,CAA8B,CAAE,CAkBvC,GAjBA,QAAQ,GAAG,CAAC,uCAGZ,IAAI,CAAC,UAAU,CAAG,EAAK,WAAW,CAClC,QAAQ,GAAG,CAAC,sBAAuB,IAAI,CAAC,UAAU,EAGlD,IAAI,CAAC,UAAU,CAAG,EAAK,EAAE,CACzB,QAAQ,GAAG,CAAC,sBAAuB,IAAI,CAAC,UAAU,EAG9C,IAAI,CAAC,YAAY,GACnB,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,EAAK,aAAa,EAC5C,QAAQ,GAAG,CAAC,oBAAqB,EAAK,aAAa,GAIjD,IAAI,CAAC,gBAAgB,CAAE,CACzB,IAAM,EAAW,EAAK,cAAc,CAChC,qBACA,CAAC,WAAW,EAAE,EAAK,mBAAmB,CAAC,CAAC,CAAC,CAC7C,IAAI,CAAC,gBAAgB,CAAC,OAAO,CAAC,GAC9B,QAAQ,GAAG,CAAC,wBAAyB,EACvC,CAGI,IAAI,CAAC,cAAc,GACrB,IAAI,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,EAAK,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,EACxD,QAAQ,GAAG,CAAC,sBAAuB,CAAC,CAAC,EAAE,EAAK,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,GAI7D,EAAK,SAAS,EAAI,IAAI,CAAC,KAAK,GAC9B,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,EAAK,SAAS,EAElC,AADmB,IAAI,CAAC,KAAK,CAAC,UAAU,GAC7B,GAAG,CAAG,CAAC,EAAE,EAAK,aAAa,CAAC,iBAAiB,CAAC,CACzD,QAAQ,GAAG,CAAC,yCAId,IAAM,EAAwB,SAAS,aAAa,CAAC,mBACjD,GAAyB,aAAiC,cAC5D,EAAsB,SAAS,CAAG,CAAI,CAAC,uBAAuB,CAC9D,EAAsB,KAAK,CAAC,OAAO,CAAG,QACtC,QAAQ,GAAG,CAAC,uCAId,IAAI,CAAC,sBAAsB,EAC7B,CAGQ,wBAAyB,CAE/B,IAAM,EAA0B,IAAI,CAAC,IAAI,CAAC,UAAU,GAEpD,GAAI,CAAC,EAAyB,CAC5B,QAAQ,IAAI,CAAC,kDACb,MACF,CAEA,IAAM,EAAc,EAAwB,YAAY,CAAC,SAAW,IACpE,QAAQ,GAAG,CAAC,8BAA+B,GAE3C,GAAI,CACF,GAAI,aAAa,OAAO,CAAC,eAAgB,CAEvC,IAAM,EAAM,IAAI,IAAI,EAAa,OAAO,QAAQ,CAAC,MAAM,EACvD,EAAI,YAAY,CAAC,GAAG,CAAC,WAAY,IAAI,CAAC,UAAU,EAChD,EAAI,YAAY,CAAC,GAAG,CAAC,WAAY,IAAI,CAAC,UAAU,CAAC,QAAQ,IACzD,EAAwB,YAAY,CAAC,OAAQ,EAAI,QAAQ,IACzD,QAAQ,GAAG,CACT,oEACA,EAAI,QAAQ,GAEhB,MAEE,EAAwB,YAAY,CAAC,OAAQ,KAC7C,EAAwB,KAAK,CAAC,aAAa,CAAG,OAE9C,EAAwB,KAAK,CAAC,MAAM,CAAG,cACvC,QAAQ,GAAG,CACT,+EAGN,CAAE,MAAO,EAAO,CACd,QAAQ,KAAK,CAAC,oCAAqC,EAAa,GAChE,MAAM,2DACR,CACF,CAGA,MAAO,CACL,IAAM,EAAc,IAAI,CAAC,IAAI,CAAC,UAAU,GACpC,aAAuB,cACzB,EAAY,KAAK,CAAC,OAAO,CAAG,QAC5B,QAAQ,GAAG,CAAC,4BAEhB,CACF,CAGA,IAAM,EAAe,KACnB,IAAM,EAAS,IAAI,gBAAgB,OAAO,QAAQ,CAAC,MAAM,EAGzD,MAAO,CAAE,qBAFoB,EAAO,GAAG,CAAC,uBAET,WADZ,EAAO,GAAG,CAAC,WACY,CAC5C,EAGa,EAAwB,UACnC,QAAQ,GAAG,CAAC,6BACZ,GAAM,CAAE,qBAAA,CAAoB,CAAE,WAAA,CAAU,CAAE,CAAG,IAE7C,GAAI,GAAwB,EAC1B,GAAI,CACF,QAAQ,GAAG,CAAC,6BAEZ,IAAM,EAAU,AAAA,CAAA,EAAA,EAAA,SAAS,AAAT,EAAU,GAAG,CAC3B,CAAC,uBAAuB,EAAE,EAAW,CAAC,EAIlC,EAAyC,MAAM,IAAI,QACvD,CAAC,EAAS,KACR,EAAQ,MAAM,CAAC,AAAC,IACd,QAAQ,GAAG,CAAC,0BAA2B,EAAS,IAAI,EACpD,EAAQ,EAAS,IAAI,CACvB,GAEA,EAAQ,OAAO,CAAC,AAAC,IACf,QAAQ,KAAK,CAAC,aAAc,GAC5B,EAAO,EACT,GAGA,EAAQ,KAAK,EACf,GAII,EAAiB,SAAS,aAAa,CAAC,oBAC1C,GAAkB,aAA0B,cAC9C,QAAQ,GAAG,CAAC,uCACZ,EAAe,KAAK,IAItB,IAAM,EAAe,IAAI,EAAa,gBACtC,EAAa,QAAQ,CAAC,GACtB,EAAa,IAAI,EACnB,CAAE,MAAO,EAAO,CACd,QAAQ,KAAK,CAAC,gCAAiC,GAC/C,MACE,sFAEJ,MAEA,QAAQ,GAAG,CAAC,yCACZ,MACE,kFAGN,C,E,C,c,Q,e,Q,sB,Q,iD,O,E,E,E,C,E","sources":["<anon>","src/modules/success_page/index.ts","src/modules/success_page/registration_success.ts","node_modules/.pnpm/@xatom+image@1.0.0_@xatom+core@1.0.12/node_modules/@xatom/image/dist/index.js","src/modules/success_page/ticket_success.ts","src/modules/success_page/donation_success.ts"],"sourcesContent":["// modules are defined as an array\n// [ module function, map of requires ]\n//\n// map of requires is short require name -> numeric require\n//\n// anything defined in a previous bundle is accessed via the\n// orig method which is the require for previous bundles\n\n(function (modules, entry, mainEntry, parcelRequireName, globalName) {\n  /* eslint-disable no-undef */\n  var globalObject =\n    typeof globalThis !== 'undefined'\n      ? globalThis\n      : typeof self !== 'undefined'\n      ? self\n      : typeof window !== 'undefined'\n      ? window\n      : typeof global !== 'undefined'\n      ? global\n      : {};\n  /* eslint-enable no-undef */\n\n  // Save the require from previous bundle to this closure if any\n  var previousRequire =\n    typeof globalObject[parcelRequireName] === 'function' &&\n    globalObject[parcelRequireName];\n\n  var cache = previousRequire.cache || {};\n  // Do not use `require` to prevent Webpack from trying to bundle this call\n  var nodeRequire =\n    typeof module !== 'undefined' &&\n    typeof module.require === 'function' &&\n    module.require.bind(module);\n\n  function newRequire(name, jumped) {\n    if (!cache[name]) {\n      if (!modules[name]) {\n        // if we cannot find the module within our internal map or\n        // cache jump to the current global require ie. the last bundle\n        // that was added to the page.\n        var currentRequire =\n          typeof globalObject[parcelRequireName] === 'function' &&\n          globalObject[parcelRequireName];\n        if (!jumped && currentRequire) {\n          return currentRequire(name, true);\n        }\n\n        // If there are other bundles on this page the require from the\n        // previous one is saved to 'previousRequire'. Repeat this as\n        // many times as there are bundles until the module is found or\n        // we exhaust the require chain.\n        if (previousRequire) {\n          return previousRequire(name, true);\n        }\n\n        // Try the node require function if it exists.\n        if (nodeRequire && typeof name === 'string') {\n          return nodeRequire(name);\n        }\n\n        var err = new Error(\"Cannot find module '\" + name + \"'\");\n        err.code = 'MODULE_NOT_FOUND';\n        throw err;\n      }\n\n      localRequire.resolve = resolve;\n      localRequire.cache = {};\n\n      var module = (cache[name] = new newRequire.Module(name));\n\n      modules[name][0].call(\n        module.exports,\n        localRequire,\n        module,\n        module.exports,\n        this\n      );\n    }\n\n    return cache[name].exports;\n\n    function localRequire(x) {\n      var res = localRequire.resolve(x);\n      return res === false ? {} : newRequire(res);\n    }\n\n    function resolve(x) {\n      var id = modules[name][1][x];\n      return id != null ? id : x;\n    }\n  }\n\n  function Module(moduleName) {\n    this.id = moduleName;\n    this.bundle = newRequire;\n    this.exports = {};\n  }\n\n  newRequire.isParcelRequire = true;\n  newRequire.Module = Module;\n  newRequire.modules = modules;\n  newRequire.cache = cache;\n  newRequire.parent = previousRequire;\n  newRequire.register = function (id, exports) {\n    modules[id] = [\n      function (require, module) {\n        module.exports = exports;\n      },\n      {},\n    ];\n  };\n\n  Object.defineProperty(newRequire, 'root', {\n    get: function () {\n      return globalObject[parcelRequireName];\n    },\n  });\n\n  globalObject[parcelRequireName] = newRequire;\n\n  for (var i = 0; i < entry.length; i++) {\n    newRequire(entry[i]);\n  }\n\n  if (mainEntry) {\n    // Expose entry point to Node, AMD or browser globals\n    // Based on https://github.com/ForbesLindesay/umd/blob/master/template.js\n    var mainExports = newRequire(mainEntry);\n\n    // CommonJS\n    if (typeof exports === 'object' && typeof module !== 'undefined') {\n      module.exports = mainExports;\n\n      // RequireJS\n    } else if (typeof define === 'function' && define.amd) {\n      define(function () {\n        return mainExports;\n      });\n\n      // <script>\n    } else if (globalName) {\n      this[globalName] = mainExports;\n    }\n  }\n})({\"6pJZl\":[function(require,module,exports) {\n// src/success_page/index.ts\nvar parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"initializeSuccessPage\", ()=>initializeSuccessPage);\nvar _registrationSuccess = require(\"./registration_success\");\nvar _ticketSuccess = require(\"./ticket_success\");\nvar _donationSuccess = require(\"./donation_success\");\n// Utility function to check URL parameters\nconst getUrlParams = ()=>{\n    const params = new URLSearchParams(window.location.search);\n    return {\n        isRegistration: params.has(\"registration\"),\n        isTicketPurchase: params.has(\"ticket_purchase\"),\n        isDonationSuccessful: params.has(\"donation_successful\")\n    };\n};\n// Function to clear localStorage except specified keys\nconst clearLocalStorageExcept = (exceptions)=>{\n    const keysToRemove = [];\n    for(let i = 0; i < localStorage.length; i++){\n        const key = localStorage.key(i);\n        if (key && !exceptions.includes(key)) keysToRemove.push(key);\n    }\n    keysToRemove.forEach((key)=>{\n        localStorage.removeItem(key);\n    });\n};\nconst initializeSuccessPage = ()=>{\n    console.log(\"Initializing success page\");\n    // Clear localStorage except for auth_config, auth_role, auth_user\n    clearLocalStorageExcept([\n        \"auth_config\",\n        \"auth_role\",\n        \"auth_user\"\n    ]);\n    // Extract URL parameters\n    const { isRegistration, isTicketPurchase, isDonationSuccessful } = getUrlParams();\n    // Trigger registration success if appropriate parameter is present\n    if (isRegistration) {\n        console.log(\"Handling registration success\");\n        (0, _registrationSuccess.handleRegistrationSuccess)();\n    }\n    // Trigger ticket success if appropriate parameter is present\n    if (isTicketPurchase) {\n        console.log(\"Handling ticket success\");\n        (0, _ticketSuccess.handleTicketSuccess)();\n    }\n    // Trigger donation success if appropriate parameter is present\n    if (isDonationSuccessful) {\n        console.log(\"Handling donation success\");\n        (0, _donationSuccess.handleDonationSuccess)();\n    } else console.warn(\"Donation success parameters not found in the URL. Please check your link and try again.\");\n};\n\n},{\"./registration_success\":\"ifnoH\",\"./ticket_success\":\"dXC3Z\",\"./donation_success\":\"f17tC\",\"@parcel/transformer-js/src/esmodule-helpers.js\":\"jiucr\"}],\"ifnoH\":[function(require,module,exports) {\n// src/success_page/registration_success.ts\nvar parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"handleRegistrationSuccess\", ()=>handleRegistrationSuccess);\nvar _core = require(\"@xatom/core\");\nvar _image = require(\"@xatom/image\");\nvar _apiConfig = require(\"../../api/apiConfig\");\n// Define a RegistrationCard component to manage the registration card DOM\nclass RegistrationCard {\n    constructor(cardId){\n        const cardElement = document.getElementById(cardId);\n        if (!cardElement) throw new Error(`Element with id '${cardId}' not found.`);\n        // Since #registrationCard is the link element, initialize it accordingly\n        this.card = new (0, _core.WFComponent)(cardElement);\n        // Initialize child elements within the link\n        this.image = new (0, _image.WFImage)(this.card.getChildAsComponent(\"#cardRegistrationImage\").getElement());\n        this.programName = this.card.getChildAsComponent(\"#cardProgramName\");\n        this.workshopName = this.card.getChildAsComponent(\"#cardWorkshopName\");\n        this.subscriptionType = this.card.getChildAsComponent(\"#cardSubscriptionType\");\n        this.invoiceDate = this.card.getChildAsComponent(\"#cardInvoiceDate\");\n        this.activePill = this.card.getChildAsComponent(\"#cardActivePill\");\n        this.depositPill = this.card.getChildAsComponent(\"#cardDepositPill\");\n        this.successMessage = new (0, _core.WFComponent)(\"#successMessage\");\n        // Initialize programId to an empty string\n        this.programId = \"\";\n        // Log warnings if any essential child elements are missing\n        if (!this.programName) console.warn(\"Element with id 'cardProgramName' not found within the registration card.\");\n        if (!this.workshopName) console.warn(\"Element with id 'cardWorkshopName' not found within the registration card.\");\n        if (!this.subscriptionType) console.warn(\"Element with id 'cardSubscriptionType' not found within the registration card.\");\n        if (!this.invoiceDate) console.warn(\"Element with id 'cardInvoiceDate' not found within the registration card.\");\n        if (!this.activePill) console.warn(\"Element with id 'cardActivePill' not found within the registration card.\");\n        if (!this.depositPill) console.warn(\"Element with id 'cardDepositPill' not found within the registration card.\");\n        if (!this.image) console.warn(\"Element with id 'cardRegistrationImage' not found within the registration card.\");\n        if (!this.successMessage) console.warn(\"Element with id 'successMessage' not found on the page.\");\n    }\n    // Method to populate the registration card with data\n    populate(data) {\n        console.log(\"Populating registration card with data.\");\n        // Set Program ID (store as string for URL parameter)\n        this.programId = data.program.id.toString();\n        console.log(\"Program ID set to:\", this.programId);\n        // Set Program Name\n        this.programName.setText(data.program.name);\n        console.log(\"Set programName:\", data.program.name);\n        // Set Workshop Name (if workshop exists)\n        const workshopName = data.workshop ? data.workshop.Name : \"\";\n        this.workshopName.setText(workshopName);\n        console.log(\"Set workshopName:\", workshopName);\n        // Set Subscription Type\n        this.subscriptionType.setText(data.subscription_type);\n        console.log(\"Set subscriptionType:\", data.subscription_type);\n        // Set Next Invoice Date (or show a fallback)\n        const formattedDate = data.next_charge_date ? new Date(data.next_charge_date).toLocaleDateString() : \"Upon Student Approval\";\n        this.invoiceDate.setText(formattedDate);\n        console.log(\"Set invoiceDate:\", formattedDate);\n        // Determine the image and success message source\n        // If there's a workshop, use the workshop fields; otherwise, use the program fields\n        const imageUrl = data.workshop?.Main_Image || data.program.Main_Image;\n        const successMessage = data.workshop?.Success_Page_Message || data.program.Success_Page_Message;\n        // Set Registration Image\n        if (imageUrl) {\n            this.image.setImage(imageUrl);\n            const imgElement = this.image.getElement();\n            // No alt field is present in the new data; use a placeholder or the name\n            imgElement.alt = data.workshop ? data.workshop.Name || \"Chickenshed Workshop\" : data.program.name || \"Chickenshed Program\";\n            console.log(\"Set registration image URL and alt text.\");\n        }\n        // Set Success Message\n        if (successMessage) {\n            this.successMessage.setHTML(successMessage);\n            const successMessageElement = this.successMessage.getElement();\n            successMessageElement.style.display = \"block\";\n            console.log(\"Set and displayed success message.\");\n        }\n        // Determine which status pill to display\n        const status = data.status.toLowerCase();\n        if (status === \"active\") {\n            this.activePill.setText(\"Active\");\n            this.activePill.getElement().style.display = \"block\";\n            this.depositPill.getElement().style.display = \"none\";\n            console.log(\"Displayed Active pill.\");\n        } else if (status === \"deposit paid\") {\n            this.depositPill.setText(\"Deposit Paid\");\n            this.depositPill.getElement().style.display = \"block\";\n            this.activePill.getElement().style.display = \"none\";\n            console.log(\"Displayed Deposit Paid pill.\");\n        } else {\n            // Hide both pills if status doesn't match expected values\n            this.activePill.getElement().style.display = \"none\";\n            this.depositPill.getElement().style.display = \"none\";\n            console.log(\"Hid both status pills.\");\n        }\n        // Add the `program` parameter to the registration card link\n        this.updateRegistrationLink();\n    }\n    // Method to update the registration link with the program parameter\n    updateRegistrationLink() {\n        // Since #registrationCard is the link element, manipulate its href directly\n        const registrationLinkElement = this.card.getElement();\n        if (!registrationLinkElement) {\n            console.warn(\"registrationCard element is not an anchor element.\");\n            return;\n        }\n        const currentHref = registrationLinkElement.getAttribute(\"href\") || \"#\";\n        console.log(\"Current href before update:\", currentHref);\n        try {\n            const url = new URL(currentHref, window.location.origin);\n            url.searchParams.set(\"program\", this.programId);\n            registrationLinkElement.setAttribute(\"href\", url.toString());\n            console.log(\"Updated registration link with program parameter:\", url.toString());\n        } catch (error) {\n            console.error(\"Invalid URL in registrationCard href:\", currentHref, error);\n        }\n    }\n    // Method to display the registration card\n    show() {\n        // Since #registrationCard is a link, ensure it's visible if it's hidden\n        this.card.getElement().style.display = \"block\";\n        console.log(\"Displayed registration card.\");\n    }\n}\n// Utility function to parse URL parameters\nconst getUrlParams = ()=>{\n    const params = new URLSearchParams(window.location.search);\n    const isRegistration = params.has(\"registration\");\n    const subscriptionId = params.get(\"subscription\");\n    return {\n        isRegistration,\n        subscriptionId\n    };\n};\nconst handleRegistrationSuccess = async ()=>{\n    console.log(\"Handling registration success\");\n    const { isRegistration, subscriptionId } = getUrlParams();\n    if (isRegistration && subscriptionId) try {\n        console.log(\"Fetching registration data...\");\n        // Make the GET request to fetch registration data\n        const request = (0, _apiConfig.apiClient).get(`/success_page/registration/${subscriptionId}`);\n        // Wrap the event-based response in a Promise for easier handling\n        const registrationData = await new Promise((resolve, reject)=>{\n            request.onData((response)=>{\n                console.log(\"Registration data received:\", response.data);\n                resolve(response.data);\n            });\n            request.onError((error)=>{\n                console.error(\"API Error:\", error);\n                reject(error);\n            });\n            // Initiate the request\n            request.fetch();\n        });\n        // Trigger the success_trigger element (assuming it has an event listener)\n        const successTrigger = document.querySelector(\".success_trigger\");\n        if (successTrigger) {\n            console.log(\"Triggering success_trigger element.\");\n            successTrigger.click();\n        }\n        // Initialize and populate the registration card\n        const registrationCard = new RegistrationCard(\"registrationCard\");\n        registrationCard.populate(registrationData);\n        registrationCard.show();\n    } catch (error) {\n        console.error(\"Error fetching registration data:\", error);\n        // Optionally, display an error message to the user\n        const errorMessageElement = document.getElementById(\"errorMessage\");\n        if (errorMessageElement) {\n            errorMessageElement.innerHTML = `\n          <p>An error occurred while processing your registration.</p>\n          <p>Please contact us for assistance.</p>\n        `;\n            errorMessageElement.style.display = \"block\";\n            console.log(\"Displayed error message.\");\n        }\n    }\n    else console.log(\"Registration parameters not found in URL.\");\n};\n\n},{\"@xatom/core\":\"65YBq\",\"@xatom/image\":\"bavwf\",\"../../api/apiConfig\":\"dUmIV\",\"@parcel/transformer-js/src/esmodule-helpers.js\":\"jiucr\"}],\"bavwf\":[function(require,module,exports) {\nvar t = require(\"d023971cccd819e3\");\nvar e, r, s, i, o, n, u = {};\ne = u, r = \"WFImage\", s = ()=>c, Object.defineProperty(e, r, {\n    get: s,\n    set: i,\n    enumerable: !0,\n    configurable: !0\n});\nclass c extends t.WFComponent {\n    constructor(t){\n        super(t);\n    }\n    getImageConfig() {\n        return this._config;\n    }\n    getSrc() {\n        return this.getAttribute(\"src\");\n    }\n    getSizes() {\n        return this.getAttribute(\"sizes\");\n    }\n    getSrcSet() {\n        return this.getAttribute(\"srcset\");\n    }\n    getLoading() {\n        return this.getAttribute(\"loading\");\n    }\n    onLoad(t) {\n        return this.on(\"load\", t), ()=>{\n            this.off(\"load\", t);\n        };\n    }\n    onLoadError(t) {\n        return this.on(\"error\", t), ()=>{\n            this.off(\"error\", t);\n        };\n    }\n    setImage(t) {\n        if (\"string\" == typeof t) this.setAttribute(\"src\", t), this.removeAttribute(\"srcset\"), this.removeAttribute(\"sizes\");\n        else {\n            if (this.setAttribute(\"src\", t.src), \"object\" == typeof t && t.srcSet && t.srcSet.length && t.sizes && t.sizes.length) {\n                const e = t.srcSet.map((t)=>`${t.url} ${t.size}`).join(\", \");\n                this.setAttribute(\"srcset\", e);\n            } else this.removeAttribute(\"srcset\"), this.removeAttribute(\"sizes\");\n            t.loading && this.setAttribute(\"loading\", t.loading);\n        }\n    }\n}\no = module.exports, n = u, Object.keys(n).forEach(function(t) {\n    \"default\" === t || \"__esModule\" === t || o.hasOwnProperty(t) || Object.defineProperty(o, t, {\n        enumerable: !0,\n        get: function() {\n            return n[t];\n        }\n    });\n});\n\n},{\"d023971cccd819e3\":\"65YBq\"}],\"dXC3Z\":[function(require,module,exports) {\n// src/success_page/tickets_success.ts\nvar parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"handleTicketSuccess\", ()=>handleTicketSuccess);\nvar _core = require(\"@xatom/core\");\nvar _image = require(\"@xatom/image\");\nvar _apiConfig = require(\"../../api/apiConfig\");\n// Define a TicketCard component to manage the ticket card DOM\nclass TicketCard {\n    constructor(cardId, orderId){\n        const cardElement = document.getElementById(cardId);\n        if (!cardElement) throw new Error(`Element with id '${cardId}' not found.`);\n        // Initialize card and its child elements\n        this.card = new (0, _core.WFComponent)(cardElement);\n        this.image = new (0, _image.WFImage)(this.card.getChildAsComponent(\"#cardPerformanceImage\").getElement());\n        this.productionName = this.card.getChildAsComponent(\"#cardProductionName\");\n        this.performanceName = this.card.getChildAsComponent(\"#cardPerformanceName\");\n        this.performanceDate = this.card.getChildAsComponent(\"#cardPerformanceDate\");\n        this.quantity = this.card.getChildAsComponent(\"#quantity\");\n        // Initialize performanceId and orderId to an empty string\n        this.performanceId = \"\";\n        this.orderId = orderId;\n        // Log warnings if any essential child elements are missing\n        if (!this.productionName) console.warn(\"Element with id 'cardProductionName' not found within the ticket card.\");\n        if (!this.quantity) console.warn(\"Element with id 'quantity' not found within the ticket card.\");\n        if (!this.performanceName) console.warn(\"Element with id 'cardPerformanceName' not found within the ticket card.\");\n        if (!this.performanceDate) console.warn(\"Element with id 'cardPerformanceDate' not found within the ticket card.\");\n        if (!this.image) console.warn(\"Element with id 'cardPerformanceImage' not found within the ticket card.\");\n    }\n    // Method to populate the ticket card with data\n    populate(data) {\n        console.log(\"Populating ticket card with data.\");\n        // Set Performance ID\n        this.performanceId = data.performance_id;\n        console.log(\"Performance ID set to:\", this.performanceId);\n        // Set Production Name\n        if (this.productionName) {\n            this.productionName.setText(data.production_name);\n            console.log(\"Set productionName:\", data.production_name);\n        }\n        // Set Performance Name\n        if (this.performanceName) {\n            this.performanceName.setText(data.performance_name);\n            console.log(\"Set performanceName:\", data.performance_name);\n        }\n        // Set Performance Date\n        if (this.performanceDate) {\n            const formattedDate = new Date(data.performance_date_time).toLocaleString();\n            this.performanceDate.setText(formattedDate);\n            console.log(\"Set performanceDate:\", formattedDate);\n        }\n        // Set Ticket Quantity\n        if (this.quantity) {\n            this.quantity.setText(data.quantity.toString());\n            console.log(\"Set ticket quantity:\", data.quantity);\n        }\n        // Set Performance Image\n        if (data.image_url && this.image) {\n            this.image.setImage(data.image_url);\n            const imgElement = this.image.getElement();\n            imgElement.alt = `${data.production_name} - Performance Image`;\n            console.log(\"Set performance image URL and alt text.\");\n        }\n        // Set Success Message\n        const successMessageElement = document.querySelector(\"#successMessage\");\n        if (successMessageElement && successMessageElement instanceof HTMLElement) {\n            successMessageElement.innerHTML = data[\"success-page-message\"];\n            successMessageElement.style.display = \"block\";\n            console.log(\"Set and displayed success message.\");\n        }\n        // Add the `performance` or `uuid` parameter to the ticket order link\n        this.updateTicketOrderLink(data.order_uuid);\n    }\n    // Method to update the ticket order link with the appropriate parameters\n    updateTicketOrderLink(orderUuid) {\n        // Since #ticketOrderCard is the link element, manipulate its href directly\n        const ticketOrderLinkElement = this.card.getElement();\n        if (!ticketOrderLinkElement) {\n            console.warn(\"ticketOrderCard element is not an anchor element.\");\n            return;\n        }\n        const currentHref = ticketOrderLinkElement.getAttribute(\"href\") || \"#\";\n        console.log(\"Current href before update:\", currentHref);\n        try {\n            if (localStorage.getItem(\"auth_config\")) {\n                // User is authenticated, proceed with adding performance and order parameters\n                const url = new URL(currentHref, window.location.origin);\n                url.searchParams.set(\"performance\", this.performanceId);\n                url.searchParams.set(\"order\", this.orderId);\n                ticketOrderLinkElement.setAttribute(\"href\", url.toString());\n                console.log(\"Updated ticket order link with performance and order parameters:\", url.toString());\n            } else {\n                // User is not authenticated, set href to /ticket-order?uuid={order_uuid}\n                const newHref = `/ticket-order?uuid=${encodeURIComponent(orderUuid)}`;\n                ticketOrderLinkElement.setAttribute(\"href\", newHref);\n                console.log(\"Updated ticket order link to /ticket-order with uuid:\", newHref);\n            }\n        } catch (error) {\n            console.error(\"Error updating ticket order link:\", error);\n            alert(\"An error occurred while updating the ticket order link.\");\n        }\n    }\n    // Method to display the ticket card\n    show() {\n        const cardElement = this.card.getElement();\n        if (cardElement instanceof HTMLElement) {\n            cardElement.style.display = \"block\";\n            console.log(\"Displayed ticket card.\");\n        }\n    }\n}\n// Utility function to parse URL parameters\nconst getUrlParams = ()=>{\n    const params = new URLSearchParams(window.location.search);\n    const isTicketPurchase = params.has(\"ticket_purchase\");\n    const orderId = params.get(\"order\");\n    return {\n        isTicketPurchase,\n        orderId\n    };\n};\nconst handleTicketSuccess = async ()=>{\n    console.log(\"Handling ticket success\");\n    const { isTicketPurchase, orderId } = getUrlParams();\n    if (isTicketPurchase && orderId) try {\n        console.log(\"Fetching ticket order data...\");\n        // Make the GET request to fetch ticket order data\n        const request = (0, _apiConfig.apiClient).get(`/success_page/tickets/${orderId}`);\n        // Wrap the event-based response in a Promise for easier handling\n        const ticketData = await new Promise((resolve, reject)=>{\n            request.onData((response)=>{\n                console.log(\"Ticket data received:\", response.data);\n                resolve(response.data);\n            });\n            request.onError((error)=>{\n                console.error(\"API Error:\", error);\n                reject(error);\n            });\n            // Initiate the request\n            request.fetch();\n        });\n        // Trigger the success_trigger element (assuming it has an event listener)\n        const successTrigger = document.querySelector(\".success_trigger\");\n        if (successTrigger && successTrigger instanceof HTMLElement) {\n            console.log(\"Triggering success_trigger element.\");\n            successTrigger.click();\n        }\n        // Initialize and populate the ticket card\n        const ticketCard = new TicketCard(\"ticketOrderCard\", orderId);\n        ticketCard.populate(ticketData);\n        ticketCard.show();\n    } catch (error) {\n        console.error(\"Error fetching ticket data:\", error);\n        alert(\"An error occurred while processing your ticket order. Please contact us for assistance.\");\n    }\n    else {\n        console.log(\"Ticket purchase parameters not found in URL.\");\n        alert(\"Ticket purchase parameters not found in the URL. Please check your link and try again.\");\n    }\n};\n\n},{\"@xatom/core\":\"65YBq\",\"@xatom/image\":\"bavwf\",\"../../api/apiConfig\":\"dUmIV\",\"@parcel/transformer-js/src/esmodule-helpers.js\":\"jiucr\"}],\"f17tC\":[function(require,module,exports) {\n// src/success_page/donation_success.ts\nvar parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"handleDonationSuccess\", ()=>handleDonationSuccess);\nvar _core = require(\"@xatom/core\");\nvar _image = require(\"@xatom/image\");\nvar _apiConfig = require(\"../../api/apiConfig\");\n// Define a DonationCard component to manage the donation card DOM\nclass DonationCard {\n    constructor(cardId){\n        const cardElement = document.getElementById(cardId);\n        if (!cardElement) throw new Error(`Element with id '${cardId}' not found.`);\n        // Initialize card and its child elements\n        this.card = new (0, _core.WFComponent)(cardElement);\n        this.image = new (0, _image.WFImage)(this.card.getChildAsComponent(\"#cardCampaignImage\").getElement());\n        this.campaignName = this.card.getChildAsComponent(\"#cardCampaignName\");\n        this.campaignSubtitle = this.card.getChildAsComponent(\"#cardCampaignSubtitle\");\n        this.donationAmount = this.card.getChildAsComponent(\"#cardDonationAmount\");\n        // Initialize campaignId and donationId to empty values\n        this.campaignId = \"\";\n        this.donationId = 0;\n        // Log warnings if any essential child elements are missing\n        if (!this.campaignName) console.warn(\"Element with id 'cardCampaignName' not found within the donation card.\");\n        if (!this.campaignSubtitle) console.warn(\"Element with id 'cardCampaignSubtitle' not found within the donation card.\");\n        if (!this.donationAmount) console.warn(\"Element with id 'cardDonationAmount' not found within the donation card.\");\n        if (!this.image) console.warn(\"Element with id 'cardCampaignImage' not found within the donation card.\");\n    }\n    // Method to populate the donation card with data\n    populate(data) {\n        console.log(\"Populating donation card with data.\");\n        // Set Campaign ID\n        this.campaignId = data.campaign_id;\n        console.log(\"Campaign ID set to:\", this.campaignId);\n        // Set Donation ID\n        this.donationId = data.id;\n        console.log(\"Donation ID set to:\", this.donationId);\n        // Set Campaign Name\n        if (this.campaignName) {\n            this.campaignName.setText(data.campaign_name);\n            console.log(\"Set campaignName:\", data.campaign_name);\n        }\n        // Set Campaign Subtitle (e.g., \"Thank You for Donating\")\n        if (this.campaignSubtitle) {\n            const subtitle = data.keep_anonymous ? \"Anonymous Donation\" : `Thank you, ${data.customer_first_name}!`;\n            this.campaignSubtitle.setText(subtitle);\n            console.log(\"Set campaignSubtitle:\", subtitle);\n        }\n        // Set Donation Amount\n        if (this.donationAmount) {\n            this.donationAmount.setText(`$${data.amount.toFixed(2)}`);\n            console.log(\"Set donationAmount:\", `$${data.amount.toFixed(2)}`);\n        }\n        // Set Campaign Image\n        if (data.image_url && this.image) {\n            this.image.setImage(data.image_url);\n            const imgElement = this.image.getElement();\n            imgElement.alt = `${data.campaign_name} - Campaign Image`;\n            console.log(\"Set campaign image URL and alt text.\");\n        }\n        // Set Success Message\n        const successMessageElement = document.querySelector(\"#successMessage\");\n        if (successMessageElement && successMessageElement instanceof HTMLElement) {\n            successMessageElement.innerHTML = data[\"success-page-message\"];\n            successMessageElement.style.display = \"block\";\n            console.log(\"Set and displayed success message.\");\n        }\n        // Add the `campaign` and `donation` parameters to the donation card link\n        this.updateDonationCardLink();\n    }\n    // Method to update the donation card link with the campaign and donation parameters\n    updateDonationCardLink() {\n        // Since #donationCard is the link element, manipulate its href directly\n        const donationCardLinkElement = this.card.getElement();\n        if (!donationCardLinkElement) {\n            console.warn(\"donationCard element is not an anchor element.\");\n            return;\n        }\n        const currentHref = donationCardLinkElement.getAttribute(\"href\") || \"#\";\n        console.log(\"Current href before update:\", currentHref);\n        try {\n            if (localStorage.getItem(\"auth_config\")) {\n                // User is authenticated, proceed with adding campaign and donation parameters\n                const url = new URL(currentHref, window.location.origin);\n                url.searchParams.set(\"campaign\", this.campaignId);\n                url.searchParams.set(\"donation\", this.donationId.toString());\n                donationCardLinkElement.setAttribute(\"href\", url.toString());\n                console.log(\"Updated donation card link with campaign and donation parameters:\", url.toString());\n            } else {\n                // User is not authenticated, disable the link and make it non-interactive\n                donationCardLinkElement.setAttribute(\"href\", \"#\"); // Remove or set to a dummy link\n                donationCardLinkElement.style.pointerEvents = \"none\"; // Disable pointer events\n                //donationCardLinkElement.style.opacity = \"0.5\"; // Visually indicate disabled state\n                donationCardLinkElement.style.cursor = \"not-allowed\"; // Change cursor to indicate non-interactivity\n                console.log(\"Auth_config not found. Donation card link disabled and made non-interactive.\");\n            }\n        } catch (error) {\n            console.error(\"Invalid URL in donationCard href:\", currentHref, error);\n            alert(\"An error occurred while updating the donation card link.\");\n        }\n    }\n    // Method to display the donation card\n    show() {\n        const cardElement = this.card.getElement();\n        if (cardElement instanceof HTMLElement) {\n            cardElement.style.display = \"block\";\n            console.log(\"Displayed donation card.\");\n        }\n    }\n}\n// Utility function to parse URL parameters\nconst getUrlParams = ()=>{\n    const params = new URLSearchParams(window.location.search);\n    const isDonationSuccessful = params.has(\"donation_successful\");\n    const donationId = params.get(\"donation\");\n    return {\n        isDonationSuccessful,\n        donationId\n    };\n};\nconst handleDonationSuccess = async ()=>{\n    console.log(\"Handling donation success\");\n    const { isDonationSuccessful, donationId } = getUrlParams();\n    if (isDonationSuccessful && donationId) try {\n        console.log(\"Fetching donation data...\");\n        // Make the GET request to fetch donation data\n        const request = (0, _apiConfig.apiClient).get(`/success_page/donation/${donationId}`);\n        // Wrap the event-based response in a Promise for easier handling\n        const donationData = await new Promise((resolve, reject)=>{\n            request.onData((response)=>{\n                console.log(\"Donation data received:\", response.data);\n                resolve(response.data);\n            });\n            request.onError((error)=>{\n                console.error(\"API Error:\", error);\n                reject(error);\n            });\n            // Initiate the request\n            request.fetch();\n        });\n        // Trigger the success_trigger element (assuming it has an event listener)\n        const successTrigger = document.querySelector(\".success_trigger\");\n        if (successTrigger && successTrigger instanceof HTMLElement) {\n            console.log(\"Triggering success_trigger element.\");\n            successTrigger.click();\n        }\n        // Initialize and populate the donation card\n        const donationCard = new DonationCard(\"donationCard\");\n        donationCard.populate(donationData);\n        donationCard.show();\n    } catch (error) {\n        console.error(\"Error fetching donation data:\", error);\n        alert(\"An error occurred while processing your donation. Please contact us for assistance.\");\n    }\n    else {\n        console.log(\"Donation parameters not found in URL.\");\n        alert(\"Donation parameters not found in the URL. Please check your link and try again.\");\n    }\n};\n\n},{\"@xatom/core\":\"65YBq\",\"@xatom/image\":\"bavwf\",\"../../api/apiConfig\":\"dUmIV\",\"@parcel/transformer-js/src/esmodule-helpers.js\":\"jiucr\"}]},[], null, \"parcelRequired346\")\n\n//# sourceMappingURL=success_page.e1ae326e.js.map\n","// src/success_page/index.ts\n\nimport { handleRegistrationSuccess } from \"./registration_success\";\nimport { handleTicketSuccess } from \"./ticket_success\";\nimport { handleDonationSuccess } from \"./donation_success\";\n\n// Utility function to check URL parameters\nconst getUrlParams = () => {\n  const params = new URLSearchParams(window.location.search);\n  return {\n    isRegistration: params.has(\"registration\"),\n    isTicketPurchase: params.has(\"ticket_purchase\"),\n    isDonationSuccessful: params.has(\"donation_successful\"),\n  };\n};\n\n// Function to clear localStorage except specified keys\nconst clearLocalStorageExcept = (exceptions: string[]) => {\n  const keysToRemove = [];\n  for (let i = 0; i < localStorage.length; i++) {\n    const key = localStorage.key(i);\n    if (key && !exceptions.includes(key)) {\n      keysToRemove.push(key);\n    }\n  }\n  keysToRemove.forEach((key) => {\n    localStorage.removeItem(key);\n  });\n};\n\n// Main initializer function\nexport const initializeSuccessPage = () => {\n  console.log(\"Initializing success page\");\n\n  // Clear localStorage except for auth_config, auth_role, auth_user\n  clearLocalStorageExcept([\"auth_config\", \"auth_role\", \"auth_user\"]);\n\n  // Extract URL parameters\n  const { isRegistration, isTicketPurchase, isDonationSuccessful } =\n    getUrlParams();\n\n  // Trigger registration success if appropriate parameter is present\n  if (isRegistration) {\n    console.log(\"Handling registration success\");\n    handleRegistrationSuccess();\n  }\n\n  // Trigger ticket success if appropriate parameter is present\n  if (isTicketPurchase) {\n    console.log(\"Handling ticket success\");\n    handleTicketSuccess();\n  }\n\n  // Trigger donation success if appropriate parameter is present\n  if (isDonationSuccessful) {\n    console.log(\"Handling donation success\");\n    handleDonationSuccess();\n  } else {\n    console.warn(\n      \"Donation success parameters not found in the URL. Please check your link and try again.\"\n    );\n  }\n};\n","// src/success_page/registration_success.ts\n\nimport { WFComponent } from \"@xatom/core\";\nimport { WFImage } from \"@xatom/image\";\nimport { apiClient } from \"../../api/apiConfig\";\n\n// Define the structure of the new registration response\nexport interface RegistrationResponse {\n  data: {\n    id: number;\n    status: string; // e.g. 'Active', 'Deposit Paid'\n    subscription_type: string; // e.g. 'Annual', 'Pay-Per-Semester'\n    program: Program;\n    workshop: Workshop | null; // workshop may be null\n    pending_students: boolean;\n    coupon: string;\n    deposit_amount: number;\n    start_date: string | null; // Possibly null\n    next_charge_date: string | null;\n    next_charge_amount: number;\n    next_invoice_id: string;\n    stripe_subscription_id: string;\n    user_id: number;\n    contact_id: number;\n    sale_id: number;\n    cancellation_reason: string;\n    created_at: number;\n  };\n}\n\n// Define the Program interface\ninterface Program {\n  id: number;\n  name: string;\n  slug: string;\n  Collection_ID: string;\n  Locale_ID: string;\n  Item_ID: string;\n  Created_On: string;\n  Updated_On: string;\n  Published_On: string;\n  Main_Image: string;\n  Main_Video: string;\n  Subheading: string;\n  Short_description: string;\n  Age_range: string;\n  Price_Description: string;\n  Schedule_Description: string;\n  Financial_Aid_Description: string;\n  Accessibility_Description: string;\n  Program_Overview_Description: string;\n  Sort_Order: number;\n  Color_Theme: number;\n  Inquiry_Only: boolean;\n  [\"1st_Semester_Start_Date\"]: number | null;\n  [\"2nd_Semester_Charge_Date\"]: number | null;\n  Subscription_Pause_Date: number | null;\n  Success_Page_Message: string;\n}\n\n// Define the Workshop interface\ninterface Workshop {\n  id: number;\n  Name: string;\n  Slug: string;\n  Collection_ID: string;\n  Locale_ID: string;\n  Item_ID: string;\n  Created_On: string | null;\n  Updated_On: string | null;\n  Published_On: string | null;\n  Main_Image: string;\n  Main_Video: string;\n  Subheading: string;\n  Short_description: string;\n  Age_range: string;\n  Price_Description: string;\n  Schedule_Description: string;\n  Financial_Aid_Description: string;\n  Accessibility_Description: string;\n  Workshop_Overview_Description: string;\n  Success_Page_Message: string;\n  Color_Theme: number;\n  Parent_Program: number;\n}\n\n// Define a RegistrationCard component to manage the registration card DOM\nclass RegistrationCard {\n  private card: WFComponent;\n  private image: WFImage;\n  private programName: WFComponent;\n  private workshopName: WFComponent;\n  private subscriptionType: WFComponent;\n  private invoiceDate: WFComponent;\n  private activePill: WFComponent;\n  private depositPill: WFComponent;\n  private successMessage: WFComponent;\n  private programId: string; // We'll store the program id as a string\n\n  constructor(cardId: string) {\n    const cardElement = document.getElementById(cardId);\n    if (!cardElement) {\n      throw new Error(`Element with id '${cardId}' not found.`);\n    }\n\n    // Since #registrationCard is the link element, initialize it accordingly\n    this.card = new WFComponent(cardElement);\n\n    // Initialize child elements within the link\n    this.image = new WFImage(\n      this.card.getChildAsComponent(\"#cardRegistrationImage\").getElement()\n    );\n    this.programName = this.card.getChildAsComponent(\"#cardProgramName\");\n    this.workshopName = this.card.getChildAsComponent(\"#cardWorkshopName\");\n    this.subscriptionType = this.card.getChildAsComponent(\n      \"#cardSubscriptionType\"\n    );\n    this.invoiceDate = this.card.getChildAsComponent(\"#cardInvoiceDate\");\n    this.activePill = this.card.getChildAsComponent(\"#cardActivePill\");\n    this.depositPill = this.card.getChildAsComponent(\"#cardDepositPill\");\n    this.successMessage = new WFComponent(\"#successMessage\");\n\n    // Initialize programId to an empty string\n    this.programId = \"\";\n\n    // Log warnings if any essential child elements are missing\n    if (!this.programName) {\n      console.warn(\n        \"Element with id 'cardProgramName' not found within the registration card.\"\n      );\n    }\n    if (!this.workshopName) {\n      console.warn(\n        \"Element with id 'cardWorkshopName' not found within the registration card.\"\n      );\n    }\n    if (!this.subscriptionType) {\n      console.warn(\n        \"Element with id 'cardSubscriptionType' not found within the registration card.\"\n      );\n    }\n    if (!this.invoiceDate) {\n      console.warn(\n        \"Element with id 'cardInvoiceDate' not found within the registration card.\"\n      );\n    }\n    if (!this.activePill) {\n      console.warn(\n        \"Element with id 'cardActivePill' not found within the registration card.\"\n      );\n    }\n    if (!this.depositPill) {\n      console.warn(\n        \"Element with id 'cardDepositPill' not found within the registration card.\"\n      );\n    }\n    if (!this.image) {\n      console.warn(\n        \"Element with id 'cardRegistrationImage' not found within the registration card.\"\n      );\n    }\n    if (!this.successMessage) {\n      console.warn(\"Element with id 'successMessage' not found on the page.\");\n    }\n  }\n\n  // Method to populate the registration card with data\n  populate(data: RegistrationResponse[\"data\"]) {\n    console.log(\"Populating registration card with data.\");\n\n    // Set Program ID (store as string for URL parameter)\n    this.programId = data.program.id.toString();\n    console.log(\"Program ID set to:\", this.programId);\n\n    // Set Program Name\n    this.programName.setText(data.program.name);\n    console.log(\"Set programName:\", data.program.name);\n\n    // Set Workshop Name (if workshop exists)\n    const workshopName = data.workshop ? data.workshop.Name : \"\";\n    this.workshopName.setText(workshopName);\n    console.log(\"Set workshopName:\", workshopName);\n\n    // Set Subscription Type\n    this.subscriptionType.setText(data.subscription_type);\n    console.log(\"Set subscriptionType:\", data.subscription_type);\n\n    // Set Next Invoice Date (or show a fallback)\n    const formattedDate = data.next_charge_date\n      ? new Date(data.next_charge_date).toLocaleDateString()\n      : \"Upon Student Approval\";\n    this.invoiceDate.setText(formattedDate);\n    console.log(\"Set invoiceDate:\", formattedDate);\n\n    // Determine the image and success message source\n    // If there's a workshop, use the workshop fields; otherwise, use the program fields\n    const imageUrl = data.workshop?.Main_Image || data.program.Main_Image;\n    const successMessage =\n      data.workshop?.Success_Page_Message || data.program.Success_Page_Message;\n\n    // Set Registration Image\n    if (imageUrl) {\n      this.image.setImage(imageUrl);\n      const imgElement = this.image.getElement() as HTMLImageElement;\n      // No alt field is present in the new data; use a placeholder or the name\n      imgElement.alt = data.workshop\n        ? data.workshop.Name || \"Chickenshed Workshop\"\n        : data.program.name || \"Chickenshed Program\";\n      console.log(\"Set registration image URL and alt text.\");\n    }\n\n    // Set Success Message\n    if (successMessage) {\n      this.successMessage.setHTML(successMessage);\n      const successMessageElement = this.successMessage.getElement();\n      successMessageElement.style.display = \"block\";\n      console.log(\"Set and displayed success message.\");\n    }\n\n    // Determine which status pill to display\n    const status = data.status.toLowerCase();\n    if (status === \"active\") {\n      this.activePill.setText(\"Active\");\n      this.activePill.getElement().style.display = \"block\";\n      this.depositPill.getElement().style.display = \"none\";\n      console.log(\"Displayed Active pill.\");\n    } else if (status === \"deposit paid\") {\n      this.depositPill.setText(\"Deposit Paid\");\n      this.depositPill.getElement().style.display = \"block\";\n      this.activePill.getElement().style.display = \"none\";\n      console.log(\"Displayed Deposit Paid pill.\");\n    } else {\n      // Hide both pills if status doesn't match expected values\n      this.activePill.getElement().style.display = \"none\";\n      this.depositPill.getElement().style.display = \"none\";\n      console.log(\"Hid both status pills.\");\n    }\n\n    // Add the `program` parameter to the registration card link\n    this.updateRegistrationLink();\n  }\n\n  // Method to update the registration link with the program parameter\n  private updateRegistrationLink() {\n    // Since #registrationCard is the link element, manipulate its href directly\n    const registrationLinkElement = this.card.getElement() as HTMLAnchorElement;\n\n    if (!registrationLinkElement) {\n      console.warn(\"registrationCard element is not an anchor element.\");\n      return;\n    }\n\n    const currentHref = registrationLinkElement.getAttribute(\"href\") || \"#\";\n    console.log(\"Current href before update:\", currentHref);\n\n    try {\n      const url = new URL(currentHref, window.location.origin);\n      url.searchParams.set(\"program\", this.programId);\n      registrationLinkElement.setAttribute(\"href\", url.toString());\n      console.log(\n        \"Updated registration link with program parameter:\",\n        url.toString()\n      );\n    } catch (error) {\n      console.error(\n        \"Invalid URL in registrationCard href:\",\n        currentHref,\n        error\n      );\n    }\n  }\n\n  // Method to display the registration card\n  show() {\n    // Since #registrationCard is a link, ensure it's visible if it's hidden\n    this.card.getElement().style.display = \"block\";\n    console.log(\"Displayed registration card.\");\n  }\n}\n\n// Utility function to parse URL parameters\nconst getUrlParams = () => {\n  const params = new URLSearchParams(window.location.search);\n  const isRegistration = params.has(\"registration\");\n  const subscriptionId = params.get(\"subscription\");\n  return { isRegistration, subscriptionId };\n};\n\n// Main function to handle registration success\nexport const handleRegistrationSuccess = async () => {\n  console.log(\"Handling registration success\");\n  const { isRegistration, subscriptionId } = getUrlParams();\n\n  if (isRegistration && subscriptionId) {\n    try {\n      console.log(\"Fetching registration data...\");\n      // Make the GET request to fetch registration data\n      const request = apiClient.get<RegistrationResponse>(\n        `/success_page/registration/${subscriptionId}`\n      );\n\n      // Wrap the event-based response in a Promise for easier handling\n      const registrationData: RegistrationResponse[\"data\"] = await new Promise(\n        (resolve, reject) => {\n          request.onData((response) => {\n            console.log(\"Registration data received:\", response.data);\n            resolve(response.data);\n          });\n\n          request.onError((error) => {\n            console.error(\"API Error:\", error);\n            reject(error);\n          });\n\n          // Initiate the request\n          request.fetch();\n        }\n      );\n\n      // Trigger the success_trigger element (assuming it has an event listener)\n      const successTrigger = document.querySelector(\".success_trigger\");\n      if (successTrigger) {\n        console.log(\"Triggering success_trigger element.\");\n        (successTrigger as HTMLElement).click();\n      }\n\n      // Initialize and populate the registration card\n      const registrationCard = new RegistrationCard(\"registrationCard\");\n      registrationCard.populate(registrationData);\n      registrationCard.show();\n    } catch (error) {\n      console.error(\"Error fetching registration data:\", error);\n      // Optionally, display an error message to the user\n      const errorMessageElement = document.getElementById(\"errorMessage\");\n      if (errorMessageElement) {\n        errorMessageElement.innerHTML = `\n          <p>An error occurred while processing your registration.</p>\n          <p>Please contact us for assistance.</p>\n        `;\n        errorMessageElement.style.display = \"block\";\n        console.log(\"Displayed error message.\");\n      }\n    }\n  } else {\n    console.log(\"Registration parameters not found in URL.\");\n  }\n};\n","var t=require(\"@xatom/core\");var e,r,s,i,o,n,u={};e=u,r=\"WFImage\",s=()=>c,Object.defineProperty(e,r,{get:s,set:i,enumerable:!0,configurable:!0});class c extends t.WFComponent{constructor(t){super(t)}getImageConfig(){return this._config}getSrc(){return this.getAttribute(\"src\")}getSizes(){return this.getAttribute(\"sizes\")}getSrcSet(){return this.getAttribute(\"srcset\")}getLoading(){return this.getAttribute(\"loading\")}onLoad(t){return this.on(\"load\",t),()=>{this.off(\"load\",t)}}onLoadError(t){return this.on(\"error\",t),()=>{this.off(\"error\",t)}}setImage(t){if(\"string\"==typeof t)this.setAttribute(\"src\",t),this.removeAttribute(\"srcset\"),this.removeAttribute(\"sizes\");else{if(this.setAttribute(\"src\",t.src),\"object\"==typeof t&&t.srcSet&&t.srcSet.length&&t.sizes&&t.sizes.length){const e=t.srcSet.map((t=>`${t.url} ${t.size}`)).join(\", \");this.setAttribute(\"srcset\",e)}else this.removeAttribute(\"srcset\"),this.removeAttribute(\"sizes\");t.loading&&this.setAttribute(\"loading\",t.loading)}}}o=module.exports,n=u,Object.keys(n).forEach((function(t){\"default\"===t||\"__esModule\"===t||o.hasOwnProperty(t)||Object.defineProperty(o,t,{enumerable:!0,get:function(){return n[t]}})}));","// src/success_page/tickets_success.ts\n\nimport { WFComponent } from \"@xatom/core\";\nimport { WFImage } from \"@xatom/image\";\nimport { apiClient } from \"../../api/apiConfig\";\nimport { navigate } from \"@xatom/core\"; // Ensure navigate is imported for redirection\n\n// Define the structure of the ticket response\ninterface TicketResponse {\n  data: {\n    id: number;\n    status: string; // e.g., 'sold'\n    production_name: string;\n    performance_name: string;\n    location: string;\n    performance_date_time: number; // timestamp\n    customer_first_name: string;\n    customer_last_name: string;\n    customer_email: string;\n    custom_question_answer: string | number;\n    assistance_required: boolean;\n    assistance_message: string;\n    checked_in: boolean;\n    checked_in_time: string | null;\n    user_id: number;\n    contact_id: number;\n    performance_id: string;\n    created_at: number;\n    sale_id: number;\n    image_url: string;\n    order_uuid: string;\n    \"success-page-message\": string;\n    quantity: number;\n  };\n}\n\n// Define a TicketCard component to manage the ticket card DOM\nclass TicketCard {\n  private card: WFComponent;\n  private image: WFImage;\n  private productionName: WFComponent;\n  private performanceName: WFComponent;\n  private performanceDate: WFComponent;\n  private performanceId: string; // Track performance ID\n  private quantity: WFComponent; // Track ticket quantity\n  private orderId: string; // Track order UUID\n\n  constructor(cardId: string, orderId: string) {\n    const cardElement = document.getElementById(cardId);\n    if (!cardElement) {\n      throw new Error(`Element with id '${cardId}' not found.`);\n    }\n\n    // Initialize card and its child elements\n    this.card = new WFComponent(cardElement);\n    this.image = new WFImage(\n      this.card.getChildAsComponent(\"#cardPerformanceImage\").getElement()\n    );\n    this.productionName = this.card.getChildAsComponent(\"#cardProductionName\");\n    this.performanceName = this.card.getChildAsComponent(\n      \"#cardPerformanceName\"\n    );\n    this.performanceDate = this.card.getChildAsComponent(\n      \"#cardPerformanceDate\"\n    );\n    this.quantity = this.card.getChildAsComponent(\"#quantity\");\n\n    // Initialize performanceId and orderId to an empty string\n    this.performanceId = \"\";\n    this.orderId = orderId;\n\n    // Log warnings if any essential child elements are missing\n    if (!this.productionName) {\n      console.warn(\n        \"Element with id 'cardProductionName' not found within the ticket card.\"\n      );\n    }\n    if (!this.quantity) {\n      console.warn(\n        \"Element with id 'quantity' not found within the ticket card.\"\n      );\n    }\n    if (!this.performanceName) {\n      console.warn(\n        \"Element with id 'cardPerformanceName' not found within the ticket card.\"\n      );\n    }\n    if (!this.performanceDate) {\n      console.warn(\n        \"Element with id 'cardPerformanceDate' not found within the ticket card.\"\n      );\n    }\n    if (!this.image) {\n      console.warn(\n        \"Element with id 'cardPerformanceImage' not found within the ticket card.\"\n      );\n    }\n  }\n\n  // Method to populate the ticket card with data\n  populate(data: TicketResponse[\"data\"]) {\n    console.log(\"Populating ticket card with data.\");\n\n    // Set Performance ID\n    this.performanceId = data.performance_id;\n    console.log(\"Performance ID set to:\", this.performanceId);\n\n    // Set Production Name\n    if (this.productionName) {\n      this.productionName.setText(data.production_name);\n      console.log(\"Set productionName:\", data.production_name);\n    }\n\n    // Set Performance Name\n    if (this.performanceName) {\n      this.performanceName.setText(data.performance_name);\n      console.log(\"Set performanceName:\", data.performance_name);\n    }\n\n    // Set Performance Date\n    if (this.performanceDate) {\n      const formattedDate = new Date(data.performance_date_time).toLocaleString();\n      this.performanceDate.setText(formattedDate);\n      console.log(\"Set performanceDate:\", formattedDate);\n    }\n\n    // Set Ticket Quantity\n    if (this.quantity) {\n      this.quantity.setText(data.quantity.toString());\n      console.log(\"Set ticket quantity:\", data.quantity);\n    }\n\n    // Set Performance Image\n    if (data.image_url && this.image) {\n      this.image.setImage(data.image_url);\n      const imgElement = this.image.getElement() as HTMLImageElement;\n      imgElement.alt = `${data.production_name} - Performance Image`;\n      console.log(\"Set performance image URL and alt text.\");\n    }\n\n    // Set Success Message\n    const successMessageElement = document.querySelector(\"#successMessage\");\n    if (successMessageElement && successMessageElement instanceof HTMLElement) {\n      successMessageElement.innerHTML = data[\"success-page-message\"];\n      successMessageElement.style.display = \"block\";\n      console.log(\"Set and displayed success message.\");\n    }\n\n    // Add the `performance` or `uuid` parameter to the ticket order link\n    this.updateTicketOrderLink(data.order_uuid);\n  }\n\n  // Method to update the ticket order link with the appropriate parameters\n  private updateTicketOrderLink(orderUuid: string) {\n    // Since #ticketOrderCard is the link element, manipulate its href directly\n    const ticketOrderLinkElement = this.card.getElement() as HTMLAnchorElement;\n\n    if (!ticketOrderLinkElement) {\n      console.warn(\"ticketOrderCard element is not an anchor element.\");\n      return;\n    }\n\n    const currentHref = ticketOrderLinkElement.getAttribute(\"href\") || \"#\";\n    console.log(\"Current href before update:\", currentHref);\n\n    try {\n      if (localStorage.getItem(\"auth_config\")) {\n        // User is authenticated, proceed with adding performance and order parameters\n        const url = new URL(currentHref, window.location.origin);\n        url.searchParams.set(\"performance\", this.performanceId);\n        url.searchParams.set(\"order\", this.orderId);\n        ticketOrderLinkElement.setAttribute(\"href\", url.toString());\n        console.log(\n          \"Updated ticket order link with performance and order parameters:\",\n          url.toString()\n        );\n      } else {\n        // User is not authenticated, set href to /ticket-order?uuid={order_uuid}\n        const newHref = `/ticket-order?uuid=${encodeURIComponent(orderUuid)}`;\n        ticketOrderLinkElement.setAttribute(\"href\", newHref);\n        console.log(\n          \"Updated ticket order link to /ticket-order with uuid:\",\n          newHref\n        );\n      }\n    } catch (error) {\n      console.error(\"Error updating ticket order link:\", error);\n      alert(\"An error occurred while updating the ticket order link.\");\n    }\n  }\n\n  // Method to display the ticket card\n  show() {\n    const cardElement = this.card.getElement();\n    if (cardElement instanceof HTMLElement) {\n      cardElement.style.display = \"block\";\n      console.log(\"Displayed ticket card.\");\n    }\n  }\n}\n\n// Utility function to parse URL parameters\nconst getUrlParams = () => {\n  const params = new URLSearchParams(window.location.search);\n  const isTicketPurchase = params.has(\"ticket_purchase\");\n  const orderId = params.get(\"order\");\n  return { isTicketPurchase, orderId };\n};\n\n// Main function to handle ticket success\nexport const handleTicketSuccess = async () => {\n  console.log(\"Handling ticket success\");\n  const { isTicketPurchase, orderId } = getUrlParams();\n\n  if (isTicketPurchase && orderId) {\n    try {\n      console.log(\"Fetching ticket order data...\");\n      // Make the GET request to fetch ticket order data\n      const request = apiClient.get<TicketResponse>(\n        `/success_page/tickets/${orderId}`\n      );\n\n      // Wrap the event-based response in a Promise for easier handling\n      const ticketData: TicketResponse[\"data\"] = await new Promise(\n        (resolve, reject) => {\n          request.onData((response) => {\n            console.log(\"Ticket data received:\", response.data);\n            resolve(response.data);\n          });\n\n          request.onError((error) => {\n            console.error(\"API Error:\", error);\n            reject(error);\n          });\n\n          // Initiate the request\n          request.fetch();\n        }\n      );\n\n      // Trigger the success_trigger element (assuming it has an event listener)\n      const successTrigger = document.querySelector(\".success_trigger\");\n      if (successTrigger && successTrigger instanceof HTMLElement) {\n        console.log(\"Triggering success_trigger element.\");\n        successTrigger.click();\n      }\n\n      // Initialize and populate the ticket card\n      const ticketCard = new TicketCard(\"ticketOrderCard\", orderId);\n      ticketCard.populate(ticketData);\n      ticketCard.show();\n    } catch (error) {\n      console.error(\"Error fetching ticket data:\", error);\n      alert(\n        \"An error occurred while processing your ticket order. Please contact us for assistance.\"\n      );\n    }\n  } else {\n    console.log(\"Ticket purchase parameters not found in URL.\");\n    alert(\n      \"Ticket purchase parameters not found in the URL. Please check your link and try again.\"\n    );\n  }\n};\n","// src/success_page/donation_success.ts\n\nimport { WFComponent } from \"@xatom/core\";\nimport { WFImage } from \"@xatom/image\";\nimport { apiClient } from \"../../api/apiConfig\";\nimport { navigate } from \"@xatom/core\"; // Ensure navigate is imported for potential redirection\n\n// Define the structure of the donation response\ninterface DonationResponse {\n  data: {\n    id: number;\n    created_at: number;\n    user_id: number;\n    contact_id: number;\n    campaign_id: string;\n    campaign_name: string;\n    status: string; // e.g., 'completed'\n    amount: number;\n    keep_anonymous: boolean;\n    customer_first_name: string;\n    customer_last_name: string;\n    customer_email: string;\n    sale_id: number;\n    image_url: string;\n    \"success-page-message\": string;\n  };\n}\n\n// Define a DonationCard component to manage the donation card DOM\nclass DonationCard {\n  private card: WFComponent;\n  private image: WFImage;\n  private campaignName: WFComponent;\n  private campaignSubtitle: WFComponent;\n  private donationAmount: WFComponent;\n  private campaignId: string; // Track campaign ID\n  private donationId: number; // Track donation ID\n\n  constructor(cardId: string) {\n    const cardElement = document.getElementById(cardId);\n    if (!cardElement) {\n      throw new Error(`Element with id '${cardId}' not found.`);\n    }\n\n    // Initialize card and its child elements\n    this.card = new WFComponent(cardElement);\n    this.image = new WFImage(\n      this.card.getChildAsComponent(\"#cardCampaignImage\").getElement()\n    );\n    this.campaignName = this.card.getChildAsComponent(\"#cardCampaignName\");\n    this.campaignSubtitle = this.card.getChildAsComponent(\n      \"#cardCampaignSubtitle\"\n    );\n    this.donationAmount = this.card.getChildAsComponent(\"#cardDonationAmount\");\n\n    // Initialize campaignId and donationId to empty values\n    this.campaignId = \"\";\n    this.donationId = 0;\n\n    // Log warnings if any essential child elements are missing\n    if (!this.campaignName) {\n      console.warn(\n        \"Element with id 'cardCampaignName' not found within the donation card.\"\n      );\n    }\n    if (!this.campaignSubtitle) {\n      console.warn(\n        \"Element with id 'cardCampaignSubtitle' not found within the donation card.\"\n      );\n    }\n    if (!this.donationAmount) {\n      console.warn(\n        \"Element with id 'cardDonationAmount' not found within the donation card.\"\n      );\n    }\n    if (!this.image) {\n      console.warn(\n        \"Element with id 'cardCampaignImage' not found within the donation card.\"\n      );\n    }\n  }\n\n  // Method to populate the donation card with data\n  populate(data: DonationResponse[\"data\"]) {\n    console.log(\"Populating donation card with data.\");\n\n    // Set Campaign ID\n    this.campaignId = data.campaign_id;\n    console.log(\"Campaign ID set to:\", this.campaignId);\n\n    // Set Donation ID\n    this.donationId = data.id;\n    console.log(\"Donation ID set to:\", this.donationId);\n\n    // Set Campaign Name\n    if (this.campaignName) {\n      this.campaignName.setText(data.campaign_name);\n      console.log(\"Set campaignName:\", data.campaign_name);\n    }\n\n    // Set Campaign Subtitle (e.g., \"Thank You for Donating\")\n    if (this.campaignSubtitle) {\n      const subtitle = data.keep_anonymous\n        ? \"Anonymous Donation\"\n        : `Thank you, ${data.customer_first_name}!`;\n      this.campaignSubtitle.setText(subtitle);\n      console.log(\"Set campaignSubtitle:\", subtitle);\n    }\n\n    // Set Donation Amount\n    if (this.donationAmount) {\n      this.donationAmount.setText(`$${data.amount.toFixed(2)}`);\n      console.log(\"Set donationAmount:\", `$${data.amount.toFixed(2)}`);\n    }\n\n    // Set Campaign Image\n    if (data.image_url && this.image) {\n      this.image.setImage(data.image_url);\n      const imgElement = this.image.getElement() as HTMLImageElement;\n      imgElement.alt = `${data.campaign_name} - Campaign Image`;\n      console.log(\"Set campaign image URL and alt text.\");\n    }\n\n    // Set Success Message\n    const successMessageElement = document.querySelector(\"#successMessage\");\n    if (successMessageElement && successMessageElement instanceof HTMLElement) {\n      successMessageElement.innerHTML = data[\"success-page-message\"];\n      successMessageElement.style.display = \"block\";\n      console.log(\"Set and displayed success message.\");\n    }\n\n    // Add the `campaign` and `donation` parameters to the donation card link\n    this.updateDonationCardLink();\n  }\n\n  // Method to update the donation card link with the campaign and donation parameters\n  private updateDonationCardLink() {\n    // Since #donationCard is the link element, manipulate its href directly\n    const donationCardLinkElement = this.card.getElement() as HTMLAnchorElement;\n\n    if (!donationCardLinkElement) {\n      console.warn(\"donationCard element is not an anchor element.\");\n      return;\n    }\n\n    const currentHref = donationCardLinkElement.getAttribute(\"href\") || \"#\";\n    console.log(\"Current href before update:\", currentHref);\n\n    try {\n      if (localStorage.getItem(\"auth_config\")) {\n        // User is authenticated, proceed with adding campaign and donation parameters\n        const url = new URL(currentHref, window.location.origin);\n        url.searchParams.set(\"campaign\", this.campaignId);\n        url.searchParams.set(\"donation\", this.donationId.toString());\n        donationCardLinkElement.setAttribute(\"href\", url.toString());\n        console.log(\n          \"Updated donation card link with campaign and donation parameters:\",\n          url.toString()\n        );\n      } else {\n        // User is not authenticated, disable the link and make it non-interactive\n        donationCardLinkElement.setAttribute(\"href\", \"#\"); // Remove or set to a dummy link\n        donationCardLinkElement.style.pointerEvents = \"none\"; // Disable pointer events\n        //donationCardLinkElement.style.opacity = \"0.5\"; // Visually indicate disabled state\n        donationCardLinkElement.style.cursor = \"not-allowed\"; // Change cursor to indicate non-interactivity\n        console.log(\n          \"Auth_config not found. Donation card link disabled and made non-interactive.\"\n        );\n      }\n    } catch (error) {\n      console.error(\"Invalid URL in donationCard href:\", currentHref, error);\n      alert(\"An error occurred while updating the donation card link.\");\n    }\n  }\n\n  // Method to display the donation card\n  show() {\n    const cardElement = this.card.getElement();\n    if (cardElement instanceof HTMLElement) {\n      cardElement.style.display = \"block\";\n      console.log(\"Displayed donation card.\");\n    }\n  }\n}\n\n// Utility function to parse URL parameters\nconst getUrlParams = () => {\n  const params = new URLSearchParams(window.location.search);\n  const isDonationSuccessful = params.has(\"donation_successful\");\n  const donationId = params.get(\"donation\");\n  return { isDonationSuccessful, donationId };\n};\n\n// Main function to handle donation success\nexport const handleDonationSuccess = async () => {\n  console.log(\"Handling donation success\");\n  const { isDonationSuccessful, donationId } = getUrlParams();\n\n  if (isDonationSuccessful && donationId) {\n    try {\n      console.log(\"Fetching donation data...\");\n      // Make the GET request to fetch donation data\n      const request = apiClient.get<DonationResponse>(\n        `/success_page/donation/${donationId}`\n      );\n\n      // Wrap the event-based response in a Promise for easier handling\n      const donationData: DonationResponse[\"data\"] = await new Promise(\n        (resolve, reject) => {\n          request.onData((response) => {\n            console.log(\"Donation data received:\", response.data);\n            resolve(response.data);\n          });\n\n          request.onError((error) => {\n            console.error(\"API Error:\", error);\n            reject(error);\n          });\n\n          // Initiate the request\n          request.fetch();\n        }\n      );\n\n      // Trigger the success_trigger element (assuming it has an event listener)\n      const successTrigger = document.querySelector(\".success_trigger\");\n      if (successTrigger && successTrigger instanceof HTMLElement) {\n        console.log(\"Triggering success_trigger element.\");\n        successTrigger.click();\n      }\n\n      // Initialize and populate the donation card\n      const donationCard = new DonationCard(\"donationCard\");\n      donationCard.populate(donationData);\n      donationCard.show();\n    } catch (error) {\n      console.error(\"Error fetching donation data:\", error);\n      alert(\n        \"An error occurred while processing your donation. Please contact us for assistance.\"\n      );\n    }\n  } else {\n    console.log(\"Donation parameters not found in URL.\");\n    alert(\n      \"Donation parameters not found in the URL. Please check your link and try again.\"\n    );\n  }\n};\n"],"names":["modules","entry","mainEntry","parcelRequireName","globalName","globalObject","globalThis","self","window","global","previousRequire","cache","nodeRequire","module","require","bind","newRequire","name","jumped","currentRequire","err","Error","code","localRequire","resolve","x","id","Module","call","exports","res","isParcelRequire","moduleName","bundle","parent","register","Object","defineProperty","get","i","length","parcelHelpers","defineInteropFlag","export","initializeSuccessPage","_registrationSuccess","_ticketSuccess","_donationSuccess","getUrlParams","params","URLSearchParams","location","search","isRegistration","has","isTicketPurchase","isDonationSuccessful","clearLocalStorageExcept","exceptions","keysToRemove","localStorage","key","includes","push","forEach","removeItem","console","log","handleRegistrationSuccess","handleTicketSuccess","handleDonationSuccess","warn","_core","_image","_apiConfig","RegistrationCard","constructor","cardId","cardElement","document","getElementById","card","WFComponent","image","WFImage","getChildAsComponent","getElement","programName","workshopName","subscriptionType","invoiceDate","activePill","depositPill","successMessage","programId","populate","data","program","toString","setText","workshop","Name","subscription_type","formattedDate","next_charge_date","Date","toLocaleDateString","imageUrl","Main_Image","Success_Page_Message","setImage","imgElement","alt","setHTML","successMessageElement","style","display","status","toLowerCase","updateRegistrationLink","registrationLinkElement","currentHref","getAttribute","url","URL","origin","searchParams","set","setAttribute","error","show","subscriptionId","request","apiClient","registrationData","Promise","reject","onData","response","onError","fetch","successTrigger","querySelector","click","registrationCard","errorMessageElement","innerHTML","o","t","u","c","enumerable","configurable","getImageConfig","_config","getSrc","getSizes","getSrcSet","getLoading","onLoad","on","off","onLoadError","removeAttribute","src","srcSet","sizes","e","map","size","join","loading","keys","hasOwnProperty","n","TicketCard","orderId","productionName","performanceName","performanceDate","quantity","performanceId","performance_id","production_name","performance_name","performance_date_time","toLocaleString","image_url","HTMLElement","updateTicketOrderLink","order_uuid","orderUuid","ticketOrderLinkElement","getItem","newHref","encodeURIComponent","alert","ticketData","ticketCard","DonationCard","campaignName","campaignSubtitle","donationAmount","campaignId","donationId","campaign_id","campaign_name","subtitle","keep_anonymous","customer_first_name","amount","toFixed","updateDonationCardLink","donationCardLinkElement","pointerEvents","cursor","donationData","donationCard"],"version":3,"file":"success_page.e1ae326e.js.map"}