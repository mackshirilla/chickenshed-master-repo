{"mappings":"C,A,S,C,C,C,C,C,C,C,C,C,E,I,E,A,a,O,W,W,A,a,O,K,K,A,a,O,O,O,A,a,O,O,O,C,E,E,A,Y,O,C,C,E,E,C,C,E,C,E,E,K,E,C,E,E,A,a,O,Q,A,Y,O,O,O,E,O,O,C,I,C,Q,S,E,C,C,C,E,G,C,C,C,E,C,C,G,C,C,C,E,C,C,I,E,A,Y,O,C,C,E,E,C,C,E,C,G,C,G,E,O,E,E,C,G,G,E,O,E,E,C,G,G,G,A,U,O,E,O,E,G,I,E,A,M,uB,E,I,O,E,I,C,mB,C,C,E,O,C,S,C,E,I,E,C,C,E,C,E,C,E,C,O,A,M,E,E,C,E,E,K,C,C,E,I,E,C,C,E,C,I,E,M,C,G,C,C,E,C,E,C,I,C,E,O,C,E,E,E,O,C,I,C,C,O,C,C,E,C,O,C,S,E,C,E,I,E,E,O,C,G,M,A,C,I,E,C,E,E,E,C,C,E,e,C,C,E,E,M,C,S,C,E,I,C,E,C,E,I,C,M,C,E,I,C,O,C,C,C,E,E,O,C,E,E,K,C,E,E,M,C,E,E,Q,C,S,C,C,C,E,C,C,E,C,C,S,C,C,C,E,E,O,C,C,E,C,E,A,E,O,c,C,E,O,C,I,W,O,C,C,E,A,C,G,C,C,E,C,E,I,I,E,E,E,E,M,C,I,E,C,C,E,C,E,C,M,C,S,C,C,C,C,C,E,I,E,E,kD,E,iB,C,GCuIA,EAAA,MAAA,CAAA,EAAA,2BAAA,IAAsB,GArItB,IAAA,EAAA,EAAA,eACA,EAAA,EAAA,0BACA,EAAA,EAAA,8BACA,EAAA,EAAA,iCAkFA,eAAe,EACb,CAAkB,CAClB,CAAiB,CACjB,CAAiB,CACjB,CAAsB,EAEtB,GAAI,CAEF,IAAM,EAA2B,AAAA,CAAA,EAAA,EAAA,SAAQ,AAAR,EAAU,GAAG,CAC5C,CAAC,gCAAgC,EAAE,EAAU,CAAC,CAC9C,CACE,KAAM,CACJ,YAAa,EACb,WAAY,EACZ,WAAY,EACZ,aAAc,CAChB,CACF,GAIF,OADiB,MAAM,EAAyB,KAAK,EAEvD,CAAE,MAAO,EAAY,CAEnB,IAAI,EAAe,kDACf,GAAO,UAAU,MAAM,QACzB,EAAe,EAAM,QAAQ,CAAC,IAAI,CAAC,OAAO,CACjC,EAAM,OAAO,EACtB,CAAA,EAAe,EAAM,OA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","sources":["<anon>","src/modules/dashboard/registration/sessionDetails.ts","src/modules/dashboard/registration/components/removeStudent.ts","src/utils/validationUtils.ts","src/utils/formUtils.ts","node_modules/.pnpm/@xatom+image@1.0.0_@xatom+core@1.0.12/node_modules/@xatom/image/dist/index.js","src/modules/dashboard/registration/components/listSessionFiles.ts"],"sourcesContent":["// modules are defined as an array\n// [ module function, map of requires ]\n//\n// map of requires is short require name -> numeric require\n//\n// anything defined in a previous bundle is accessed via the\n// orig method which is the require for previous bundles\n\n(function (modules, entry, mainEntry, parcelRequireName, globalName) {\n  /* eslint-disable no-undef */\n  var globalObject =\n    typeof globalThis !== 'undefined'\n      ? globalThis\n      : typeof self !== 'undefined'\n      ? self\n      : typeof window !== 'undefined'\n      ? window\n      : typeof global !== 'undefined'\n      ? global\n      : {};\n  /* eslint-enable no-undef */\n\n  // Save the require from previous bundle to this closure if any\n  var previousRequire =\n    typeof globalObject[parcelRequireName] === 'function' &&\n    globalObject[parcelRequireName];\n\n  var cache = previousRequire.cache || {};\n  // Do not use `require` to prevent Webpack from trying to bundle this call\n  var nodeRequire =\n    typeof module !== 'undefined' &&\n    typeof module.require === 'function' &&\n    module.require.bind(module);\n\n  function newRequire(name, jumped) {\n    if (!cache[name]) {\n      if (!modules[name]) {\n        // if we cannot find the module within our internal map or\n        // cache jump to the current global require ie. the last bundle\n        // that was added to the page.\n        var currentRequire =\n          typeof globalObject[parcelRequireName] === 'function' &&\n          globalObject[parcelRequireName];\n        if (!jumped && currentRequire) {\n          return currentRequire(name, true);\n        }\n\n        // If there are other bundles on this page the require from the\n        // previous one is saved to 'previousRequire'. Repeat this as\n        // many times as there are bundles until the module is found or\n        // we exhaust the require chain.\n        if (previousRequire) {\n          return previousRequire(name, true);\n        }\n\n        // Try the node require function if it exists.\n        if (nodeRequire && typeof name === 'string') {\n          return nodeRequire(name);\n        }\n\n        var err = new Error(\"Cannot find module '\" + name + \"'\");\n        err.code = 'MODULE_NOT_FOUND';\n        throw err;\n      }\n\n      localRequire.resolve = resolve;\n      localRequire.cache = {};\n\n      var module = (cache[name] = new newRequire.Module(name));\n\n      modules[name][0].call(\n        module.exports,\n        localRequire,\n        module,\n        module.exports,\n        this\n      );\n    }\n\n    return cache[name].exports;\n\n    function localRequire(x) {\n      var res = localRequire.resolve(x);\n      return res === false ? {} : newRequire(res);\n    }\n\n    function resolve(x) {\n      var id = modules[name][1][x];\n      return id != null ? id : x;\n    }\n  }\n\n  function Module(moduleName) {\n    this.id = moduleName;\n    this.bundle = newRequire;\n    this.exports = {};\n  }\n\n  newRequire.isParcelRequire = true;\n  newRequire.Module = Module;\n  newRequire.modules = modules;\n  newRequire.cache = cache;\n  newRequire.parent = previousRequire;\n  newRequire.register = function (id, exports) {\n    modules[id] = [\n      function (require, module) {\n        module.exports = exports;\n      },\n      {},\n    ];\n  };\n\n  Object.defineProperty(newRequire, 'root', {\n    get: function () {\n      return globalObject[parcelRequireName];\n    },\n  });\n\n  globalObject[parcelRequireName] = newRequire;\n\n  for (var i = 0; i < entry.length; i++) {\n    newRequire(entry[i]);\n  }\n\n  if (mainEntry) {\n    // Expose entry point to Node, AMD or browser globals\n    // Based on https://github.com/ForbesLindesay/umd/blob/master/template.js\n    var mainExports = newRequire(mainEntry);\n\n    // CommonJS\n    if (typeof exports === 'object' && typeof module !== 'undefined') {\n      module.exports = mainExports;\n\n      // RequireJS\n    } else if (typeof define === 'function' && define.amd) {\n      define(function () {\n        return mainExports;\n      });\n\n      // <script>\n    } else if (globalName) {\n      this[globalName] = mainExports;\n    }\n  }\n})({\"fChp6\":[function(require,module,exports) {\n// src/pages/sessionDetails.ts\nvar parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\n// Main function to initialize session details\nparcelHelpers.export(exports, \"initializeSessionDetails\", ()=>initializeSessionDetails);\nvar _core = require(\"@xatom/core\");\nvar _apiConfig = require(\"../../../api/apiConfig\");\nvar _removeStudent = require(\"./components/removeStudent\");\nvar _listSessionFiles = require(\"./components/listSessionFiles\");\n// Function to trigger a click on the success_trigger element\nfunction triggerSuccessEvent(selector) {\n    const successTrigger = document.querySelector(selector);\n    if (successTrigger instanceof HTMLElement) successTrigger.click();\n}\n// Function to fetch session details from the API\nasync function fetchSessionDetails(workshopId, programId, sessionId, subscriptionId) {\n    try {\n        // Make the API request\n        const getSessionDetailsRequest = (0, _apiConfig.apiClient).get(`/dashboard/registration/session/${sessionId}`, {\n            data: {\n                workshop_id: workshopId,\n                program_id: programId,\n                session_id: sessionId,\n                subscription: subscriptionId\n            }\n        });\n        const response = await getSessionDetailsRequest.fetch();\n        return response;\n    } catch (error) {\n        // Extract and display the error message\n        let errorMessage = \"An unexpected error occurred. Please try again.\";\n        if (error?.response?.data?.message) errorMessage = error.response.data.message;\n        else if (error.message) errorMessage = error.message;\n        // Display the error message in an alert box\n        alert(`Error: ${errorMessage}`);\n        // Navigate back to the previous page with a fallback\n        window.history.length > 1 ? window.history.back() : window.location.href = \"/dashboard/registrations\";\n        // Log the error for debugging purposes\n        console.error(\"Fetch Session Details Error:\", error);\n        // Return undefined to indicate failure\n        return undefined;\n    }\n}\nasync function initializeSessionDetails() {\n    // initialize files\n    (0, _listSessionFiles.initializeDynamicSessionFileList)(\"#filesList\");\n    const params = new URLSearchParams(window.location.search);\n    const workshopId = params.get(\"workshop\") || \"none\"; // Use \"none\" if workshopId is not provided\n    const programId = params.get(\"program\");\n    const sessionId = params.get(\"session\");\n    const subscriptionId = params.get(\"subscription\");\n    if (!programId || !sessionId || !subscriptionId) {\n        displayError(\"Invalid access. Program ID, Session ID, or Subscription ID is missing.\");\n        return;\n    }\n    // Fetch session details with program and subscription params\n    const sessionDetails = await fetchSessionDetails(workshopId, programId, sessionId, subscriptionId);\n    // If fetchSessionDetails encounters an error, it handles it and navigates back,\n    // so the following code will not execute in that case.\n    if (!sessionDetails) // In case fetchSessionDetails returns undefined due to an error\n    return;\n    const { workshop, subscription, program, students, location, session, caregiver } = sessionDetails;\n    if (sessionDetails && location && students && session) {\n        // Populate UI Elements\n        if (workshop) populateWorkshopDetails(workshop);\n        else populateProgramDetailsAsWorkshop(program);\n        populateSessionDetails(session, location);\n        initializeStudentList(students);\n        updateBreadcrumbs(program, workshop, session, subscriptionId, workshopId, caregiver);\n        // Initialize RemoveStudentDialog with relevant data\n        initializeRemoveStudentDialog(subscription.id, sessionId, students, caregiver);\n        // Trigger the success_trigger element\n        triggerSuccessEvent(\".success_trigger\");\n    } else displayError(\"Failed to fetch session details. Incomplete data.\");\n}\n// Function to populate workshop details (if workshop is available)\nfunction populateWorkshopDetails(workshop) {\n    const workshopName = new (0, _core.WFComponent)(\"#workshopName\"); // Changed to class selector\n    workshopName.setText(workshop.fieldData.name);\n    const workshopShortDescription = new (0, _core.WFComponent)(\"#workshopShortDescription\"); // Changed to class selector\n    workshopShortDescription.setText(workshop.fieldData[\"short-description\"]);\n}\n// Function to populate program details as workshop details (fallback if workshop is unavailable)\nfunction populateProgramDetailsAsWorkshop(program) {\n    const workshopName = new (0, _core.WFComponent)(\"#workshopName\"); // Changed to class selector\n    workshopName.setText(program.fieldData.name);\n    const workshopShortDescription = new (0, _core.WFComponent)(\"#workshopShortDescription\"); // Changed to class selector\n    workshopShortDescription.setText(program.fieldData[\"short-description\"]);\n}\n// Function to populate session details, including location and time\nfunction populateSessionDetails(session, location) {\n    const sessionWeekday = new (0, _core.WFComponent)(\"#sessionWeekday\"); // Changed to class selector\n    sessionWeekday.setText(session.fieldData.weekday);\n    const sessionTime = new (0, _core.WFComponent)(\"#sessionTime\"); // Changed to class selector\n    sessionTime.setText(session.fieldData[\"time-block\"]);\n    const sessionLocation = new (0, _core.WFComponent)(\"#sessionLocation\"); // Changed to class selector\n    sessionLocation.setText(location.fieldData.name);\n    const sessionLocationMap = new (0, _core.WFComponent)(\"#sessionLocationMap\"); // Changed to class selector\n    sessionLocationMap.setHTML(location.fieldData[\"map-embed\"]);\n    // Apply styling to make sure the map and its container fill properly\n    const figureElement = document.querySelector(\"#sessionLocationMap figure\" // Changed to class selector\n    );\n    const iframeElement = document.querySelector(\"#sessionLocationMap iframe\" // Changed to class selector\n    );\n    const firstChildDiv = document.querySelector(\"#sessionLocationMap figure > div\" // Changed to class selector\n    );\n    if (figureElement) {\n        figureElement.style.width = \"100%\";\n        figureElement.style.height = \"100%\";\n        figureElement.style.padding = \"0\";\n        figureElement.style.margin = \"0\";\n    }\n    if (firstChildDiv) firstChildDiv.style.height = \"100%\";\n    if (iframeElement) {\n        iframeElement.style.width = \"100%\";\n        iframeElement.style.height = \"100%\";\n        iframeElement.style.border = \"0\";\n    }\n}\n// Function to initialize student list\nfunction initializeStudentList(students) {\n    const list = new (0, _core.WFDynamicList)(\"#listStudentProfiles\", {\n        // Changed selector to class\n        rowSelector: \"#listStudentCard\",\n        loaderSelector: \"#listStudentProfilesloading\",\n        emptySelector: \"#listStudentProfilesEmpty\"\n    });\n    list.rowRenderer(({ rowData, rowElement })=>{\n        const studentCard = new (0, _core.WFComponent)(rowElement);\n        const studentNameComponent = studentCard.getChildAsComponent(\"#studentName\"); // Changed to class selector\n        const studentImageComponent = studentCard.getChildAsComponent(\"#listStudentCardImage\" // Changed to class selector\n        );\n        const studentLinkComponent = studentCard.getChildAsComponent(\"#studentLink\"); // Changed to class selector\n        const removeButtonComponent = studentCard.getChildAsComponent(\".remove_button\"); // Select by class\n        studentNameComponent?.setText(rowData.student_name);\n        studentImageComponent?.setAttribute(\"src\", rowData.image_url);\n        // Append ?id={student_id} to the link\n        const studentId = rowData.student_profile_id;\n        const existingHref = studentLinkComponent?.getAttribute(\"href\") || \"#\";\n        const url = new URL(existingHref, window.location.origin);\n        url.searchParams.set(\"id\", studentId.toString());\n        studentLinkComponent?.setAttribute(\"href\", url.toString());\n        // **Set data attributes on remove button**\n        removeButtonComponent?.setAttribute(\"data-student-id\", studentId.toString());\n        removeButtonComponent?.setAttribute(\"data-subscription-item-id\", rowData.id.toString());\n        // **Set data-student-id on the row element for easy removal later**\n        rowElement.setAttribute(\"data-student-id\", studentId.toString());\n        return rowElement;\n    });\n    // Set data to be displayed in the list\n    list.setData(students);\n}\n// Function to update breadcrumbs with program, workshop, and session details\nfunction updateBreadcrumbs(program, workshop, session, subscriptionId, workshopId, caregiver) {\n    // Update program breadcrumb\n    const programBreadcrumbElement = document.querySelector(\"#programBreadcrumb\"); // Changed to class selector\n    if (programBreadcrumbElement) {\n        const programBreadcrumb = new (0, _core.WFComponent)(programBreadcrumbElement);\n        programBreadcrumb.setText(program.fieldData.name);\n        // Update href attribute with program parameter\n        const currentHref = programBreadcrumbElement.getAttribute(\"href\") || \"#\";\n        const url = new URL(currentHref, window.location.origin);\n        url.searchParams.set(\"program\", program.id);\n        programBreadcrumb.setAttribute(\"href\", url.toString());\n    }\n    // Update workshop breadcrumb if workshop exists, otherwise fallback to program name\n    const workshopBreadcrumbElement = document.querySelector(\"#workshopBreadcrumb\"); // Changed to class selector\n    if (workshopBreadcrumbElement) {\n        const workshopBreadcrumb = new (0, _core.WFComponent)(workshopBreadcrumbElement);\n        if (workshop) workshopBreadcrumb.setText(workshop.fieldData.name);\n        else workshopBreadcrumb.setText(program.fieldData.name);\n        // Update href attribute with program, subscription, and optionally workshop parameters\n        const currentHref = workshopBreadcrumbElement.getAttribute(\"href\") || \"#\";\n        const url = new URL(currentHref, window.location.origin);\n        url.searchParams.set(\"program\", program.id);\n        url.searchParams.set(\"subscription\", subscriptionId);\n        if (workshop && workshopId !== \"none\") url.searchParams.set(\"workshop\", workshopId);\n        workshopBreadcrumb.setAttribute(\"href\", url.toString());\n    }\n    // Update session breadcrumb\n    const sessionBreadcrumbElement = document.querySelector(\"#sessionBreadcrumb\"); // Changed to class selector\n    if (sessionBreadcrumbElement) {\n        const sessionBreadcrumb = new (0, _core.WFComponent)(sessionBreadcrumbElement);\n        // Set the text to the combination of the session weekday and time block\n        const sessionText = `${session.fieldData.weekday}, ${session.fieldData[\"time-block\"]}`;\n        sessionBreadcrumb.setText(sessionText);\n    }\n    // Handle Breadcrumbs based on caregiver flag\n    handleBreadcrumbs(caregiver, program, workshop, session, subscriptionId, workshopId);\n}\n// Function to handle Breadcrumbs based on caregiver flag\nfunction handleBreadcrumbs(caregiver, program, workshop, session, subscriptionId, workshopId) {\n    if (caregiver) {\n        // Remove all .remove_button_wrap elements from the DOM\n        const removeButtons = document.querySelectorAll(\".remove_button_wrap\");\n        removeButtons.forEach((btn)=>btn.remove());\n        // Hide userBreadcrumbList and show caregiverBreadcrumbList\n        const userBreadcrumbList = document.querySelector(\"#userBreadcumbList\"); // Changed to class selector\n        const caregiverBreadcrumbList = document.querySelector(\"#caregiverBreadcrumbList\" // Changed to class selector\n        );\n        if (userBreadcrumbList) userBreadcrumbList.setAttribute(\"style\", \"display: none;\");\n        if (caregiverBreadcrumbList) caregiverBreadcrumbList.setAttribute(\"style\", \"display: flex;\");\n        // Fetch caregiver_breadcrumbs from localStorage\n        const caregiverBreadcrumbs = localStorage.getItem(\"caregiver_breadcrumbs\");\n        if (caregiverBreadcrumbs) try {\n            const breadcrumbs = JSON.parse(caregiverBreadcrumbs);\n            // Update studentBreadcrumb link\n            const studentBreadcrumb = document.querySelector(\"#studentBreadcrumb\"); // Changed to class selector\n            if (studentBreadcrumb) {\n                const studentBreadcrumbComponent = new (0, _core.WFComponent)(studentBreadcrumb);\n                studentBreadcrumbComponent.setText(breadcrumbs.student_name);\n                // Update href with ?id={student_id}\n                const currentHref = studentBreadcrumb.getAttribute(\"href\") || \"/dashboard/student/profile\";\n                const url = new URL(currentHref, window.location.origin);\n                url.searchParams.set(\"id\", breadcrumbs.student_id.toString());\n                studentBreadcrumbComponent.setAttribute(\"href\", url.toString());\n            }\n            // Update caregiverWorkshopBreadcrumb text\n            const caregiverWorkshopBreadcrumb = document.querySelector(\"#caregiverWorkshopBreadcrumb\" // Changed to class selector\n            );\n            if (caregiverWorkshopBreadcrumb) {\n                const workshopBreadcrumbComponent = new (0, _core.WFComponent)(caregiverWorkshopBreadcrumb);\n                // Use workshop_name if present, otherwise use program_name\n                const workshopName = breadcrumbs.workshop_name ? breadcrumbs.workshop_name : breadcrumbs.program_name;\n                workshopBreadcrumbComponent.setText(workshopName);\n                // Update href with program, subscription, and optionally workshop parameters\n                const currentHref = caregiverWorkshopBreadcrumb.getAttribute(\"href\") || \"#\";\n                const url = new URL(currentHref, window.location.origin);\n                url.searchParams.set(\"program\", breadcrumbs.program_id);\n                url.searchParams.set(\"subscription\", breadcrumbs.subscription_id.toString());\n                if (breadcrumbs.workshop_id && breadcrumbs.workshop_id !== \"none\") url.searchParams.set(\"workshop\", breadcrumbs.workshop_id);\n                caregiverWorkshopBreadcrumb.setAttribute(\"href\", url.toString());\n            }\n            // Update caregiverSessionBreadcrumb with session details\n            const caregiverSessionBreadcrumb = document.querySelector(\"#caregiverSessionBreadcrumb\" // Changed to class selector\n            );\n            if (caregiverSessionBreadcrumb) {\n                const sessionBreadcrumbComponent = new (0, _core.WFComponent)(caregiverSessionBreadcrumb);\n                const sessionText = `${breadcrumbs.session_weekday}, ${breadcrumbs.session_time_block}`;\n                sessionBreadcrumbComponent.setText(sessionText);\n            }\n        } catch (parseError) {\n            console.error(\"Error parsing caregiver_breadcrumbs from localStorage:\", parseError);\n            alert(\"Failed to load caregiver breadcrumbs. Please try again.\");\n        }\n        else {\n            console.warn(\"No caregiver_breadcrumbs found in localStorage.\");\n            alert(\"Caregiver breadcrumbs data is missing.\");\n        }\n    } else {\n        // If not a caregiver, ensure userBreadcrumbList is visible and caregiverBreadcrumbList is hidden\n        const userBreadcrumbList = document.querySelector(\"#userBreadcumbList\"); // Changed to class selector\n        const caregiverBreadcrumbList = document.querySelector(\"#caregiverBreadcrumbList\" // Changed to class selector\n        );\n        if (userBreadcrumbList) userBreadcrumbList.setAttribute(\"style\", \"display: flex;\");\n        if (caregiverBreadcrumbList) caregiverBreadcrumbList.setAttribute(\"style\", \"display: none;\");\n    }\n}\n// Function to initialize RemoveStudentDialog\nfunction initializeRemoveStudentDialog(subscriptionId, sessionId, students, caregiver) {\n    if (caregiver) // If caregiver, you might want to handle dialogs differently or disable certain actions\n    // For now, we'll assume caregivers don't need the RemoveStudentDialog\n    return;\n    // Create a new instance of RemoveStudentDialog\n    new (0, _removeStudent.RemoveStudentDialog)({\n        subscriptionId,\n        sessionId,\n        students: students.map((student)=>({\n                id: student.id,\n                student_profile_id: student.student_profile_id,\n                student_name: student.student_name\n            }))\n    });\n}\n// Function to display an error message on the page and in an alert box\nfunction displayError(message) {\n    const errorElement = document.querySelector(\"#listRegistrationEmpty\"); // Changed to class selector\n    if (errorElement) {\n        errorElement.innerHTML = `<div>${message}</div>`;\n        errorElement.setAttribute(\"style\", \"display: flex;\");\n    }\n    // Also display the error in an alert box\n    alert(`Error: ${message}`);\n}\n// Function to initialize and render the past invoices list using fetched data\nasync function initializePastInvoicesList(containerSelector, invoices) {\n    // Initialize a new instance of WFDynamicList for Invoices\n    const list = new (0, _core.WFDynamicList)(containerSelector, {\n        rowSelector: \"#invoiceLine\"\n    });\n    // Customize the rendering of the loader\n    list.loaderRenderer((loaderElement)=>{\n        loaderElement.setStyle({\n            display: \"flex\"\n        });\n        return loaderElement;\n    });\n    // Customize the rendering of the empty state\n    list.emptyRenderer((emptyElement)=>{\n        emptyElement.setStyle({\n            display: \"flex\"\n        });\n        return emptyElement;\n    });\n    // Customize the rendering of list items (Invoice Rows)\n    list.rowRenderer(({ rowData, rowElement })=>{\n        const invoiceRow = new (0, _core.WFComponent)(rowElement);\n        // Set the invoice date\n        const invoiceDateComponent = invoiceRow.getChildAsComponent(\"#invoiceDate\"); // Changed to class selector\n        if (invoiceDateComponent) {\n            const invoiceDate = new (0, _core.WFComponent)(invoiceDateComponent.getElement());\n            const formattedDate = new Date(rowData.created_at).toLocaleDateString();\n            invoiceDate.setText(formattedDate);\n        }\n        // Set the invoice amount\n        const invoiceAmountComponent = invoiceRow.getChildAsComponent(\"#invoiceAmount\"); // Changed to class selector\n        if (invoiceAmountComponent) {\n            const invoiceAmount = new (0, _core.WFComponent)(invoiceAmountComponent.getElement());\n            invoiceAmount.setText(`$${rowData.amount_total}`);\n        }\n        // Set the receipt link\n        const receiptButtonComponent = invoiceRow.getChildAsComponent(\"#receiptButton\"); // Changed to class selector\n        if (receiptButtonComponent) {\n            const receiptButton = new (0, _core.WFComponent)(receiptButtonComponent.getElement());\n            receiptButton.setAttribute(\"href\", rowData.reciept_url);\n        }\n        // Show the list item\n        rowElement.setAttribute(\"style\", \"display: table-row;\");\n        return rowElement;\n    });\n    // Load and display invoice data\n    try {\n        // Enable the loading state\n        list.changeLoadingStatus(true);\n        // Set the data to be displayed in the dynamic list\n        list.setData(invoices);\n        // Disable the loading state\n        list.changeLoadingStatus(false);\n    } catch (error) {\n        console.error(\"Error initializing past invoices list:\", error);\n        alert(\"Failed to load past invoices. Please try again.\");\n        list.setData([]);\n        list.changeLoadingStatus(false);\n    }\n}\n\n},{\"@xatom/core\":\"65YBq\",\"../../../api/apiConfig\":\"dUmIV\",\"./components/removeStudent\":\"j5BUu\",\"./components/listSessionFiles\":\"9Xmw3\",\"@parcel/transformer-js/src/esmodule-helpers.js\":\"jiucr\"}],\"j5BUu\":[function(require,module,exports) {\n// src/pages/removeStudent.ts\nvar parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"RemoveStudentDialog\", ()=>RemoveStudentDialog);\nvar _core = require(\"@xatom/core\");\nvar _apiConfig = require(\"../../../../api/apiConfig\");\nvar _validationUtils = require(\"../../../../utils/validationUtils\");\nvar _formUtils = require(\"../../../../utils/formUtils\");\nclass RemoveStudentDialog {\n    constructor(options){\n        const { subscriptionId, sessionId, students } = options;\n        this.subscriptionId = subscriptionId;\n        this.sessionId = sessionId;\n        this.students = students;\n        this.dialog = new (0, _core.WFComponent)(\"#removeStudentDialog\"); // Changed to class selector\n        this.removeForm = new (0, _core.WFFormComponent)(\"#cancelSubscriptionForm\"); // Changed to class selector\n        this.pageMain = new (0, _core.WFComponent)(\".page_main\");\n        this.initialize();\n    }\n    initialize() {\n        // Attach event listeners to the remove buttons\n        const removeButtons = document.querySelectorAll(\".remove_button\"); // Updated selector to class\n        if (removeButtons.length === 0) {\n            console.error(\"Remove buttons not found\");\n            return;\n        }\n        removeButtons.forEach((button)=>{\n            button.addEventListener(\"click\", (event)=>{\n                const target = event.currentTarget;\n                // Extract data attributes\n                const studentProfileId = target.getAttribute(\"data-student-id\");\n                const subscriptionItemId = target.getAttribute(\"data-subscription-item-id\");\n                console.log(\"Clicked remove button:\", {\n                    studentProfileId,\n                    subscriptionItemId\n                });\n                if (!studentProfileId || !subscriptionItemId) {\n                    console.error(\"Missing data attributes on remove button\", {\n                        studentProfileId,\n                        subscriptionItemId\n                    });\n                    alert(\"Unable to remove student. Missing necessary data.\");\n                    return;\n                }\n                // Find the student using the `student_profile_id`\n                const student = this.students.find((s)=>s.student_profile_id.toString() === studentProfileId);\n                if (student) {\n                    this.studentId = student.student_profile_id.toString();\n                    this.subscriptionItemId = student.id; // This is the `subscription_item_id` we need\n                    this.openDialog(student.student_name);\n                } else {\n                    console.error(\"Student not found in provided student list\", {\n                        studentProfileId,\n                        students: this.students\n                    });\n                    alert(\"Student not found. Please try again.\");\n                }\n            });\n        });\n        // Setup close button listener\n        const closeButton = new (0, _core.WFComponent)(\"#close-dialog-btn\"); // Changed to class selector\n        if (closeButton.getElement()) closeButton.on(\"click\", ()=>{\n            this.closeDialog();\n        });\n        else console.error(\"Close dialog button not found\");\n        // Setup form submission handling\n        this.setupFormSubmission();\n        this.setupFormValidation();\n    }\n    openDialog(studentName) {\n        if (this.dialog.getElement() && this.pageMain.getElement()) {\n            console.log(\"Opening remove student dialog\");\n            const studentNameElement = new (0, _core.WFComponent)(\"#removeStudentName\"); // Changed to class selector\n            studentNameElement.setText(studentName);\n            // Update page_main data-brand attribute\n            if (this.pageMain.getElement()) this.pageMain.setAttribute(\"data-brand\", \"6\");\n            else console.error(\"page_main element not found\");\n            const dialogElement = this.dialog.getElement();\n            if (dialogElement) dialogElement.showModal(); // Using `showModal()` to ensure it behaves as a modal\n            else console.error(\"Dialog element not found\");\n        } else console.error(\"Dialog or page_main element not found\");\n    }\n    closeDialog() {\n        if (this.dialog.getElement() && this.pageMain.getElement()) {\n            console.log(\"Closing remove student dialog\");\n            // Reset page_main data-brand attribute\n            if (this.pageMain.getElement()) this.pageMain.setAttribute(\"data-brand\", \"2\");\n            else console.error(\"page_main element not found\");\n            const dialogElement = this.dialog.getElement();\n            if (dialogElement) dialogElement.close(); // Using `close()` to properly close the dialog\n            else console.error(\"Dialog element not found\");\n        } else console.error(\"Dialog or page_main element not found\");\n    }\n    setupFormSubmission() {\n        this.removeForm.onFormSubmit(async (formData, event)=>{\n            event.preventDefault(); // Prevent form default submission\n            event.stopPropagation(); // Stop any other event listeners on the form\n            console.log(\"Remove student form submission intercepted\");\n            const reason = formData.removed_because;\n            if (!(0, _validationUtils.validateNotEmpty)(reason)) {\n                const errorComponent = new (0, _core.WFComponent)(\"#removedReasonError\"); // Changed to class selector\n                (0, _formUtils.toggleError)(errorComponent, \"Reason for removing the student is required.\", true);\n                return;\n            }\n            try {\n                // Show loading animation\n                this.setLoadingState(true);\n                if (!this.studentId || !this.subscriptionItemId) throw new Error(\"No student ID or subscription item ID found for removal.\");\n                // Make DELETE request to API to remove student\n                console.log(\"Submitting removal to API for student ID:\", this.studentId, \"with subscription item ID:\", this.subscriptionItemId);\n                const response = await (0, _apiConfig.apiClient).delete(`/subscriptions/${this.subscriptionId}/session/${this.sessionId}/student/${this.studentId}`, {\n                    data: {\n                        reason: reason,\n                        subscription_item_id: this.subscriptionItemId\n                    }\n                }).fetch();\n                if (response) {\n                    console.log(\"Student removed successfully\");\n                    // Clear any previous error messages\n                    const errorComponent = new (0, _core.WFComponent)(\"#removedReasonError\"); // Changed to class selector\n                    (0, _formUtils.toggleError)(errorComponent, \"\", false); // Explicitly hide error on success\n                    // Close dialog and remove student from UI\n                    this.closeDialog();\n                    this.removeStudentFromUI(this.studentId);\n                } else throw new Error(\"Unexpected response received from student removal API.\");\n            } catch (error) {\n                console.error(\"Error removing student: \", error);\n                this.showErrorMessage(\"Oops! Something went wrong while submitting the form.\");\n            } finally{\n                // Hide loading animation\n                this.setLoadingState(false);\n            }\n        });\n    }\n    setupFormValidation() {\n        const reasonInput = new (0, _core.WFComponent)(\"#removedReason\"); // Changed to class selector\n        const reasonErrorComponent = new (0, _core.WFComponent)(\"#removedReasonError\"); // Changed to class selector\n        if (!reasonInput.getElement() || !reasonErrorComponent.getElement()) {\n            console.error(\"Reason input or error component not found for validation\");\n            return;\n        }\n        const validateReason = (0, _formUtils.createValidationFunction)(reasonInput, (input)=>(0, _validationUtils.validateNotEmpty)(input), \"Reason for removing the student is required.\");\n        (0, _formUtils.setupValidation)(reasonInput, reasonErrorComponent, validateReason);\n    }\n    setLoadingState(isLoading) {\n        const loadingAnimation = new (0, _core.WFComponent)(\"#removeStudentRequesting\"); // Changed to class selector\n        const submitButton = new (0, _core.WFComponent)(\"#removeStudentSubmit\"); // Changed to class selector\n        if (loadingAnimation.getElement() && submitButton.getElement()) {\n            if (isLoading) {\n                loadingAnimation.setStyle({\n                    display: \"block\"\n                });\n                submitButton.setAttribute(\"disabled\", \"true\");\n            } else {\n                loadingAnimation.setStyle({\n                    display: \"none\"\n                });\n                submitButton.removeAttribute(\"disabled\");\n            }\n        } else console.error(\"Loading animation or submit button not found for setting loading state\");\n    }\n    removeStudentFromUI(studentId) {\n        const studentRow = document.querySelector(`#listStudentCard[data-student-id=\"${studentId}\"]`);\n        if (studentRow) {\n            studentRow.remove();\n            console.log(`Removed student row with data-student-id=\"${studentId}\" from UI.`);\n        } else console.error(`Student row with data-student-id=\"${studentId}\" not found in DOM.`);\n    }\n    showErrorMessage(message) {\n        const errorElement = new (0, _core.WFComponent)(\"#submitInviteCaregiverError\"); // Changed to class selector\n        if (errorElement.getElement()) {\n            errorElement.setText(message);\n            errorElement.setStyle({\n                display: \"flex\"\n            });\n        } else console.error(\"Error element not found for showing error message\");\n    }\n}\n\n},{\"@xatom/core\":\"65YBq\",\"../../../../api/apiConfig\":\"dUmIV\",\"../../../../utils/validationUtils\":\"gu2z7\",\"../../../../utils/formUtils\":\"gepHz\",\"@parcel/transformer-js/src/esmodule-helpers.js\":\"jiucr\"}],\"gu2z7\":[function(require,module,exports) {\nvar parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"validateNotEmpty\", ()=>validateNotEmpty);\nparcelHelpers.export(exports, \"validateEmail\", ()=>validateEmail);\nparcelHelpers.export(exports, \"validateEmailOptional\", ()=>validateEmailOptional);\nparcelHelpers.export(exports, \"validatePasswordRequirements\", ()=>validatePasswordRequirements);\nparcelHelpers.export(exports, \"validateCheckbox\", ()=>validateCheckbox);\nparcelHelpers.export(exports, \"validatePasswordsMatch\", ()=>validatePasswordsMatch);\nparcelHelpers.export(exports, \"validateSelectField\", ()=>validateSelectField);\nparcelHelpers.export(exports, \"validatePhoneNumber\", ()=>validatePhoneNumber);\nfunction validateNotEmpty(input) {\n    return input !== undefined && input.trim() !== \"\";\n}\nfunction validateEmail(input) {\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    return emailRegex.test(input);\n}\nconst validateEmailOptional = (value)=>{\n    if (value.trim() === \"\") // Email is optional, so empty string is valid\n    return true;\n    // Validate the email format if not empty\n    return validateEmail(value);\n};\nfunction validatePasswordRequirements(password) {\n    const hasLowercase = /[a-z]/.test(password);\n    const hasUppercase = /[A-Z]/.test(password);\n    const hasDigit = /\\d/.test(password);\n    const hasSpecialChar = /[!@#$%^&*(),.?\":{}|<>]/.test(password);\n    const hasValidLength = password.length >= 8;\n    return hasLowercase && hasUppercase && hasDigit && hasSpecialChar && hasValidLength;\n}\nfunction validateCheckbox(checked) {\n    return checked;\n}\nfunction validatePasswordsMatch(originalPassword, confirmPassword) {\n    return originalPassword === confirmPassword;\n}\nfunction validateSelectField(input) {\n    return input !== undefined && input !== \"N/A\";\n}\nfunction validatePhoneNumber(input) {\n    const phoneRegex = /^\\(\\d{3}\\)\\s\\d{3}-\\d{4}$/;\n    return phoneRegex.test(input);\n}\n\n},{\"@parcel/transformer-js/src/esmodule-helpers.js\":\"jiucr\"}],\"gepHz\":[function(require,module,exports) {\nvar parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"toggleError\", ()=>toggleError);\nparcelHelpers.export(exports, \"setupValidation\", ()=>setupValidation);\nparcelHelpers.export(exports, \"createValidationFunction\", ()=>createValidationFunction);\nparcelHelpers.export(exports, \"createCheckboxValidationFunction\", ()=>createCheckboxValidationFunction);\nparcelHelpers.export(exports, \"setupCheckboxValidation\", ()=>setupCheckboxValidation);\nparcelHelpers.export(exports, \"validateSelectedSessions\", ()=>validateSelectedSessions);\n/**\n * Updates the user's profile picture URL in the authentication system.\n * @param {string} imageUrl - The URL of the uploaded image.\n */ parcelHelpers.export(exports, \"setProfilePicUrl\", ()=>setProfilePicUrl);\n/**\n * Handles file upload and displays the uploaded image.\n * @param {WFComponent} fileInput - The WFComponent instance for the file input field.\n * @param {WFComponent} fileInputError - The WFComponent instance for displaying error messages.\n * @param {WFComponent} fileInputSuccess - The WFComponent instance for displaying success messages.\n * @param {string} uploadEndpoint - The endpoint to which the file is sent.\n * @returns {Promise<string>} A promise that resolves with the URL of the uploaded image.\n */ /**\n * Handles file upload and displays the uploaded image.\n * Only JPEG files less than 2 MB can be uploaded.\n * @param {WFComponent} fileInput - The WFComponent instance for the file input field.\n * @param {WFComponent} fileInputError - The WFComponent instance for displaying error messages.\n * @param {WFComponent} fileInputSuccess - The WFComponent instance for displaying success messages.\n * @param {string} uploadEndpoint - The endpoint to which the file is sent.\n * @returns {Promise<string>} A promise that resolves with the URL of the uploaded image.\n */ parcelHelpers.export(exports, \"setupFileUpload\", ()=>setupFileUpload);\nparcelHelpers.export(exports, \"formatPhoneNumber\", ()=>formatPhoneNumber);\nvar _core = require(\"@xatom/core\");\nvar _image = require(\"@xatom/image\");\nvar _apiConfig = require(\"../api/apiConfig\");\nvar _authConfig = require(\"../auth/authConfig\");\nfunction toggleError(errorMessageComponent, message, show) {\n    errorMessageComponent.updateTextViaAttrVar({\n        text: show ? message : \"\"\n    });\n    errorMessageComponent.setStyle({\n        display: show ? \"flex\" : \"none\"\n    });\n}\nfunction setupValidation(inputComponent, errorComponent, validate, requestErrorComponent // Optional component to clear on input change\n) {\n    const validateAndUpdate = ()=>{\n        const errorMessage = validate();\n        toggleError(errorComponent, errorMessage, !!errorMessage);\n        if (requestErrorComponent && errorMessage === \"\") // Clear request error message when the user is correcting the input\n        toggleError(requestErrorComponent, \"\", false);\n    };\n    // Attach event listeners for real-time validation\n    inputComponent.on(\"input\", validateAndUpdate);\n    inputComponent.on(\"blur\", validateAndUpdate);\n    inputComponent.on(\"change\", validateAndUpdate);\n}\nfunction createValidationFunction(inputComponent, validationFn, errorMessage) {\n    return ()=>{\n        const inputElement = inputComponent.getElement();\n        const isValid = validationFn(inputElement.value);\n        return isValid ? \"\" : errorMessage;\n    };\n}\nfunction createCheckboxValidationFunction(checkboxComponent, errorMessage) {\n    return ()=>{\n        const checkbox = checkboxComponent.getElement();\n        return checkbox.checked ? \"\" : errorMessage;\n    };\n}\nfunction setupCheckboxValidation(checkboxComponent, checkboxErrorComponent, errorMessage) {\n    const validate = createCheckboxValidationFunction(checkboxComponent, errorMessage);\n    setupValidation(checkboxComponent, checkboxErrorComponent, validate);\n}\nfunction validateSelectedSessions(selectedSessions, errorMessageComponent, errorMessage) {\n    const isValid = selectedSessions.length > 0 && selectedSessions.some((session)=>session.studentIds.length > 0);\n    if (!isValid) toggleError(errorMessageComponent, errorMessage, true);\n    else toggleError(errorMessageComponent, \"\", false);\n    return isValid;\n}\nfunction setProfilePicUrl(imageUrl) {\n    const user = (0, _authConfig.userAuth).getUser();\n    if (user && user.profile) {\n        // Ensure the profile_picture object exists\n        user.profile.profile_pic = user.profile.profile_pic || {\n            url: \"\"\n        };\n        // Set the profile picture URL\n        user.profile.profile_pic.url = imageUrl;\n        (0, _authConfig.userAuth).setUser(user);\n        localStorage.setItem(\"auth_user\", JSON.stringify(user));\n    }\n}\nfunction setupFileUpload(fileInput, fileInputError, fileInputSuccess, uploadEndpoint) {\n    const profilePictureImage = new (0, _image.WFImage)(\"#profilePictureImage\");\n    const uploadAnimation = new (0, _core.WFComponent)(\"#uploadAnimation\");\n    const overlay = new (0, _core.WFComponent)(\".drop-zone\");\n    let dragCounter = 0;\n    return new Promise((resolve)=>{\n        const handleFile = (file)=>{\n            // Validate file type and size\n            const validTypes = [\n                \"image/jpeg\",\n                \"image/jpg\"\n            ];\n            const maxSizeInBytes = 2097152; // 2 MB\n            if (!validTypes.includes(file.type) && !/\\.(jpg|jpeg)$/i.test(file.name)) {\n                const errorMessage = \"Only JPEG images are allowed.\";\n                toggleError(fileInputError, errorMessage, true);\n                // Reset file input value\n                fileInput.getElement().value = \"\";\n                return;\n            }\n            if (file.size > maxSizeInBytes) {\n                const errorMessage = \"File size must be less than 2 MB.\";\n                toggleError(fileInputError, errorMessage, true);\n                // Reset file input value\n                fileInput.getElement().value = \"\";\n                return;\n            }\n            // Show upload animation immediately\n            uploadAnimation.setStyle({\n                display: \"flex\"\n            });\n            // Hide error and success messages\n            fileInputError.setStyle({\n                display: \"none\"\n            });\n            fileInputSuccess.setStyle({\n                display: \"none\"\n            });\n            const reader = new FileReader();\n            // Display preview image as soon as the file is loaded into memory\n            reader.onload = (event)=>{\n                // Set the preview image for the profile picture\n                const result = event.target?.result;\n                profilePictureImage.setImage(result);\n                // Hide overlay once the image is set\n                overlay.setStyle({\n                    display: \"none\"\n                });\n            };\n            reader.readAsDataURL(file);\n            const formData = new FormData();\n            formData.append(\"profile_picture\", file);\n            const existingStudent = localStorage.getItem(\"current_student\");\n            if (existingStudent) {\n                const student = JSON.parse(existingStudent);\n                formData.append(\"student_profile_id\", student.id.toString());\n            }\n            // Send the file to the server\n            const postRequest = (0, _apiConfig.apiClient).post(uploadEndpoint, {\n                data: formData\n            });\n            postRequest.onData((response)=>{\n                if (response.status === \"success\") {\n                    const imageUrl = response.url.profile_pic.url;\n                    // Update the profile picture URL in the user session and local storage\n                    setProfilePicUrl(imageUrl);\n                    // Update the image for other parts of the UI as well\n                    profilePictureImage.setImage(imageUrl);\n                    // Store the URL in local storage\n                    localStorage.setItem(\"image_upload\", imageUrl);\n                    // Show success message and hide upload animation\n                    fileInputSuccess.setStyle({\n                        display: \"flex\"\n                    });\n                    uploadAnimation.setStyle({\n                        display: \"none\"\n                    });\n                    // Resolve with the uploaded image URL\n                    resolve(imageUrl);\n                } else {\n                    const errorMessage = \"Failed to upload profile picture.\";\n                    toggleError(fileInputError, errorMessage, true);\n                    uploadAnimation.setStyle({\n                        display: \"none\"\n                    });\n                    overlay.setStyle({\n                        display: \"none\"\n                    });\n                    dragCounter = 0;\n                    // Reset file input value\n                    fileInput.getElement().value = \"\";\n                }\n            });\n            postRequest.onError((error)=>{\n                let errorMessage = \"An error occurred during image upload.\";\n                if (error.response && error.response.data) errorMessage = error.response.data.message || errorMessage;\n                else if (error.message) errorMessage = error.message;\n                // Show error message and hide upload animation\n                toggleError(fileInputError, errorMessage, true);\n                uploadAnimation.setStyle({\n                    display: \"none\"\n                });\n                overlay.setStyle({\n                    display: \"none\"\n                });\n                dragCounter = 0;\n                // Reset file input value\n                fileInput.getElement().value = \"\";\n            });\n            // Make the API call\n            postRequest.fetch();\n        };\n        // Event listener for file input changes\n        fileInput.on(\"change\", ()=>{\n            const file = fileInput.getElement().files?.[0];\n            if (file) handleFile(file);\n        });\n        // Event listeners for drag-and-drop\n        const dragZoneElement = document.body;\n        dragZoneElement.addEventListener(\"dragenter\", (event)=>{\n            event.preventDefault();\n            dragCounter++;\n            if (dragCounter === 1) overlay.setStyle({\n                display: \"flex\"\n            });\n        });\n        dragZoneElement.addEventListener(\"dragleave\", ()=>{\n            dragCounter--;\n            if (dragCounter <= 0) {\n                overlay.setStyle({\n                    display: \"none\"\n                });\n                dragCounter = 0;\n            }\n        });\n        dragZoneElement.addEventListener(\"dragover\", (event)=>{\n            event.preventDefault();\n        });\n        dragZoneElement.addEventListener(\"drop\", (event)=>{\n            event.preventDefault();\n            const files = event.dataTransfer?.files;\n            if (files?.length) handleFile(files[0]);\n            overlay.setStyle({\n                display: \"none\"\n            });\n            dragCounter = 0;\n        });\n    });\n}\nconst formatPhoneNumber = (value)=>{\n    const cleaned = value.replace(/\\D/g, \"\"); // Remove all non-digit characters\n    if (cleaned.length <= 3) return cleaned;\n    else if (cleaned.length <= 6) return `(${cleaned.slice(0, 3)}) ${cleaned.slice(3)}`;\n    else if (cleaned.length <= 10) return `(${cleaned.slice(0, 3)}) ${cleaned.slice(3, 6)}-${cleaned.slice(6)}`;\n    else // If more than 10 digits, truncate the extra digits\n    return `(${cleaned.slice(0, 3)}) ${cleaned.slice(3, 6)}-${cleaned.slice(6, 10)}`;\n};\n\n},{\"@xatom/core\":\"65YBq\",\"@xatom/image\":\"bavwf\",\"../api/apiConfig\":\"dUmIV\",\"../auth/authConfig\":\"dHwPR\",\"@parcel/transformer-js/src/esmodule-helpers.js\":\"jiucr\"}],\"bavwf\":[function(require,module,exports) {\nvar t = require(\"d023971cccd819e3\");\nvar e, r, s, i, o, n, u = {};\ne = u, r = \"WFImage\", s = ()=>c, Object.defineProperty(e, r, {\n    get: s,\n    set: i,\n    enumerable: !0,\n    configurable: !0\n});\nclass c extends t.WFComponent {\n    constructor(t){\n        super(t);\n    }\n    getImageConfig() {\n        return this._config;\n    }\n    getSrc() {\n        return this.getAttribute(\"src\");\n    }\n    getSizes() {\n        return this.getAttribute(\"sizes\");\n    }\n    getSrcSet() {\n        return this.getAttribute(\"srcset\");\n    }\n    getLoading() {\n        return this.getAttribute(\"loading\");\n    }\n    onLoad(t) {\n        return this.on(\"load\", t), ()=>{\n            this.off(\"load\", t);\n        };\n    }\n    onLoadError(t) {\n        return this.on(\"error\", t), ()=>{\n            this.off(\"error\", t);\n        };\n    }\n    setImage(t) {\n        if (\"string\" == typeof t) this.setAttribute(\"src\", t), this.removeAttribute(\"srcset\"), this.removeAttribute(\"sizes\");\n        else {\n            if (this.setAttribute(\"src\", t.src), \"object\" == typeof t && t.srcSet && t.srcSet.length && t.sizes && t.sizes.length) {\n                const e = t.srcSet.map((t)=>`${t.url} ${t.size}`).join(\", \");\n                this.setAttribute(\"srcset\", e);\n            } else this.removeAttribute(\"srcset\"), this.removeAttribute(\"sizes\");\n            t.loading && this.setAttribute(\"loading\", t.loading);\n        }\n    }\n}\no = module.exports, n = u, Object.keys(n).forEach(function(t) {\n    \"default\" === t || \"__esModule\" === t || o.hasOwnProperty(t) || Object.defineProperty(o, t, {\n        enumerable: !0,\n        get: function() {\n            return n[t];\n        }\n    });\n});\n\n},{\"d023971cccd819e3\":\"65YBq\"}],\"9Xmw3\":[function(require,module,exports) {\n// src/pages/listStudentFiles.ts\nvar parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\n// Function to fetch files for a specific student\nparcelHelpers.export(exports, \"fetchSessionFiles\", ()=>fetchSessionFiles);\n// Function to initialize and render the dynamic file list for a student\nparcelHelpers.export(exports, \"initializeDynamicSessionFileList\", ()=>initializeDynamicSessionFileList);\nvar _core = require(\"@xatom/core\");\nvar _apiConfig = require(\"../../../../api/apiConfig\");\n// Function to get the student_id from URL parameters\nfunction getSessionIdFromUrl() {\n    const urlParams = new URLSearchParams(window.location.search);\n    return urlParams.get(\"session\");\n}\nasync function fetchSessionFiles(sessionId) {\n    try {\n        const getFiles = (0, _apiConfig.apiClient).get(`/student_files/session/${sessionId}`);\n        const response = await getFiles.fetch();\n        return response;\n    } catch (error) {\n        console.error(\"Error fetching files for student:\", error);\n        throw error;\n    }\n}\nasync function initializeDynamicSessionFileList(containerSelector) {\n    // Get the student ID from the URL\n    const sessionId = getSessionIdFromUrl();\n    if (!sessionId) {\n        console.error(\"No student ID provided in URL\");\n        return;\n    }\n    // Initialize a new instance of WFDynamicList for Files\n    const list = new (0, _core.WFDynamicList)(containerSelector, {\n        rowSelector: \"#fileCard\",\n        loaderSelector: \"#filesloading\",\n        emptySelector: \"#filesEmpty\"\n    });\n    // Customize the rendering of the loader\n    list.loaderRenderer((loaderElement)=>{\n        loaderElement.setStyle({\n            display: \"flex\"\n        });\n        return loaderElement;\n    });\n    // Customize the rendering of the empty state\n    list.emptyRenderer((emptyElement)=>{\n        emptyElement.setStyle({\n            display: \"flex\"\n        });\n        return emptyElement;\n    });\n    // Customize the rendering of list items (File Cards)\n    list.rowRenderer(({ rowData, rowElement })=>{\n        const fileCard = new (0, _core.WFComponent)(rowElement);\n        // Set the fileCard's href to file_url\n        fileCard.setAttribute(\"href\", rowData.file_url);\n        // Set the fileName to file_name\n        const fileName = fileCard.getChildAsComponent(\"#fileName\");\n        fileName.setText(rowData.file_name);\n        // Show the list item\n        rowElement.setStyle({\n            display: \"block\"\n        });\n        return rowElement;\n    });\n    // Load and display file data\n    try {\n        // Enable the loading state\n        list.changeLoadingStatus(true);\n        const files = await fetchSessionFiles(sessionId);\n        // Sort files alphabetically by file_name\n        files.sort((a, b)=>a.file_name.localeCompare(b.file_name));\n        // Set the data to be displayed in the dynamic list\n        list.setData(files);\n        // Disable the loading state\n        list.changeLoadingStatus(false);\n    } catch (error) {\n        console.error(\"Error loading files:\", error);\n        // If there's an error, set an empty array to trigger the empty state\n        list.setData([]);\n        // Disable the loading state\n        list.changeLoadingStatus(false);\n    }\n}\n\n},{\"@xatom/core\":\"65YBq\",\"../../../../api/apiConfig\":\"dUmIV\",\"@parcel/transformer-js/src/esmodule-helpers.js\":\"jiucr\"}]},[], null, \"parcelRequired346\")\n\n//# sourceMappingURL=sessionDetails.d7d7240c.js.map\n","// src/pages/sessionDetails.ts\n\nimport { WFComponent, WFDynamicList } from \"@xatom/core\";\nimport { apiClient } from \"../../../api/apiConfig\";\nimport { RemoveStudentDialog } from \"./components/removeStudent\";\nimport { initializeDynamicSessionFileList } from \"./components/listSessionFiles\";\n\ninterface SessionDetailsResponse {\n  workshop?: {\n    fieldData: {\n      name: string;\n      \"short-description\": string;\n      \"parent-program\": string;\n    };\n  };\n  subscription: {\n    id: string; // Add subscription ID here for type-safety\n  };\n  students: Array<{\n    student_name: string;\n    image_url: string;\n    student_profile_id: number;\n    id: number; // This represents the subscription item ID linked to each student\n  }>;\n  program: {\n    id: string;\n    cmsLocaleId: string;\n    lastPublished: string;\n    lastUpdated: string;\n    createdOn: string;\n    isArchived: boolean;\n    isDraft: boolean;\n    fieldData: {\n      subheading: string;\n      \"short-description\": string;\n      \"age-range\": string;\n      name: string;\n      slug: string;\n      \"parent-program\": string;\n      \"main-image\": {\n        fileId: string;\n        url: string;\n        alt: string | null;\n      };\n      \"2nd-semester-charge-date\"?: string; // Optional, based on API response\n      \"subscription-pause-date\"?: string; // Optional, based on API response\n    };\n  };\n  location: {\n    fieldData: {\n      name: string;\n      \"map-embed\": string;\n    };\n  };\n  session: {\n    fieldData: {\n      weekday: string;\n      \"time-block\": string;\n      name: string;\n    };\n  };\n  caregiver: boolean; // Indicates if the user is a caregiver\n}\n\n// Function to trigger a click on the success_trigger element\nfunction triggerSuccessEvent(selector: string) {\n  const successTrigger = document.querySelector(selector);\n  if (successTrigger instanceof HTMLElement) {\n    successTrigger.click();\n  }\n}\n\n// Define the CaregiverBreadcrumbs interface\ninterface CaregiverBreadcrumbs {\n  student_id: number;\n  student_name: string;\n  workshop_name: string;\n  workshop_id: string;\n  program_name: string;\n  program_id: string;\n  subscription_id: number;\n  session_id?: string; // Optional\n  session_weekday?: string; // Optional\n  session_time_block?: string; // Optional\n}\n\n// Function to fetch session details from the API\nasync function fetchSessionDetails(\n  workshopId: string,\n  programId: string,\n  sessionId: string,\n  subscriptionId: string\n): Promise<SessionDetailsResponse | undefined> {\n  try {\n    // Make the API request\n    const getSessionDetailsRequest = apiClient.get<SessionDetailsResponse>(\n      `/dashboard/registration/session/${sessionId}`,\n      {\n        data: {\n          workshop_id: workshopId,\n          program_id: programId,\n          session_id: sessionId,\n          subscription: subscriptionId,\n        },\n      }\n    );\n\n    const response = await getSessionDetailsRequest.fetch();\n    return response;\n  } catch (error: any) {\n    // Extract and display the error message\n    let errorMessage = \"An unexpected error occurred. Please try again.\";\n    if (error?.response?.data?.message) {\n      errorMessage = error.response.data.message;\n    } else if (error.message) {\n      errorMessage = error.message;\n    }\n\n    // Display the error message in an alert box\n    alert(`Error: ${errorMessage}`);\n\n    // Navigate back to the previous page with a fallback\n    window.history.length > 1\n      ? window.history.back()\n      : (window.location.href = \"/dashboard/registrations\");\n\n    // Log the error for debugging purposes\n    console.error(\"Fetch Session Details Error:\", error);\n\n    // Return undefined to indicate failure\n    return undefined;\n  }\n}\n\n// Main function to initialize session details\nexport async function initializeSessionDetails() {\n  // initialize files\n  initializeDynamicSessionFileList(\"#filesList\");\n  const params = new URLSearchParams(window.location.search);\n  const workshopId = params.get(\"workshop\") || \"none\"; // Use \"none\" if workshopId is not provided\n  const programId = params.get(\"program\");\n  const sessionId = params.get(\"session\");\n  const subscriptionId = params.get(\"subscription\");\n\n  if (!programId || !sessionId || !subscriptionId) {\n    displayError(\n      \"Invalid access. Program ID, Session ID, or Subscription ID is missing.\"\n    );\n    return;\n  }\n\n  // Fetch session details with program and subscription params\n  const sessionDetails = await fetchSessionDetails(\n    workshopId,\n    programId,\n    sessionId,\n    subscriptionId\n  );\n\n  // If fetchSessionDetails encounters an error, it handles it and navigates back,\n  // so the following code will not execute in that case.\n  if (!sessionDetails) {\n    // In case fetchSessionDetails returns undefined due to an error\n    return;\n  }\n\n  const {\n    workshop,\n    subscription,\n    program,\n    students,\n    location,\n    session,\n    caregiver,\n  } = sessionDetails;\n\n  if (sessionDetails && location && students && session) {\n    // Populate UI Elements\n    if (workshop) {\n      populateWorkshopDetails(workshop);\n    } else {\n      populateProgramDetailsAsWorkshop(program);\n    }\n    populateSessionDetails(session, location);\n    initializeStudentList(students);\n    updateBreadcrumbs(\n      program,\n      workshop,\n      session,\n      subscriptionId,\n      workshopId,\n      caregiver\n    );\n\n    // Initialize RemoveStudentDialog with relevant data\n    initializeRemoveStudentDialog(\n      subscription.id,\n      sessionId,\n      students,\n      caregiver\n    );\n\n    // Trigger the success_trigger element\n    triggerSuccessEvent(\".success_trigger\");\n  } else {\n    displayError(\"Failed to fetch session details. Incomplete data.\");\n  }\n}\n\n// Function to populate workshop details (if workshop is available)\nfunction populateWorkshopDetails(workshop: SessionDetailsResponse[\"workshop\"]) {\n  const workshopName = new WFComponent(\"#workshopName\"); // Changed to class selector\n  workshopName.setText(workshop.fieldData.name);\n\n  const workshopShortDescription = new WFComponent(\"#workshopShortDescription\"); // Changed to class selector\n  workshopShortDescription.setText(workshop.fieldData[\"short-description\"]);\n}\n\n// Function to populate program details as workshop details (fallback if workshop is unavailable)\nfunction populateProgramDetailsAsWorkshop(\n  program: SessionDetailsResponse[\"program\"]\n) {\n  const workshopName = new WFComponent(\"#workshopName\"); // Changed to class selector\n  workshopName.setText(program.fieldData.name);\n\n  const workshopShortDescription = new WFComponent(\"#workshopShortDescription\"); // Changed to class selector\n  workshopShortDescription.setText(program.fieldData[\"short-description\"]);\n}\n\n// Function to populate session details, including location and time\nfunction populateSessionDetails(\n  session: SessionDetailsResponse[\"session\"],\n  location: SessionDetailsResponse[\"location\"]\n) {\n  const sessionWeekday = new WFComponent(\"#sessionWeekday\"); // Changed to class selector\n  sessionWeekday.setText(session.fieldData.weekday);\n\n  const sessionTime = new WFComponent(\"#sessionTime\"); // Changed to class selector\n  sessionTime.setText(session.fieldData[\"time-block\"]);\n\n  const sessionLocation = new WFComponent(\"#sessionLocation\"); // Changed to class selector\n  sessionLocation.setText(location.fieldData.name);\n\n  const sessionLocationMap = new WFComponent(\"#sessionLocationMap\"); // Changed to class selector\n  sessionLocationMap.setHTML(location.fieldData[\"map-embed\"]);\n\n  // Apply styling to make sure the map and its container fill properly\n  const figureElement = document.querySelector(\n    \"#sessionLocationMap figure\" // Changed to class selector\n  ) as HTMLElement;\n  const iframeElement = document.querySelector(\n    \"#sessionLocationMap iframe\" // Changed to class selector\n  ) as HTMLElement;\n  const firstChildDiv = document.querySelector(\n    \"#sessionLocationMap figure > div\" // Changed to class selector\n  ) as HTMLElement;\n\n  if (figureElement) {\n    figureElement.style.width = \"100%\";\n    figureElement.style.height = \"100%\";\n    figureElement.style.padding = \"0\";\n    figureElement.style.margin = \"0\";\n  }\n\n  if (firstChildDiv) {\n    firstChildDiv.style.height = \"100%\";\n  }\n\n  if (iframeElement) {\n    iframeElement.style.width = \"100%\";\n    iframeElement.style.height = \"100%\";\n    iframeElement.style.border = \"0\";\n  }\n}\n\n// Function to initialize student list\nfunction initializeStudentList(students: SessionDetailsResponse[\"students\"]) {\n  const list = new WFDynamicList<any>(\"#listStudentProfiles\", {\n    // Changed selector to class\n    rowSelector: \"#listStudentCard\", // Changed to class selector\n    loaderSelector: \"#listStudentProfilesloading\", // Changed to class selector\n    emptySelector: \"#listStudentProfilesEmpty\", // Changed to class selector\n  });\n\n  list.rowRenderer(({ rowData, rowElement }) => {\n    const studentCard = new WFComponent(rowElement);\n    const studentNameComponent =\n      studentCard.getChildAsComponent(\"#studentName\"); // Changed to class selector\n    const studentImageComponent = studentCard.getChildAsComponent(\n      \"#listStudentCardImage\" // Changed to class selector\n    );\n    const studentLinkComponent =\n      studentCard.getChildAsComponent(\"#studentLink\"); // Changed to class selector\n    const removeButtonComponent =\n      studentCard.getChildAsComponent(\".remove_button\"); // Select by class\n\n    studentNameComponent?.setText(rowData.student_name);\n    studentImageComponent?.setAttribute(\"src\", rowData.image_url);\n\n    // Append ?id={student_id} to the link\n    const studentId = rowData.student_profile_id;\n    const existingHref = studentLinkComponent?.getAttribute(\"href\") || \"#\";\n    const url = new URL(existingHref, window.location.origin);\n    url.searchParams.set(\"id\", studentId.toString());\n    studentLinkComponent?.setAttribute(\"href\", url.toString());\n\n    // **Set data attributes on remove button**\n    removeButtonComponent?.setAttribute(\n      \"data-student-id\",\n      studentId.toString()\n    );\n    removeButtonComponent?.setAttribute(\n      \"data-subscription-item-id\",\n      rowData.id.toString()\n    );\n\n    // **Set data-student-id on the row element for easy removal later**\n    rowElement.setAttribute(\"data-student-id\", studentId.toString());\n\n    return rowElement;\n  });\n\n  // Set data to be displayed in the list\n  list.setData(students);\n}\n\n// Function to update breadcrumbs with program, workshop, and session details\nfunction updateBreadcrumbs(\n  program: SessionDetailsResponse[\"program\"],\n  workshop: SessionDetailsResponse[\"workshop\"] | null,\n  session: SessionDetailsResponse[\"session\"],\n  subscriptionId: string,\n  workshopId: string,\n  caregiver: boolean\n) {\n  // Update program breadcrumb\n  const programBreadcrumbElement = document.querySelector(\"#programBreadcrumb\"); // Changed to class selector\n  if (programBreadcrumbElement) {\n    const programBreadcrumb = new WFComponent(programBreadcrumbElement);\n    programBreadcrumb.setText(program.fieldData.name);\n    // Update href attribute with program parameter\n    const currentHref = programBreadcrumbElement.getAttribute(\"href\") || \"#\";\n    const url = new URL(currentHref, window.location.origin);\n    url.searchParams.set(\"program\", program.id);\n    programBreadcrumb.setAttribute(\"href\", url.toString());\n  }\n\n  // Update workshop breadcrumb if workshop exists, otherwise fallback to program name\n  const workshopBreadcrumbElement = document.querySelector(\n    \"#workshopBreadcrumb\"\n  ); // Changed to class selector\n  if (workshopBreadcrumbElement) {\n    const workshopBreadcrumb = new WFComponent(workshopBreadcrumbElement);\n    if (workshop) {\n      workshopBreadcrumb.setText(workshop.fieldData.name);\n    } else {\n      workshopBreadcrumb.setText(program.fieldData.name);\n    }\n\n    // Update href attribute with program, subscription, and optionally workshop parameters\n    const currentHref = workshopBreadcrumbElement.getAttribute(\"href\") || \"#\";\n    const url = new URL(currentHref, window.location.origin);\n    url.searchParams.set(\"program\", program.id);\n    url.searchParams.set(\"subscription\", subscriptionId);\n\n    if (workshop && workshopId !== \"none\") {\n      url.searchParams.set(\"workshop\", workshopId);\n    }\n\n    workshopBreadcrumb.setAttribute(\"href\", url.toString());\n  }\n\n  // Update session breadcrumb\n  const sessionBreadcrumbElement = document.querySelector(\"#sessionBreadcrumb\"); // Changed to class selector\n  if (sessionBreadcrumbElement) {\n    const sessionBreadcrumb = new WFComponent(sessionBreadcrumbElement);\n    // Set the text to the combination of the session weekday and time block\n    const sessionText = `${session.fieldData.weekday}, ${session.fieldData[\"time-block\"]}`;\n    sessionBreadcrumb.setText(sessionText);\n  }\n\n  // Handle Breadcrumbs based on caregiver flag\n  handleBreadcrumbs(\n    caregiver,\n    program,\n    workshop,\n    session,\n    subscriptionId,\n    workshopId\n  );\n}\n\n// Function to handle Breadcrumbs based on caregiver flag\nfunction handleBreadcrumbs(\n  caregiver: boolean,\n  program: SessionDetailsResponse[\"program\"],\n  workshop: SessionDetailsResponse[\"workshop\"] | null,\n  session: SessionDetailsResponse[\"session\"],\n  subscriptionId: string,\n  workshopId: string\n) {\n  if (caregiver) {\n    // Remove all .remove_button_wrap elements from the DOM\n    const removeButtons = document.querySelectorAll(\".remove_button_wrap\");\n    removeButtons.forEach((btn) => btn.remove());\n\n    // Hide userBreadcrumbList and show caregiverBreadcrumbList\n    const userBreadcrumbList = document.querySelector(\"#userBreadcumbList\"); // Changed to class selector\n    const caregiverBreadcrumbList = document.querySelector(\n      \"#caregiverBreadcrumbList\" // Changed to class selector\n    );\n\n    if (userBreadcrumbList) {\n      userBreadcrumbList.setAttribute(\"style\", \"display: none;\");\n    }\n    if (caregiverBreadcrumbList) {\n      caregiverBreadcrumbList.setAttribute(\"style\", \"display: flex;\");\n    }\n\n    // Fetch caregiver_breadcrumbs from localStorage\n    const caregiverBreadcrumbs = localStorage.getItem(\"caregiver_breadcrumbs\");\n    if (caregiverBreadcrumbs) {\n      try {\n        const breadcrumbs = JSON.parse(\n          caregiverBreadcrumbs\n        ) as CaregiverBreadcrumbs;\n\n        // Update studentBreadcrumb link\n        const studentBreadcrumb = document.querySelector(\"#studentBreadcrumb\"); // Changed to class selector\n        if (studentBreadcrumb) {\n          const studentBreadcrumbComponent = new WFComponent(studentBreadcrumb);\n          studentBreadcrumbComponent.setText(breadcrumbs.student_name);\n\n          // Update href with ?id={student_id}\n          const currentHref =\n            studentBreadcrumb.getAttribute(\"href\") ||\n            \"/dashboard/student/profile\";\n          const url = new URL(currentHref, window.location.origin);\n          url.searchParams.set(\"id\", breadcrumbs.student_id.toString());\n          studentBreadcrumbComponent.setAttribute(\"href\", url.toString());\n        }\n\n        // Update caregiverWorkshopBreadcrumb text\n        const caregiverWorkshopBreadcrumb = document.querySelector(\n          \"#caregiverWorkshopBreadcrumb\" // Changed to class selector\n        );\n        if (caregiverWorkshopBreadcrumb) {\n          const workshopBreadcrumbComponent = new WFComponent(\n            caregiverWorkshopBreadcrumb\n          );\n\n          // Use workshop_name if present, otherwise use program_name\n          const workshopName = breadcrumbs.workshop_name\n            ? breadcrumbs.workshop_name\n            : breadcrumbs.program_name;\n          workshopBreadcrumbComponent.setText(workshopName);\n\n          // Update href with program, subscription, and optionally workshop parameters\n          const currentHref =\n            caregiverWorkshopBreadcrumb.getAttribute(\"href\") || \"#\";\n          const url = new URL(currentHref, window.location.origin);\n          url.searchParams.set(\"program\", breadcrumbs.program_id);\n          url.searchParams.set(\n            \"subscription\",\n            breadcrumbs.subscription_id.toString()\n          );\n\n          if (breadcrumbs.workshop_id && breadcrumbs.workshop_id !== \"none\") {\n            url.searchParams.set(\"workshop\", breadcrumbs.workshop_id);\n          }\n\n          caregiverWorkshopBreadcrumb.setAttribute(\"href\", url.toString());\n        }\n\n        // Update caregiverSessionBreadcrumb with session details\n        const caregiverSessionBreadcrumb = document.querySelector(\n          \"#caregiverSessionBreadcrumb\" // Changed to class selector\n        );\n        if (caregiverSessionBreadcrumb) {\n          const sessionBreadcrumbComponent = new WFComponent(\n            caregiverSessionBreadcrumb\n          );\n          const sessionText = `${breadcrumbs.session_weekday}, ${breadcrumbs.session_time_block}`;\n          sessionBreadcrumbComponent.setText(sessionText);\n        }\n      } catch (parseError) {\n        console.error(\n          \"Error parsing caregiver_breadcrumbs from localStorage:\",\n          parseError\n        );\n        alert(\"Failed to load caregiver breadcrumbs. Please try again.\");\n      }\n    } else {\n      console.warn(\"No caregiver_breadcrumbs found in localStorage.\");\n      alert(\"Caregiver breadcrumbs data is missing.\");\n    }\n  } else {\n    // If not a caregiver, ensure userBreadcrumbList is visible and caregiverBreadcrumbList is hidden\n    const userBreadcrumbList = document.querySelector(\"#userBreadcumbList\"); // Changed to class selector\n    const caregiverBreadcrumbList = document.querySelector(\n      \"#caregiverBreadcrumbList\" // Changed to class selector\n    );\n\n    if (userBreadcrumbList) {\n      userBreadcrumbList.setAttribute(\"style\", \"display: flex;\");\n    }\n    if (caregiverBreadcrumbList) {\n      caregiverBreadcrumbList.setAttribute(\"style\", \"display: none;\");\n    }\n  }\n}\n\n// Function to initialize RemoveStudentDialog\nfunction initializeRemoveStudentDialog(\n  subscriptionId: string,\n  sessionId: string,\n  students: SessionDetailsResponse[\"students\"],\n  caregiver: boolean\n) {\n  if (caregiver) {\n    // If caregiver, you might want to handle dialogs differently or disable certain actions\n    // For now, we'll assume caregivers don't need the RemoveStudentDialog\n    return;\n  }\n\n  // Create a new instance of RemoveStudentDialog\n  new RemoveStudentDialog({\n    subscriptionId,\n    sessionId,\n    students: students.map((student) => ({\n      id: student.id,\n      student_profile_id: student.student_profile_id,\n      student_name: student.student_name,\n    })),\n  });\n}\n\n// Function to display an error message on the page and in an alert box\nfunction displayError(message: string) {\n  const errorElement = document.querySelector(\"#listRegistrationEmpty\"); // Changed to class selector\n  if (errorElement) {\n    errorElement.innerHTML = `<div>${message}</div>`;\n    errorElement.setAttribute(\"style\", \"display: flex;\");\n  }\n  // Also display the error in an alert box\n  alert(`Error: ${message}`);\n}\n\n// Function to initialize and render the past invoices list using fetched data\nasync function initializePastInvoicesList(\n  containerSelector: string,\n  invoices: any[]\n) {\n  // Initialize a new instance of WFDynamicList for Invoices\n  const list = new WFDynamicList<any>(containerSelector, {\n    rowSelector: \"#invoiceLine\", // Changed to class selector\n  });\n\n  // Customize the rendering of the loader\n  list.loaderRenderer((loaderElement) => {\n    loaderElement.setStyle({\n      display: \"flex\",\n    });\n    return loaderElement;\n  });\n\n  // Customize the rendering of the empty state\n  list.emptyRenderer((emptyElement) => {\n    emptyElement.setStyle({\n      display: \"flex\",\n    });\n    return emptyElement;\n  });\n\n  // Customize the rendering of list items (Invoice Rows)\n  list.rowRenderer(({ rowData, rowElement }) => {\n    const invoiceRow = new WFComponent(rowElement);\n\n    // Set the invoice date\n    const invoiceDateComponent = invoiceRow.getChildAsComponent(\"#invoiceDate\"); // Changed to class selector\n    if (invoiceDateComponent) {\n      const invoiceDate = new WFComponent(invoiceDateComponent.getElement());\n      const formattedDate = new Date(rowData.created_at).toLocaleDateString();\n      invoiceDate.setText(formattedDate);\n    }\n\n    // Set the invoice amount\n    const invoiceAmountComponent =\n      invoiceRow.getChildAsComponent(\"#invoiceAmount\"); // Changed to class selector\n    if (invoiceAmountComponent) {\n      const invoiceAmount = new WFComponent(\n        invoiceAmountComponent.getElement()\n      );\n      invoiceAmount.setText(`$${rowData.amount_total}`);\n    }\n\n    // Set the receipt link\n    const receiptButtonComponent =\n      invoiceRow.getChildAsComponent(\"#receiptButton\"); // Changed to class selector\n    if (receiptButtonComponent) {\n      const receiptButton = new WFComponent(\n        receiptButtonComponent.getElement()\n      );\n      receiptButton.setAttribute(\"href\", rowData.reciept_url);\n    }\n\n    // Show the list item\n    rowElement.setAttribute(\"style\", \"display: table-row;\");\n\n    return rowElement;\n  });\n\n  // Load and display invoice data\n  try {\n    // Enable the loading state\n    list.changeLoadingStatus(true);\n\n    // Set the data to be displayed in the dynamic list\n    list.setData(invoices);\n\n    // Disable the loading state\n    list.changeLoadingStatus(false);\n  } catch (error) {\n    console.error(\"Error initializing past invoices list:\", error);\n    alert(\"Failed to load past invoices. Please try again.\");\n    list.setData([]);\n    list.changeLoadingStatus(false);\n  }\n}\n","// src/pages/removeStudent.ts\n\nimport { WFComponent, WFFormComponent } from \"@xatom/core\";\nimport { apiClient } from \"../../../../api/apiConfig\";\nimport { validateNotEmpty } from \"../../../../utils/validationUtils\";\nimport {\n  toggleError,\n  setupValidation,\n  createValidationFunction,\n} from \"../../../../utils/formUtils\";\n\n// RemoveStudentDialog Component\ntype RemoveStudentDialogOptions = {\n  subscriptionId: string;\n  sessionId: string;\n  students: Array<{\n    id: number; // This represents the subscription item ID linked to each student\n    student_profile_id: number;\n    student_name: string;\n  }>;\n};\n\nexport class RemoveStudentDialog {\n  private dialog: WFComponent;\n  private removeForm: WFFormComponent;\n  private subscriptionId: string;\n  private sessionId: string;\n  private students: Array<{\n    id: number;\n    student_profile_id: number;\n    student_name: string;\n  }>;\n  private studentId?: string;\n  private subscriptionItemId?: number;\n  private pageMain: WFComponent;\n\n  constructor(options: RemoveStudentDialogOptions) {\n    const { subscriptionId, sessionId, students } = options;\n\n    this.subscriptionId = subscriptionId;\n    this.sessionId = sessionId;\n    this.students = students;\n\n    this.dialog = new WFComponent(\"#removeStudentDialog\"); // Changed to class selector\n    this.removeForm = new WFFormComponent(\"#cancelSubscriptionForm\"); // Changed to class selector\n    this.pageMain = new WFComponent(\".page_main\");\n\n    this.initialize();\n  }\n\n  private initialize() {\n    // Attach event listeners to the remove buttons\n    const removeButtons = document.querySelectorAll(\".remove_button\"); // Updated selector to class\n\n    if (removeButtons.length === 0) {\n      console.error(\"Remove buttons not found\");\n      return;\n    }\n\n    removeButtons.forEach((button) => {\n      button.addEventListener(\"click\", (event) => {\n        const target = event.currentTarget as HTMLElement;\n\n        // Extract data attributes\n        const studentProfileId = target.getAttribute(\"data-student-id\");\n        const subscriptionItemId = target.getAttribute(\n          \"data-subscription-item-id\"\n        );\n\n        console.log(\"Clicked remove button:\", {\n          studentProfileId,\n          subscriptionItemId,\n        });\n\n        if (!studentProfileId || !subscriptionItemId) {\n          console.error(\"Missing data attributes on remove button\", {\n            studentProfileId,\n            subscriptionItemId,\n          });\n          alert(\"Unable to remove student. Missing necessary data.\");\n          return;\n        }\n\n        // Find the student using the `student_profile_id`\n        const student = this.students.find(\n          (s) => s.student_profile_id.toString() === studentProfileId\n        );\n\n        if (student) {\n          this.studentId = student.student_profile_id.toString();\n          this.subscriptionItemId = student.id; // This is the `subscription_item_id` we need\n          this.openDialog(student.student_name);\n        } else {\n          console.error(\"Student not found in provided student list\", {\n            studentProfileId,\n            students: this.students,\n          });\n          alert(\"Student not found. Please try again.\");\n        }\n      });\n    });\n\n    // Setup close button listener\n    const closeButton = new WFComponent(\"#close-dialog-btn\"); // Changed to class selector\n    if (closeButton.getElement()) {\n      closeButton.on(\"click\", () => {\n        this.closeDialog();\n      });\n    } else {\n      console.error(\"Close dialog button not found\");\n    }\n\n    // Setup form submission handling\n    this.setupFormSubmission();\n    this.setupFormValidation();\n  }\n\n  private openDialog(studentName: string) {\n    if (this.dialog.getElement() && this.pageMain.getElement()) {\n      console.log(\"Opening remove student dialog\");\n      const studentNameElement = new WFComponent(\"#removeStudentName\"); // Changed to class selector\n      studentNameElement.setText(studentName);\n\n      // Update page_main data-brand attribute\n      if (this.pageMain.getElement()) {\n        this.pageMain.setAttribute(\"data-brand\", \"6\");\n      } else {\n        console.error(\"page_main element not found\");\n      }\n\n      const dialogElement = this.dialog.getElement() as HTMLDialogElement;\n      if (dialogElement) {\n        dialogElement.showModal(); // Using `showModal()` to ensure it behaves as a modal\n      } else {\n        console.error(\"Dialog element not found\");\n      }\n    } else {\n      console.error(\"Dialog or page_main element not found\");\n    }\n  }\n\n  private closeDialog() {\n    if (this.dialog.getElement() && this.pageMain.getElement()) {\n      console.log(\"Closing remove student dialog\");\n\n      // Reset page_main data-brand attribute\n      if (this.pageMain.getElement()) {\n        this.pageMain.setAttribute(\"data-brand\", \"2\");\n      } else {\n        console.error(\"page_main element not found\");\n      }\n\n      const dialogElement = this.dialog.getElement() as HTMLDialogElement;\n      if (dialogElement) {\n        dialogElement.close(); // Using `close()` to properly close the dialog\n      } else {\n        console.error(\"Dialog element not found\");\n      }\n    } else {\n      console.error(\"Dialog or page_main element not found\");\n    }\n  }\n\n  private setupFormSubmission() {\n    this.removeForm.onFormSubmit(async (formData, event) => {\n      event.preventDefault(); // Prevent form default submission\n      event.stopPropagation(); // Stop any other event listeners on the form\n\n      console.log(\"Remove student form submission intercepted\");\n\n      const reason = formData.removed_because as string;\n\n      if (!validateNotEmpty(reason)) {\n        const errorComponent = new WFComponent(\"#removedReasonError\"); // Changed to class selector\n        toggleError(\n          errorComponent,\n          \"Reason for removing the student is required.\",\n          true\n        );\n        return;\n      }\n\n      try {\n        // Show loading animation\n        this.setLoadingState(true);\n\n        if (!this.studentId || !this.subscriptionItemId) {\n          throw new Error(\n            \"No student ID or subscription item ID found for removal.\"\n          );\n        }\n\n        // Make DELETE request to API to remove student\n        console.log(\n          \"Submitting removal to API for student ID:\",\n          this.studentId,\n          \"with subscription item ID:\",\n          this.subscriptionItemId\n        );\n\n        const response = await apiClient\n          .delete(\n            `/subscriptions/${this.subscriptionId}/session/${this.sessionId}/student/${this.studentId}`,\n            {\n              data: {\n                reason: reason,\n                subscription_item_id: this.subscriptionItemId, // Use the subscription item ID here\n              },\n            }\n          )\n          .fetch();\n\n        if (response) {\n          console.log(\"Student removed successfully\");\n\n          // Clear any previous error messages\n          const errorComponent = new WFComponent(\"#removedReasonError\"); // Changed to class selector\n          toggleError(errorComponent, \"\", false); // Explicitly hide error on success\n\n          // Close dialog and remove student from UI\n          this.closeDialog();\n          this.removeStudentFromUI(this.studentId);\n        } else {\n          throw new Error(\n            \"Unexpected response received from student removal API.\"\n          );\n        }\n      } catch (error) {\n        console.error(\"Error removing student: \", error);\n        this.showErrorMessage(\n          \"Oops! Something went wrong while submitting the form.\"\n        );\n      } finally {\n        // Hide loading animation\n        this.setLoadingState(false);\n      }\n    });\n  }\n\n  private setupFormValidation() {\n    const reasonInput = new WFComponent(\"#removedReason\"); // Changed to class selector\n    const reasonErrorComponent = new WFComponent(\"#removedReasonError\"); // Changed to class selector\n\n    if (!reasonInput.getElement() || !reasonErrorComponent.getElement()) {\n      console.error(\"Reason input or error component not found for validation\");\n      return;\n    }\n\n    const validateReason = createValidationFunction(\n      reasonInput,\n      (input) => validateNotEmpty(input),\n      \"Reason for removing the student is required.\"\n    );\n\n    setupValidation(reasonInput, reasonErrorComponent, validateReason);\n  }\n\n  private setLoadingState(isLoading: boolean) {\n    const loadingAnimation = new WFComponent(\"#removeStudentRequesting\"); // Changed to class selector\n    const submitButton = new WFComponent(\"#removeStudentSubmit\"); // Changed to class selector\n\n    if (loadingAnimation.getElement() && submitButton.getElement()) {\n      if (isLoading) {\n        loadingAnimation.setStyle({ display: \"block\" });\n        submitButton.setAttribute(\"disabled\", \"true\");\n      } else {\n        loadingAnimation.setStyle({ display: \"none\" });\n        submitButton.removeAttribute(\"disabled\");\n      }\n    } else {\n      console.error(\n        \"Loading animation or submit button not found for setting loading state\"\n      );\n    }\n  }\n\n  private removeStudentFromUI(studentId: string) {\n    const studentRow = document.querySelector(\n      `#listStudentCard[data-student-id=\"${studentId}\"]`\n    ) as HTMLElement | null;\n\n    if (studentRow) {\n      studentRow.remove();\n      console.log(\n        `Removed student row with data-student-id=\"${studentId}\" from UI.`\n      );\n    } else {\n      console.error(\n        `Student row with data-student-id=\"${studentId}\" not found in DOM.`\n      );\n    }\n  }\n\n  private showErrorMessage(message: string) {\n    const errorElement = new WFComponent(\"#submitInviteCaregiverError\"); // Changed to class selector\n    if (errorElement.getElement()) {\n      errorElement.setText(message);\n      errorElement.setStyle({ display: \"flex\" });\n    } else {\n      console.error(\"Error element not found for showing error message\");\n    }\n  }\n}\n","import { WFComponent } from \"@xatom/core\";\nimport { toggleError } from \"./formUtils\";\n\nexport function validateNotEmpty(input: string | undefined): boolean {\n  return input !== undefined && input.trim() !== \"\";\n}\n\nexport function validateEmail(input: string): boolean {\n  const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n  return emailRegex.test(input);\n}\n\n/**\n * Validates that the email is either empty or correctly formatted.\n * @param value The email input value.\n * @returns True if valid, false otherwise.\n */\nexport const validateEmailOptional = (value: string): boolean => {\n  if (value.trim() === \"\") {\n    // Email is optional, so empty string is valid\n    return true;\n  }\n  // Validate the email format if not empty\n  return validateEmail(value);\n};\n\nexport function validatePasswordRequirements(password: string): boolean {\n  const hasLowercase = /[a-z]/.test(password);\n  const hasUppercase = /[A-Z]/.test(password);\n  const hasDigit = /\\d/.test(password);\n  const hasSpecialChar = /[!@#$%^&*(),.?\":{}|<>]/.test(password);\n  const hasValidLength = password.length >= 8;\n  return (\n    hasLowercase && hasUppercase && hasDigit && hasSpecialChar && hasValidLength\n  );\n}\n\nexport function validateCheckbox(checked: boolean): boolean {\n  return checked;\n}\n\nexport function validatePasswordsMatch(\n  originalPassword: string,\n  confirmPassword: string\n): boolean {\n  return originalPassword === confirmPassword;\n}\n\nexport function validateSelectField(input: string | undefined): boolean {\n  return input !== undefined && input !== \"N/A\";\n}\n\nexport function validatePhoneNumber(input: string): boolean {\n  const phoneRegex = /^\\(\\d{3}\\)\\s\\d{3}-\\d{4}$/;\n  return phoneRegex.test(input);\n}\n","import { WFComponent } from \"@xatom/core\";\nimport { WFImage } from \"@xatom/image\";\nimport { apiClient } from \"../api/apiConfig\";\nimport { userAuth } from \"../auth/authConfig\";\n\nexport function toggleError(\n  errorMessageComponent: WFComponent<any>,\n  message: string,\n  show: boolean\n): void {\n  errorMessageComponent.updateTextViaAttrVar({ text: show ? message : \"\" });\n  errorMessageComponent.setStyle({ display: show ? \"flex\" : \"none\" });\n}\n\nexport function setupValidation(\n  inputComponent: WFComponent,\n  errorComponent: WFComponent,\n  validate: () => string,\n  requestErrorComponent?: WFComponent // Optional component to clear on input change\n) {\n  const validateAndUpdate = () => {\n    const errorMessage = validate();\n    toggleError(errorComponent, errorMessage, !!errorMessage);\n    if (requestErrorComponent && errorMessage === \"\") {\n      // Clear request error message when the user is correcting the input\n      toggleError(requestErrorComponent, \"\", false);\n    }\n  };\n\n  // Attach event listeners for real-time validation\n  inputComponent.on(\"input\", validateAndUpdate);\n  inputComponent.on(\"blur\", validateAndUpdate);\n  inputComponent.on(\"change\", validateAndUpdate);\n}\n\nexport function createValidationFunction(\n  inputComponent: WFComponent,\n  validationFn: (input: string) => boolean,\n  errorMessage: string\n): () => string {\n  return () => {\n    const inputElement = inputComponent.getElement() as HTMLInputElement;\n    const isValid = validationFn(inputElement.value);\n    return isValid ? \"\" : errorMessage;\n  };\n}\n\nexport function createCheckboxValidationFunction(\n  checkboxComponent: WFComponent,\n  errorMessage: string\n): () => string {\n  return () => {\n    const checkbox = checkboxComponent.getElement() as HTMLInputElement;\n    return checkbox.checked ? \"\" : errorMessage;\n  };\n}\n\nexport function setupCheckboxValidation(\n  checkboxComponent: WFComponent,\n  checkboxErrorComponent: WFComponent,\n  errorMessage: string\n) {\n  const validate = createCheckboxValidationFunction(\n    checkboxComponent,\n    errorMessage\n  );\n  setupValidation(checkboxComponent, checkboxErrorComponent, validate);\n}\n\nexport function validateSelectedSessions(\n  selectedSessions: { sessionId: string; studentIds: string[] }[],\n  errorMessageComponent: WFComponent<any>,\n  errorMessage: string\n): boolean {\n  const isValid =\n    selectedSessions.length > 0 &&\n    selectedSessions.some((session) => session.studentIds.length > 0);\n\n  if (!isValid) {\n    toggleError(errorMessageComponent, errorMessage, true);\n  } else {\n    toggleError(errorMessageComponent, \"\", false);\n  }\n\n  return isValid;\n}\n\ntype fileUploadResponse = {\n  status: string;\n  url: {\n    profile_pic: {\n      url: string;\n    };\n  };\n};\n\n/**\n * Updates the user's profile picture URL in the authentication system.\n * @param {string} imageUrl - The URL of the uploaded image.\n */\nexport function setProfilePicUrl(imageUrl: string): void {\n  const user = userAuth.getUser();\n  if (user && user.profile) {\n    // Ensure the profile_picture object exists\n    user.profile.profile_pic = user.profile.profile_pic || { url: \"\" };\n\n    // Set the profile picture URL\n    user.profile.profile_pic.url = imageUrl;\n    userAuth.setUser(user);\n    localStorage.setItem(\"auth_user\", JSON.stringify(user));\n  }\n}\n\n/**\n * Handles file upload and displays the uploaded image.\n * @param {WFComponent} fileInput - The WFComponent instance for the file input field.\n * @param {WFComponent} fileInputError - The WFComponent instance for displaying error messages.\n * @param {WFComponent} fileInputSuccess - The WFComponent instance for displaying success messages.\n * @param {string} uploadEndpoint - The endpoint to which the file is sent.\n * @returns {Promise<string>} A promise that resolves with the URL of the uploaded image.\n */\n/**\n * Handles file upload and displays the uploaded image.\n * Only JPEG files less than 2 MB can be uploaded.\n * @param {WFComponent} fileInput - The WFComponent instance for the file input field.\n * @param {WFComponent} fileInputError - The WFComponent instance for displaying error messages.\n * @param {WFComponent} fileInputSuccess - The WFComponent instance for displaying success messages.\n * @param {string} uploadEndpoint - The endpoint to which the file is sent.\n * @returns {Promise<string>} A promise that resolves with the URL of the uploaded image.\n */\nexport function setupFileUpload(\n  fileInput: WFComponent,\n  fileInputError: WFComponent,\n  fileInputSuccess: WFComponent,\n  uploadEndpoint: string\n): Promise<string> {\n  const profilePictureImage = new WFImage(\"#profilePictureImage\");\n  const uploadAnimation = new WFComponent(\"#uploadAnimation\");\n\n  const overlay = new WFComponent(\".drop-zone\");\n  let dragCounter = 0;\n\n  return new Promise<string>((resolve) => {\n    const handleFile = (file: File) => {\n      // Validate file type and size\n      const validTypes = [\"image/jpeg\", \"image/jpg\"];\n      const maxSizeInBytes = 2 * 1024 * 1024; // 2 MB\n\n      if (\n        !validTypes.includes(file.type) &&\n        !/\\.(jpg|jpeg)$/i.test(file.name)\n      ) {\n        const errorMessage = \"Only JPEG images are allowed.\";\n        toggleError(fileInputError, errorMessage, true);\n        // Reset file input value\n        (fileInput.getElement() as HTMLInputElement).value = \"\";\n        return;\n      }\n\n      if (file.size > maxSizeInBytes) {\n        const errorMessage = \"File size must be less than 2 MB.\";\n        toggleError(fileInputError, errorMessage, true);\n        // Reset file input value\n        (fileInput.getElement() as HTMLInputElement).value = \"\";\n        return;\n      }\n\n      // Show upload animation immediately\n      uploadAnimation.setStyle({ display: \"flex\" });\n\n      // Hide error and success messages\n      fileInputError.setStyle({ display: \"none\" });\n      fileInputSuccess.setStyle({ display: \"none\" });\n\n      const reader = new FileReader();\n\n      // Display preview image as soon as the file is loaded into memory\n      reader.onload = (event) => {\n        // Set the preview image for the profile picture\n        const result = event.target?.result as string;\n        profilePictureImage.setImage(result);\n\n        // Hide overlay once the image is set\n        overlay.setStyle({ display: \"none\" });\n      };\n\n      reader.readAsDataURL(file);\n\n      const formData = new FormData();\n      formData.append(\"profile_picture\", file);\n\n      const existingStudent = localStorage.getItem(\"current_student\");\n      if (existingStudent) {\n        const student = JSON.parse(existingStudent);\n        formData.append(\"student_profile_id\", student.id.toString());\n      }\n\n      // Send the file to the server\n      const postRequest = apiClient.post<fileUploadResponse>(uploadEndpoint, {\n        data: formData,\n      });\n\n      postRequest.onData((response) => {\n        if (response.status === \"success\") {\n          const imageUrl = response.url.profile_pic.url;\n\n          // Update the profile picture URL in the user session and local storage\n          setProfilePicUrl(imageUrl);\n\n          // Update the image for other parts of the UI as well\n          profilePictureImage.setImage(imageUrl);\n\n          // Store the URL in local storage\n          localStorage.setItem(\"image_upload\", imageUrl);\n\n          // Show success message and hide upload animation\n          fileInputSuccess.setStyle({ display: \"flex\" });\n          uploadAnimation.setStyle({ display: \"none\" });\n\n          // Resolve with the uploaded image URL\n          resolve(imageUrl);\n        } else {\n          const errorMessage = \"Failed to upload profile picture.\";\n          toggleError(fileInputError, errorMessage, true);\n          uploadAnimation.setStyle({ display: \"none\" });\n          overlay.setStyle({ display: \"none\" });\n          dragCounter = 0;\n          // Reset file input value\n          (fileInput.getElement() as HTMLInputElement).value = \"\";\n        }\n      });\n\n      postRequest.onError((error) => {\n        let errorMessage = \"An error occurred during image upload.\";\n        if (error.response && error.response.data) {\n          errorMessage = error.response.data.message || errorMessage;\n        } else if (error.message) {\n          errorMessage = error.message;\n        }\n\n        // Show error message and hide upload animation\n        toggleError(fileInputError, errorMessage, true);\n        uploadAnimation.setStyle({ display: \"none\" });\n        overlay.setStyle({ display: \"none\" });\n        dragCounter = 0;\n        // Reset file input value\n        (fileInput.getElement() as HTMLInputElement).value = \"\";\n      });\n\n      // Make the API call\n      postRequest.fetch();\n    };\n\n    // Event listener for file input changes\n    fileInput.on(\"change\", () => {\n      const file = (fileInput.getElement() as HTMLInputElement).files?.[0];\n      if (file) {\n        handleFile(file);\n      }\n    });\n\n    // Event listeners for drag-and-drop\n    const dragZoneElement = document.body;\n    dragZoneElement.addEventListener(\"dragenter\", (event) => {\n      event.preventDefault();\n      dragCounter++;\n      if (dragCounter === 1) {\n        overlay.setStyle({ display: \"flex\" });\n      }\n    });\n\n    dragZoneElement.addEventListener(\"dragleave\", () => {\n      dragCounter--;\n      if (dragCounter <= 0) {\n        overlay.setStyle({ display: \"none\" });\n        dragCounter = 0;\n      }\n    });\n\n    dragZoneElement.addEventListener(\"dragover\", (event) => {\n      event.preventDefault();\n    });\n\n    dragZoneElement.addEventListener(\"drop\", (event) => {\n      event.preventDefault();\n\n      const files = event.dataTransfer?.files;\n      if (files?.length) {\n        handleFile(files[0]);\n      }\n\n      overlay.setStyle({ display: \"none\" });\n      dragCounter = 0;\n    });\n  });\n}\n\n// src/utils/formUtils.ts\n\n/**\n * Formats a phone number string to the format (xxx) xxx-xxxx.\n * If the input contains more than 10 digits, it truncates the extra digits.\n * If it contains fewer, it formats as much as possible.\n *\n * @param value - The raw phone number string.\n * @returns The formatted phone number string.\n */\nexport const formatPhoneNumber = (value: string): string => {\n  const cleaned = value.replace(/\\D/g, \"\"); // Remove all non-digit characters\n\n  if (cleaned.length <= 3) {\n    return cleaned;\n  } else if (cleaned.length <= 6) {\n    return `(${cleaned.slice(0, 3)}) ${cleaned.slice(3)}`;\n  } else if (cleaned.length <= 10) {\n    return `(${cleaned.slice(0, 3)}) ${cleaned.slice(3, 6)}-${cleaned.slice(\n      6\n    )}`;\n  } else {\n    // If more than 10 digits, truncate the extra digits\n    return `(${cleaned.slice(0, 3)}) ${cleaned.slice(3, 6)}-${cleaned.slice(\n      6,\n      10\n    )}`;\n  }\n};\n","var t=require(\"@xatom/core\");var e,r,s,i,o,n,u={};e=u,r=\"WFImage\",s=()=>c,Object.defineProperty(e,r,{get:s,set:i,enumerable:!0,configurable:!0});class c extends t.WFComponent{constructor(t){super(t)}getImageConfig(){return this._config}getSrc(){return this.getAttribute(\"src\")}getSizes(){return this.getAttribute(\"sizes\")}getSrcSet(){return this.getAttribute(\"srcset\")}getLoading(){return this.getAttribute(\"loading\")}onLoad(t){return this.on(\"load\",t),()=>{this.off(\"load\",t)}}onLoadError(t){return this.on(\"error\",t),()=>{this.off(\"error\",t)}}setImage(t){if(\"string\"==typeof t)this.setAttribute(\"src\",t),this.removeAttribute(\"srcset\"),this.removeAttribute(\"sizes\");else{if(this.setAttribute(\"src\",t.src),\"object\"==typeof t&&t.srcSet&&t.srcSet.length&&t.sizes&&t.sizes.length){const e=t.srcSet.map((t=>`${t.url} ${t.size}`)).join(\", \");this.setAttribute(\"srcset\",e)}else this.removeAttribute(\"srcset\"),this.removeAttribute(\"sizes\");t.loading&&this.setAttribute(\"loading\",t.loading)}}}o=module.exports,n=u,Object.keys(n).forEach((function(t){\"default\"===t||\"__esModule\"===t||o.hasOwnProperty(t)||Object.defineProperty(o,t,{enumerable:!0,get:function(){return n[t]}})}));","// src/pages/listStudentFiles.ts\n\nimport { WFDynamicList, WFComponent } from \"@xatom/core\";\nimport { apiClient } from \"../../../../api/apiConfig\";\n\n// Define the FileItem interface based on the API response\ninterface FileItem {\n  id: number;\n  file_name: string;\n  file_url: string;\n  program_id?: string | null;\n  workshop_id?: string | null;\n  session_id?: string | null;\n  user_id: number;\n  created_at: number;\n}\n\n// Function to get the student_id from URL parameters\nfunction getSessionIdFromUrl(): string | null {\n  const urlParams = new URLSearchParams(window.location.search);\n  return urlParams.get(\"session\");\n}\n\n// Function to fetch files for a specific student\nexport async function fetchSessionFiles(\n  sessionId: string\n): Promise<FileItem[]> {\n  try {\n    const getFiles = apiClient.get<FileItem[]>(\n      `/student_files/session/${sessionId}`\n    );\n    const response = await getFiles.fetch();\n    return response;\n  } catch (error) {\n    console.error(\"Error fetching files for student:\", error);\n    throw error;\n  }\n}\n\n// Function to initialize and render the dynamic file list for a student\nexport async function initializeDynamicSessionFileList(\n  containerSelector: string\n) {\n  // Get the student ID from the URL\n  const sessionId = getSessionIdFromUrl();\n  if (!sessionId) {\n    console.error(\"No student ID provided in URL\");\n    return;\n  }\n\n  // Initialize a new instance of WFDynamicList for Files\n  const list = new WFDynamicList<FileItem>(containerSelector, {\n    rowSelector: \"#fileCard\", // Using ID selector for template\n    loaderSelector: \"#filesloading\", // Selector for the loader\n    emptySelector: \"#filesEmpty\", // Selector for the empty state\n  });\n\n  // Customize the rendering of the loader\n  list.loaderRenderer((loaderElement) => {\n    loaderElement.setStyle({\n      display: \"flex\",\n    });\n    return loaderElement;\n  });\n\n  // Customize the rendering of the empty state\n  list.emptyRenderer((emptyElement) => {\n    emptyElement.setStyle({\n      display: \"flex\",\n    });\n    return emptyElement;\n  });\n\n  // Customize the rendering of list items (File Cards)\n  list.rowRenderer(({ rowData, rowElement }) => {\n    const fileCard = new WFComponent(rowElement);\n\n    // Set the fileCard's href to file_url\n    fileCard.setAttribute(\"href\", rowData.file_url);\n\n    // Set the fileName to file_name\n    const fileName = fileCard.getChildAsComponent(\"#fileName\");\n    fileName.setText(rowData.file_name);\n\n    // Show the list item\n    rowElement.setStyle({\n      display: \"block\",\n    });\n\n    return rowElement;\n  });\n\n  // Load and display file data\n  try {\n    // Enable the loading state\n    list.changeLoadingStatus(true);\n\n    const files = await fetchSessionFiles(sessionId);\n\n    // Sort files alphabetically by file_name\n    files.sort((a, b) => a.file_name.localeCompare(b.file_name));\n\n    // Set the data to be displayed in the dynamic list\n    list.setData(files);\n\n    // Disable the loading state\n    list.changeLoadingStatus(false);\n  } catch (error) {\n    console.error(\"Error loading files:\", error);\n\n    // If there's an error, set an empty array to trigger the empty state\n    list.setData([]);\n\n    // Disable the loading state\n    list.changeLoadingStatus(false);\n  }\n}\n"],"names":["modules","entry","mainEntry","parcelRequireName","globalName","globalObject","globalThis","self","window","global","previousRequire","cache","nodeRequire","module","require","bind","newRequire","name","jumped","currentRequire","err","Error","code","localRequire","resolve","x","id","Module","call","exports","res","isParcelRequire","moduleName","bundle","parent","register","Object","defineProperty","get","i","length","parcelHelpers","defineInteropFlag","export","initializeSessionDetails","_core","_apiConfig","_removeStudent","_listSessionFiles","fetchSessionDetails","workshopId","programId","sessionId","subscriptionId","getSessionDetailsRequest","apiClient","data","workshop_id","program_id","session_id","subscription","fetch","error","errorMessage","response","message","alert","history","back","location","href","console","initializeDynamicSessionFileList","params","URLSearchParams","search","displayError","sessionDetails","workshop","program","students","session","caregiver","workshopName","WFComponent","setText","fieldData","workshopShortDescription","populateSessionDetails","sessionWeekday","weekday","sessionTime","sessionLocation","sessionLocationMap","setHTML","figureElement","document","querySelector","iframeElement","firstChildDiv","style","width","height","padding","margin","border","initializeStudentList","list","WFDynamicList","rowSelector","loaderSelector","emptySelector","rowRenderer","rowData","rowElement","studentCard","studentNameComponent","getChildAsComponent","studentImageComponent","studentLinkComponent","removeButtonComponent","student_name","setAttribute","image_url","studentId","student_profile_id","url","URL","getAttribute","origin","searchParams","set","toString","setData","updateBreadcrumbs","programBreadcrumbElement","programBreadcrumb","workshopBreadcrumbElement","workshopBreadcrumb","sessionBreadcrumbElement","sessionBreadcrumb","sessionText","handleBreadcrumbs","removeButtons","querySelectorAll","forEach","btn","remove","userBreadcrumbList","caregiverBreadcrumbList","caregiverBreadcrumbs","localStorage","getItem","breadcrumbs","JSON","parse","studentBreadcrumb","studentBreadcrumbComponent","currentHref","student_id","caregiverWorkshopBreadcrumb","workshopBreadcrumbComponent","workshop_name","program_name","subscription_id","caregiverSessionBreadcrumb","sessionBreadcrumbComponent","session_weekday","session_time_block","parseError","warn","RemoveStudentDialog","map","student","triggerSuccessEvent","selector","successTrigger","HTMLElement","click","errorElement","innerHTML","_validationUtils","_formUtils","constructor","options","dialog","removeForm","WFFormComponent","pageMain","initialize","button","addEventListener","event","target","currentTarget","studentProfileId","subscriptionItemId","log","find","s","openDialog","closeButton","getElement","on","closeDialog","setupFormSubmission","setupFormValidation","studentName","studentNameElement","dialogElement","showModal","close","onFormSubmit","formData","preventDefault","stopPropagation","reason","removed_because","validateNotEmpty","errorComponent","toggleError","setLoadingState","delete","subscription_item_id","removeStudentFromUI","showErrorMessage","reasonInput","reasonErrorComponent","validateReason","createValidationFunction","input","setupValidation","isLoading","loadingAnimation","submitButton","setStyle","display","removeAttribute","studentRow","undefined","trim","validateEmail","emailRegex","test","validateEmailOptional","validatePasswordRequirements","validateCheckbox","validatePasswordsMatch","validateSelectField","validatePhoneNumber","value","password","hasLowercase","hasUppercase","hasDigit","hasSpecialChar","hasValidLength","checked","originalPassword","confirmPassword","phoneRegex","createCheckboxValidationFunction","setupCheckboxValidation","validateSelectedSessions","setProfilePicUrl","setupFileUpload","formatPhoneNumber","_image","_authConfig","errorMessageComponent","show","updateTextViaAttrVar","text","inputComponent","validate","requestErrorComponent","validateAndUpdate","validationFn","isValid","inputElement","checkboxComponent","checkbox","checkboxErrorComponent","selectedSessions","some","studentIds","imageUrl","user","userAuth","getUser","profile","profile_pic","setUser","setItem","stringify","fileInput","fileInputError","fileInputSuccess","uploadEndpoint","profilePictureImage","WFImage","uploadAnimation","overlay","dragCounter","Promise","handleFile","file","validTypes","includes","type","size","reader","FileReader","onload","result","setImage","readAsDataURL","FormData","append","existingStudent","postRequest","post","onData","status","onError","files","dragZoneElement","body","dataTransfer","cleaned","replace","slice","o","t","u","c","enumerable","configurable","getImageConfig","_config","getSrc","getSizes","getSrcSet","getLoading","onLoad","off","onLoadError","src","srcSet","sizes","e","join","loading","keys","hasOwnProperty","n","fetchSessionFiles","getFiles","containerSelector","urlParams","loaderRenderer","loaderElement","emptyRenderer","emptyElement","fileCard","file_url","fileName","file_name","changeLoadingStatus","sort","a","b","localeCompare"],"version":3,"file":"sessionDetails.d7d7240c.js.map"}