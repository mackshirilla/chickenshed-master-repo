{"mappings":"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","sources":["src/modules/student_dashboard/studentDashboard.ts","src/modules/student_dashboard/listStudentDashboardFiles.ts"],"sourcesContent":["// src/pages/dashboard.ts\n\nimport { WFComponent } from \"@xatom/core\";\nimport { initializeDynamicStudentDashboardFileList } from \"./listStudentDashboardFiles\"; // Adjust path if necessary\nimport { userAuth } from \"../../auth/authConfig\";\n\nexport const initializeStudentDashboard = async () => {\n    const firstNameText = new WFComponent(\"#firstNameText\");\n    firstNameText.setText(userAuth.getUser().profile.first_name);\n\n  try {\n    // Initialize and render the dynamic file list\n    await initializeDynamicStudentDashboardFileList(\"#filesList\"); // Replace with your actual container selector\n\n    // Trigger the success event if needed\n    triggerSuccessEvent(\".success_trigger\");\n  } catch (error) {\n    console.error(\"Error initializing student dashboard:\", error);\n    // Optionally, display an error message to the user\n    const requestError = new WFComponent(\"#requestError\");\n    requestError.setText(\"Failed to load dashboard files. Please try again later.\");\n    requestError.setStyle({ display: \"block\" });\n  }\n};\n\n// Function to programmatically trigger a click event on a specified selector\nconst triggerSuccessEvent = (selector: string) => {\n  const successTrigger = document.querySelector(selector);\n  if (successTrigger instanceof HTMLElement) {\n    successTrigger.click();\n  } else {\n    console.warn(`No element found for selector: ${selector}`);\n  }\n};\n","// src/pages/listStudentFilesDashboard.ts\n\nimport { WFDynamicList, WFComponent } from \"@xatom/core\";\nimport { apiClient } from \"../../api/apiConfig\";\n\n// Define the FileItem interface based on the API response\ninterface FileItem {\n  id: number;\n  file_name: string;\n  file_url: string;\n  program_id?: string | null;\n  workshop_id?: string | null;\n  session_id?: string | null;\n  user_id: number;\n  created_at: number;\n}\n\n// Function to fetch files for the authenticated student\nexport async function fetchStudentDashboardFiles(): Promise<FileItem[]> {\n  try {\n    const getFiles = apiClient.get<FileItem[]>(\"/student_files/student-dashboard\");\n    const response = await getFiles.fetch();\n    return response;\n  } catch (error) {\n    console.error(\"Error fetching dashboard files for student:\", error);\n    throw error;\n  }\n}\n\n// Function to initialize and render the dynamic file list for the student dashboard\nexport async function initializeDynamicStudentDashboardFileList(\n  containerSelector: string\n) {\n  // No need to get student ID from URL since the auth token identifies the user\n\n  // Initialize a new instance of WFDynamicList for Files\n  const list = new WFDynamicList<FileItem>(containerSelector, {\n    rowSelector: \"#fileCard\", // Using ID selector for template\n    loaderSelector: \"#filesloading\", // Selector for the loader\n    emptySelector: \"#filesEmpty\", // Selector for the empty state\n  });\n\n  // Customize the rendering of the loader\n  list.loaderRenderer((loaderElement) => {\n    loaderElement.setStyle({\n      display: \"flex\",\n    });\n    return loaderElement;\n  });\n\n  // Customize the rendering of the empty state\n  list.emptyRenderer((emptyElement) => {\n    emptyElement.setStyle({\n      display: \"flex\",\n    });\n    return emptyElement;\n  });\n\n  // Customize the rendering of list items (File Cards)\n  list.rowRenderer(({ rowData, rowElement }) => {\n    const fileCard = new WFComponent(rowElement);\n\n    // Assuming the entire row is a link to the file\n    fileCard.setAttribute(\"href\", rowData.file_url);\n\n    // Set the fileName to file_name\n    const fileName = fileCard.getChildAsComponent(\"#fileName\");\n    fileName.setText(rowData.file_name);\n\n    // Show the list item\n    rowElement.setStyle({\n      display: \"block\",\n    });\n\n    return rowElement;\n  });\n\n  // Load and display file data\n  try {\n    // Enable the loading state\n    list.changeLoadingStatus(true);\n\n    const files = await fetchStudentDashboardFiles();\n\n    // Sort files alphabetically by file_name\n    files.sort((a, b) => a.file_name.localeCompare(b.file_name));\n\n    // Set the data to be displayed in the dynamic list\n    list.setData(files);\n\n    // Disable the loading state\n    list.changeLoadingStatus(false);\n  } catch (error) {\n    console.error(\"Error loading dashboard files:\", error);\n\n    // If there's an error, set an empty array to trigger the empty state\n    list.setData([]);\n\n    // Disable the loading state\n    list.changeLoadingStatus(false);\n  }\n}\n"],"names":[],"version":3,"file":"studentDashboard.ed34d10f.js.map","sourceRoot":"../"}