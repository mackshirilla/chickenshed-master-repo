{"mappings":"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","sources":["src/modules/forms/auth/loginForm.ts","src/utils/formUtils.ts","node_modules/.pnpm/@xatom+image@1.0.0_@xatom+core@1.0.12/node_modules/@xatom/image/dist/index.js","src/utils/validationUtils.ts","src/utils/recaptchaUtils.ts"],"sourcesContent":["import { WFComponent, WFFormComponent, navigate } from \"@xatom/core\";\nimport {\n  setupValidation,\n  createValidationFunction,\n  toggleError,\n} from \"../../../utils/formUtils\";\nimport {\n  validateEmail,\n  validateNotEmpty,\n} from \"../../../utils/validationUtils\";\nimport { handleRecaptcha } from \"../../../utils/recaptchaUtils\";\nimport { apiClient } from \"../../../api/apiConfig\";\nimport { authManager, UserData } from \"../../../auth/authConfig\";\n\ntype LoginResponse = {\n  status: string;\n  message: string;\n  authToken?: string;\n  user?: {\n    id: string;\n    email: string;\n    role: \"USER\" | \"STUDENT\" | \"GUEST\";\n    profile?: {\n      id: string;\n      first_name: string;\n      last_name: string;\n      email: string;\n      profile_pic?: {\n        url: string;\n      };\n    };\n  };\n};\n\nexport const loginForm = () => {\n  const form = new WFFormComponent<{\n    email: string;\n    password: string;\n  }>(\"#loginForm\");\n\n  const fields = [\n    {\n      input: new WFComponent(\"#emailInput\"),\n      error: new WFComponent(\"#emailInputError\"),\n      validationFn: validateEmail,\n      message: \"Please enter a valid email address.\",\n    },\n    {\n      input: new WFComponent(\"#passwordInput\"),\n      error: new WFComponent(\"#passwordInputError\"),\n      validationFn: validateNotEmpty,\n      message: \"Please enter your password.\",\n    },\n  ];\n\n  const requestError = new WFComponent(\"#requestError\");\n  const requestAnimation = new WFComponent(\"#requestingAnimation\");\n\n  fields.forEach(({ input, error, validationFn, message }) => {\n    setupValidation(\n      input,\n      error,\n      createValidationFunction(input, validationFn, message),\n      requestError\n    );\n  });\n\n  // Helper function to handle API responses\n  const handleApiResponse = (response: LoginResponse) => {\n    if (response.status !== \"success\") {\n      throw new Error(response.message || \"An unknown error occurred.\");\n    }\n    return response;\n  };\n\n  form.onFormSubmit(async (formData, event) => {\n    event.preventDefault();\n\n    toggleError(requestError, \"\", false); // Clear previous errors\n    requestAnimation.setStyle({ display: \"flex\" }); // Show loading animation\n\n    let isFormValid = true;\n\n    // Validate all fields\n    fields.forEach(({ input, error, validationFn, message }) => {\n      const errorMessage = createValidationFunction(input, validationFn, message)();\n\n      if (errorMessage) {\n        toggleError(error, errorMessage, true);\n        isFormValid = false;\n      } else {\n        toggleError(error, \"\", false);\n      }\n    });\n\n    if (!isFormValid) {\n      toggleError(requestError, \"Please correct all errors above.\", true);\n      requestAnimation.setStyle({ display: \"none\" });\n      return;\n    }\n\n    // Handle reCAPTCHA verification\n    const recaptchaAction = \"login\";\n    const isRecaptchaValid = await handleRecaptcha(recaptchaAction);\n\n    if (!isRecaptchaValid) {\n      toggleError(requestError, \"reCAPTCHA verification failed.\", true);\n      requestAnimation.setStyle({ display: \"none\" });\n      return;\n    }\n\n    formData = form.getFormData(); // Prepare form data\n\n    try {\n      const response = await apiClient\n        .post<LoginResponse>(\"/auth/login\", { data: formData })\n        .fetch();\n\n      // Handle API response\n      const result = handleApiResponse(response);\n\n      // Transform the API response to match the expected UserData format\n      const user: UserData = {\n        user_id: result.user?.id || \"\",\n        email: result.user?.email || \"\",\n        role: result.user?.role || \"GUEST\",\n        profile: result.user?.profile\n          ? {\n              profile_id: result.user.profile.id,\n              first_name: result.user.profile.first_name,\n              last_name: result.user.profile.last_name,\n              profile_pic: result.user.profile.profile_pic,\n            }\n          : undefined,\n      };\n\n      // Update userAuth and localStorage\n      authManager.setUser(\n        user, // Transformed user data\n        user.role, // Set appropriate role\n        result.authToken // Set the auth token\n      );\n\n      // Determine the redirect URL based on user role\n      let redirectUrl = \"/dashboard\"; // Default redirect\n\n      if (user.role === \"STUDENT\") {\n        redirectUrl = \"/student-dashboard\";\n      } else if (user.role === \"USER\") {\n        redirectUrl = \"/dashboard\";\n      } else {\n        redirectUrl = \"/dashboard\";\n      }\n\n      // Optionally, check for a stored redirect URL\n      const storedRedirect = localStorage.getItem(\"loginRedirect\");\n      if (storedRedirect) {\n        redirectUrl = storedRedirect;\n        localStorage.removeItem(\"loginRedirect\");\n      }\n\n      navigate(redirectUrl); // Navigate to the determined URL\n    } catch (error: any) {\n      console.error(\"Login failed:\", error);\n      toggleError(\n        requestError,\n        error.message || \"Failed to login.\",\n        true\n      );\n    } finally {\n      requestAnimation.setStyle({ display: \"none\" }); // Hide loading animation\n    }\n  });\n};\n","import { WFComponent } from \"@xatom/core\";\nimport { WFImage } from \"@xatom/image\";\nimport { apiClient } from \"../api/apiConfig\";\nimport { userAuth } from \"../auth/authConfig\";\n\nexport function toggleError(\n  errorMessageComponent: WFComponent<any>,\n  message: string,\n  show: boolean\n): void {\n  errorMessageComponent.updateTextViaAttrVar({ text: show ? message : \"\" });\n  errorMessageComponent.setStyle({ display: show ? \"flex\" : \"none\" });\n}\n\nexport function setupValidation(\n  inputComponent: WFComponent,\n  errorComponent: WFComponent,\n  validate: () => string,\n  requestErrorComponent?: WFComponent // Optional component to clear on input change\n) {\n  const validateAndUpdate = () => {\n    const errorMessage = validate();\n    toggleError(errorComponent, errorMessage, !!errorMessage);\n    if (requestErrorComponent && errorMessage === \"\") {\n      // Clear request error message when the user is correcting the input\n      toggleError(requestErrorComponent, \"\", false);\n    }\n  };\n\n  // Attach event listeners for real-time validation\n  inputComponent.on(\"input\", validateAndUpdate);\n  inputComponent.on(\"blur\", validateAndUpdate);\n  inputComponent.on(\"change\", validateAndUpdate);\n}\n\nexport function createValidationFunction(\n  inputComponent: WFComponent,\n  validationFn: (input: string) => boolean,\n  errorMessage: string\n): () => string {\n  return () => {\n    const inputElement = inputComponent.getElement() as HTMLInputElement;\n    const isValid = validationFn(inputElement.value);\n    return isValid ? \"\" : errorMessage;\n  };\n}\n\nexport function createCheckboxValidationFunction(\n  checkboxComponent: WFComponent,\n  errorMessage: string\n): () => string {\n  return () => {\n    const checkbox = checkboxComponent.getElement() as HTMLInputElement;\n    return checkbox.checked ? \"\" : errorMessage;\n  };\n}\n\nexport function setupCheckboxValidation(\n  checkboxComponent: WFComponent,\n  checkboxErrorComponent: WFComponent,\n  errorMessage: string\n) {\n  const validate = createCheckboxValidationFunction(\n    checkboxComponent,\n    errorMessage\n  );\n  setupValidation(checkboxComponent, checkboxErrorComponent, validate);\n}\n\nexport function validateSelectedSessions(\n  selectedSessions: { sessionId: string; studentIds: string[] }[],\n  errorMessageComponent: WFComponent<any>,\n  errorMessage: string\n): boolean {\n  const isValid =\n    selectedSessions.length > 0 &&\n    selectedSessions.some((session) => session.studentIds.length > 0);\n\n  if (!isValid) {\n    toggleError(errorMessageComponent, errorMessage, true);\n  } else {\n    toggleError(errorMessageComponent, \"\", false);\n  }\n\n  return isValid;\n}\n\ntype fileUploadResponse = {\n  status: string;\n  url: {\n    profile_pic: {\n      url: string;\n    };\n  };\n};\n\n/**\n * Updates the user's profile picture URL in the authentication system.\n * @param {string} imageUrl - The URL of the uploaded image.\n */\nexport function setProfilePicUrl(imageUrl: string): void {\n  const user = userAuth.getUser();\n  if (user && user.profile) {\n    // Ensure the profile_picture object exists\n    user.profile.profile_pic = user.profile.profile_pic || { url: \"\" };\n\n    // Set the profile picture URL\n    user.profile.profile_pic.url = imageUrl;\n    userAuth.setUser(user);\n    localStorage.setItem(\"auth_user\", JSON.stringify(user));\n  }\n}\n\n/**\n * Handles file upload and displays the uploaded image.\n * @param {WFComponent} fileInput - The WFComponent instance for the file input field.\n * @param {WFComponent} fileInputError - The WFComponent instance for displaying error messages.\n * @param {WFComponent} fileInputSuccess - The WFComponent instance for displaying success messages.\n * @param {string} uploadEndpoint - The endpoint to which the file is sent.\n * @returns {Promise<string>} A promise that resolves with the URL of the uploaded image.\n */\n/**\n * Handles file upload and displays the uploaded image.\n * Only JPEG files less than 2 MB can be uploaded.\n * @param {WFComponent} fileInput - The WFComponent instance for the file input field.\n * @param {WFComponent} fileInputError - The WFComponent instance for displaying error messages.\n * @param {WFComponent} fileInputSuccess - The WFComponent instance for displaying success messages.\n * @param {string} uploadEndpoint - The endpoint to which the file is sent.\n * @returns {Promise<string>} A promise that resolves with the URL of the uploaded image.\n */\nexport function setupFileUpload(\n  fileInput: WFComponent,\n  fileInputError: WFComponent,\n  fileInputSuccess: WFComponent,\n  uploadEndpoint: string\n): Promise<string> {\n  const profilePictureImage = new WFImage(\"#profilePictureImage\");\n  const uploadAnimation = new WFComponent(\"#uploadAnimation\");\n\n  const overlay = new WFComponent(\".drop-zone\");\n  let dragCounter = 0;\n\n  return new Promise<string>((resolve) => {\n    const handleFile = (file: File) => {\n      // Validate file type and size\n      const validTypes = [\"image/jpeg\", \"image/jpg\"];\n      const maxSizeInBytes = 2 * 1024 * 1024; // 2 MB\n\n      if (\n        !validTypes.includes(file.type) &&\n        !/\\.(jpg|jpeg)$/i.test(file.name)\n      ) {\n        const errorMessage = \"Only JPEG images are allowed.\";\n        toggleError(fileInputError, errorMessage, true);\n        // Reset file input value\n        (fileInput.getElement() as HTMLInputElement).value = \"\";\n        return;\n      }\n\n      if (file.size > maxSizeInBytes) {\n        const errorMessage = \"File size must be less than 2 MB.\";\n        toggleError(fileInputError, errorMessage, true);\n        // Reset file input value\n        (fileInput.getElement() as HTMLInputElement).value = \"\";\n        return;\n      }\n\n      // Show upload animation immediately\n      uploadAnimation.setStyle({ display: \"flex\" });\n\n      // Hide error and success messages\n      fileInputError.setStyle({ display: \"none\" });\n      fileInputSuccess.setStyle({ display: \"none\" });\n\n      const reader = new FileReader();\n\n      // Display preview image as soon as the file is loaded into memory\n      reader.onload = (event) => {\n        // Set the preview image for the profile picture\n        const result = event.target?.result as string;\n        profilePictureImage.setImage(result);\n\n        // Hide overlay once the image is set\n        overlay.setStyle({ display: \"none\" });\n      };\n\n      reader.readAsDataURL(file);\n\n      const formData = new FormData();\n      formData.append(\"profile_picture\", file);\n\n      const existingStudent = localStorage.getItem(\"current_student\");\n      if (existingStudent) {\n        const student = JSON.parse(existingStudent);\n        formData.append(\"student_profile_id\", student.id.toString());\n      }\n\n      // Send the file to the server\n      const postRequest = apiClient.post<fileUploadResponse>(uploadEndpoint, {\n        data: formData,\n      });\n\n      postRequest.onData((response) => {\n        if (response.status === \"success\") {\n          const imageUrl = response.url.profile_pic.url;\n\n          // Update the profile picture URL in the user session and local storage\n          setProfilePicUrl(imageUrl);\n\n          // Update the image for other parts of the UI as well\n          profilePictureImage.setImage(imageUrl);\n\n          // Store the URL in local storage\n          localStorage.setItem(\"image_upload\", imageUrl);\n\n          // Show success message and hide upload animation\n          fileInputSuccess.setStyle({ display: \"flex\" });\n          uploadAnimation.setStyle({ display: \"none\" });\n\n          // Resolve with the uploaded image URL\n          resolve(imageUrl);\n        } else {\n          const errorMessage = \"Failed to upload profile picture.\";\n          toggleError(fileInputError, errorMessage, true);\n          uploadAnimation.setStyle({ display: \"none\" });\n          overlay.setStyle({ display: \"none\" });\n          dragCounter = 0;\n          // Reset file input value\n          (fileInput.getElement() as HTMLInputElement).value = \"\";\n        }\n      });\n\n      postRequest.onError((error) => {\n        let errorMessage = \"An error occurred during image upload.\";\n        if (error.response && error.response.data) {\n          errorMessage = error.response.data.message || errorMessage;\n        } else if (error.message) {\n          errorMessage = error.message;\n        }\n\n        // Show error message and hide upload animation\n        toggleError(fileInputError, errorMessage, true);\n        uploadAnimation.setStyle({ display: \"none\" });\n        overlay.setStyle({ display: \"none\" });\n        dragCounter = 0;\n        // Reset file input value\n        (fileInput.getElement() as HTMLInputElement).value = \"\";\n      });\n\n      // Make the API call\n      postRequest.fetch();\n    };\n\n    // Event listener for file input changes\n    fileInput.on(\"change\", () => {\n      const file = (fileInput.getElement() as HTMLInputElement).files?.[0];\n      if (file) {\n        handleFile(file);\n      }\n    });\n\n    // Event listeners for drag-and-drop\n    const dragZoneElement = document.body;\n    dragZoneElement.addEventListener(\"dragenter\", (event) => {\n      event.preventDefault();\n      dragCounter++;\n      if (dragCounter === 1) {\n        overlay.setStyle({ display: \"flex\" });\n      }\n    });\n\n    dragZoneElement.addEventListener(\"dragleave\", () => {\n      dragCounter--;\n      if (dragCounter <= 0) {\n        overlay.setStyle({ display: \"none\" });\n        dragCounter = 0;\n      }\n    });\n\n    dragZoneElement.addEventListener(\"dragover\", (event) => {\n      event.preventDefault();\n    });\n\n    dragZoneElement.addEventListener(\"drop\", (event) => {\n      event.preventDefault();\n\n      const files = event.dataTransfer?.files;\n      if (files?.length) {\n        handleFile(files[0]);\n      }\n\n      overlay.setStyle({ display: \"none\" });\n      dragCounter = 0;\n    });\n  });\n}\n\n// src/utils/formUtils.ts\n\n/**\n * Formats a phone number string to the format (xxx) xxx-xxxx.\n * If the input contains more than 10 digits, it truncates the extra digits.\n * If it contains fewer, it formats as much as possible.\n *\n * @param value - The raw phone number string.\n * @returns The formatted phone number string.\n */\nexport const formatPhoneNumber = (value: string): string => {\n  const cleaned = value.replace(/\\D/g, \"\"); // Remove all non-digit characters\n\n  if (cleaned.length <= 3) {\n    return cleaned;\n  } else if (cleaned.length <= 6) {\n    return `(${cleaned.slice(0, 3)}) ${cleaned.slice(3)}`;\n  } else if (cleaned.length <= 10) {\n    return `(${cleaned.slice(0, 3)}) ${cleaned.slice(3, 6)}-${cleaned.slice(\n      6\n    )}`;\n  } else {\n    // If more than 10 digits, truncate the extra digits\n    return `(${cleaned.slice(0, 3)}) ${cleaned.slice(3, 6)}-${cleaned.slice(\n      6,\n      10\n    )}`;\n  }\n};\n","var t=require(\"@xatom/core\");var e,r,s,i,o,n,u={};e=u,r=\"WFImage\",s=()=>c,Object.defineProperty(e,r,{get:s,set:i,enumerable:!0,configurable:!0});class c extends t.WFComponent{constructor(t){super(t)}getImageConfig(){return this._config}getSrc(){return this.getAttribute(\"src\")}getSizes(){return this.getAttribute(\"sizes\")}getSrcSet(){return this.getAttribute(\"srcset\")}getLoading(){return this.getAttribute(\"loading\")}onLoad(t){return this.on(\"load\",t),()=>{this.off(\"load\",t)}}onLoadError(t){return this.on(\"error\",t),()=>{this.off(\"error\",t)}}setImage(t){if(\"string\"==typeof t)this.setAttribute(\"src\",t),this.removeAttribute(\"srcset\"),this.removeAttribute(\"sizes\");else{if(this.setAttribute(\"src\",t.src),\"object\"==typeof t&&t.srcSet&&t.srcSet.length&&t.sizes&&t.sizes.length){const e=t.srcSet.map((t=>`${t.url} ${t.size}`)).join(\", \");this.setAttribute(\"srcset\",e)}else this.removeAttribute(\"srcset\"),this.removeAttribute(\"sizes\");t.loading&&this.setAttribute(\"loading\",t.loading)}}}o=module.exports,n=u,Object.keys(n).forEach((function(t){\"default\"===t||\"__esModule\"===t||o.hasOwnProperty(t)||Object.defineProperty(o,t,{enumerable:!0,get:function(){return n[t]}})}));","import { WFComponent } from \"@xatom/core\";\nimport { toggleError } from \"./formUtils\";\n\nexport function validateNotEmpty(input: string | undefined): boolean {\n  return input !== undefined && input.trim() !== \"\";\n}\n\nexport function validateEmail(input: string): boolean {\n  const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n  return emailRegex.test(input);\n}\n\n/**\n * Validates that the email is either empty or correctly formatted.\n * @param value The email input value.\n * @returns True if valid, false otherwise.\n */\nexport const validateEmailOptional = (value: string): boolean => {\n  if (value.trim() === \"\") {\n    // Email is optional, so empty string is valid\n    return true;\n  }\n  // Validate the email format if not empty\n  return validateEmail(value);\n};\n\nexport function validatePasswordRequirements(password: string): boolean {\n  const hasLowercase = /[a-z]/.test(password);\n  const hasUppercase = /[A-Z]/.test(password);\n  const hasDigit = /\\d/.test(password);\n  const hasSpecialChar = /[!@#$%^&*(),.?\":{}|<>]/.test(password);\n  const hasValidLength = password.length >= 8;\n  return (\n    hasLowercase && hasUppercase && hasDigit && hasSpecialChar && hasValidLength\n  );\n}\n\nexport function validateCheckbox(checked: boolean): boolean {\n  return checked;\n}\n\nexport function validatePasswordsMatch(\n  originalPassword: string,\n  confirmPassword: string\n): boolean {\n  return originalPassword === confirmPassword;\n}\n\nexport function validateSelectField(input: string | undefined): boolean {\n  return input !== undefined && input !== \"N/A\";\n}\n\nexport function validatePhoneNumber(input: string): boolean {\n  const phoneRegex = /^\\(\\d{3}\\)\\s\\d{3}-\\d{4}$/;\n  return phoneRegex.test(input);\n}\n\nexport const validatePhoneNumberOptional = (value: string): boolean => {\n  if (value.trim() === \"\") {\n    // Phone number is optional, so empty string is valid\n    return true;\n  }\n  // Validate the phone number format if not empty\n  return validatePhoneNumber(value);\n};\n","//../../utils/recaptchaUtils.ts\nimport { apiClient } from \"../api/apiConfig\";\n\n// Declaration for the global reCAPTCHA variable.\ndeclare const grecaptcha: any;\n\n/**\n * Asynchronously obtains a reCAPTCHA token for a specified action.\n * @param {string} action - The action name for which the reCAPTCHA token is requested.\n * @returns {Promise<string>} A promise that resolves with the reCAPTCHA token.\n */\nexport async function getRecaptchaToken(action: string): Promise<string> {\n  return new Promise<string>((resolve, reject) => {\n    // Ensure grecaptcha is ready and execute the token request.\n    grecaptcha.ready(() => {\n      grecaptcha\n        .execute(\"6Lekaa8pAAAAAN6qiq0LSP5Akckql4Blg6K5ToUq\", { action: action })\n        .then((token: string) => {\n          resolve(token); // Resolve with the obtained token.\n        }, reject); // Reject the promise if there is an error.\n    });\n  });\n}\n\n/**\n * Validates a reCAPTCHA token with the backend server.\n * @param {string} token - The reCAPTCHA token to validate.\n * @returns {Promise<any>} A promise that resolves with the validation response from the server.\n */\nexport async function validateRecaptchaToken(token: string): Promise<any> {\n  try {\n    // Send the reCAPTCHA token to the server for validation.\n    const response = await apiClient\n      .post(\"/recaptcha/validate\", {\n        data: { \"g-recaptcha-response\": token },\n      })\n      .fetch();\n\n    // Return the server's response directly assuming it's already in JSON format.\n    return response; // Assume response is the direct JSON body.\n  } catch (error) {\n    throw new Error(`ReCAPTCHA validation failed: ${error}`);\n  }\n}\n\n/**\n * Handles the full reCAPTCHA verification flow from obtaining the token to validating it.\n * @param {string} action - The action name for which the reCAPTCHA should be processed.\n * @returns {Promise<boolean>} A promise that resolves with true if the reCAPTCHA verification is successful.\n */\nexport async function handleRecaptcha(action: string): Promise<boolean> {\n  try {\n    const token = await getRecaptchaToken(action);\n    const validationResponse = await validateRecaptchaToken(token);\n    return validationResponse.status === \"success\";\n  } catch (error) {\n    console.error(\"ReCAPTCHA handling failed:\", error);\n    // If error has a response, log it for more context\n    if (error.response) {\n      console.error(\"Error response:\", error.response);\n    }\n    return false;\n  }\n}\n"],"names":[],"version":3,"file":"loginForm.16ecc582.js.map","sourceRoot":"../"}