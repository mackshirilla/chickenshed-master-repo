{"mappings":"C,A,S,C,C,C,C,C,C,C,C,C,E,I,E,A,a,O,W,W,A,a,O,K,K,A,a,O,O,O,A,a,O,O,O,C,E,E,A,Y,O,C,C,E,E,C,C,E,C,E,E,K,E,C,E,E,A,a,O,Q,A,Y,O,O,O,E,O,O,C,I,C,Q,S,E,C,C,C,E,G,C,C,C,E,C,C,G,C,C,C,E,C,C,I,E,A,Y,O,C,C,E,E,C,C,E,C,G,C,G,E,O,E,E,C,G,G,E,O,E,E,C,G,G,G,A,U,O,E,O,E,G,I,E,A,M,uB,E,I,O,E,I,C,mB,C,C,E,O,C,S,C,E,I,E,C,C,E,C,E,C,E,C,O,A,M,E,E,C,E,E,K,C,C,E,I,E,C,C,E,C,I,E,M,C,G,C,C,E,C,E,C,I,C,E,O,C,E,E,E,O,C,I,C,C,O,C,C,E,C,O,C,S,E,C,E,I,E,E,O,C,G,M,A,C,I,E,C,E,E,E,C,C,E,e,C,C,E,E,M,C,S,C,E,I,C,E,C,E,I,C,M,C,E,I,C,O,C,C,C,E,E,O,C,E,E,K,C,E,E,M,C,E,E,Q,C,S,C,C,C,E,C,C,E,C,C,S,C,C,C,E,E,O,C,C,E,C,E,A,E,O,c,C,E,O,C,I,W,O,C,C,E,A,C,G,C,C,E,C,E,I,I,E,E,E,E,M,C,I,E,C,C,E,C,E,C,M,C,S,C,C,C,C,C,E,I,E,E,kD,E,iB,C,GCWA,EAAA,MAAA,CAAA,EAAA,yBAAA,IAAsB,GAXtB,IAAA,EAAA,EAAA,+BACA,EAAA,EAAA,yCACA,EAAA,EAAA,kCACA,EAAA,EAAA,6BACA,EAAA,EAAA,6BACA,EAAA,EAAA,qCACA,EAAA,EAAA,mCACA,EAAA,EAAA,mCACA,EAAA,EAAA,eACA,EAAA,EAAA,qCAEO,eAAe,IACpB,QAAQ,GAAG,CAAC,oBAEZ,GAAI,CACF,IAAM,EAAW,MAAM,AAAA,CAAA,EAAA,EAAA,iBAAgB,AAAhB,EAAkB,CAAC,GAC1C,QAAQ,GAAG,CAAC,wBAAyB,GAGrC,AAAA,CAAA,EAAA,EAAA,SAAS,AAAT,EAAU,CAAE,QAAS,CAAS,GAG9B,AAAA,CAAA,EAAA,EAAA,4BAA4B,AAA5B,EAA6B,EAAU,CACrC,kBAAmB,2BACnB,mBAAoB,sBACpB,oBAAqB,qBACrB,kBAAmB,y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","sources":["<anon>","src/modules/registration_new/index.ts","src/api/startRegistration.ts","src/modules/registration_new/components/dynamicRegistrationTable.ts","src/modules/registration_new/state/registrationState.ts","src/modules/registration_new/components/checkoutLineItems.ts","src/modules/registration_new/components/updateTotalAmount.ts","src/modules/registration_new/components/financialAid.ts","src/utils/formUtils.ts","node_modules/.pnpm/@xatom+image@1.0.0_@xatom+core@1.0.12/node_modules/@xatom/image/dist/index.js","src/utils/validationUtils.ts","src/modules/registration_new/components/pendingStudentsAlert.ts","src/modules/registration_new/components/checkoutSubmission.ts","src/modules/registration_new/components/loadRegistrationUI.ts","src/modules/registration_new/components/actionRequiredDialog.ts"],"sourcesContent":["// modules are defined as an array\n// [ module function, map of requires ]\n//\n// map of requires is short require name -> numeric require\n//\n// anything defined in a previous bundle is accessed via the\n// orig method which is the require for previous bundles\n\n(function (modules, entry, mainEntry, parcelRequireName, globalName) {\n  /* eslint-disable no-undef */\n  var globalObject =\n    typeof globalThis !== 'undefined'\n      ? globalThis\n      : typeof self !== 'undefined'\n      ? self\n      : typeof window !== 'undefined'\n      ? window\n      : typeof global !== 'undefined'\n      ? global\n      : {};\n  /* eslint-enable no-undef */\n\n  // Save the require from previous bundle to this closure if any\n  var previousRequire =\n    typeof globalObject[parcelRequireName] === 'function' &&\n    globalObject[parcelRequireName];\n\n  var cache = previousRequire.cache || {};\n  // Do not use `require` to prevent Webpack from trying to bundle this call\n  var nodeRequire =\n    typeof module !== 'undefined' &&\n    typeof module.require === 'function' &&\n    module.require.bind(module);\n\n  function newRequire(name, jumped) {\n    if (!cache[name]) {\n      if (!modules[name]) {\n        // if we cannot find the module within our internal map or\n        // cache jump to the current global require ie. the last bundle\n        // that was added to the page.\n        var currentRequire =\n          typeof globalObject[parcelRequireName] === 'function' &&\n          globalObject[parcelRequireName];\n        if (!jumped && currentRequire) {\n          return currentRequire(name, true);\n        }\n\n        // If there are other bundles on this page the require from the\n        // previous one is saved to 'previousRequire'. Repeat this as\n        // many times as there are bundles until the module is found or\n        // we exhaust the require chain.\n        if (previousRequire) {\n          return previousRequire(name, true);\n        }\n\n        // Try the node require function if it exists.\n        if (nodeRequire && typeof name === 'string') {\n          return nodeRequire(name);\n        }\n\n        var err = new Error(\"Cannot find module '\" + name + \"'\");\n        err.code = 'MODULE_NOT_FOUND';\n        throw err;\n      }\n\n      localRequire.resolve = resolve;\n      localRequire.cache = {};\n\n      var module = (cache[name] = new newRequire.Module(name));\n\n      modules[name][0].call(\n        module.exports,\n        localRequire,\n        module,\n        module.exports,\n        this\n      );\n    }\n\n    return cache[name].exports;\n\n    function localRequire(x) {\n      var res = localRequire.resolve(x);\n      return res === false ? {} : newRequire(res);\n    }\n\n    function resolve(x) {\n      var id = modules[name][1][x];\n      return id != null ? id : x;\n    }\n  }\n\n  function Module(moduleName) {\n    this.id = moduleName;\n    this.bundle = newRequire;\n    this.exports = {};\n  }\n\n  newRequire.isParcelRequire = true;\n  newRequire.Module = Module;\n  newRequire.modules = modules;\n  newRequire.cache = cache;\n  newRequire.parent = previousRequire;\n  newRequire.register = function (id, exports) {\n    modules[id] = [\n      function (require, module) {\n        module.exports = exports;\n      },\n      {},\n    ];\n  };\n\n  Object.defineProperty(newRequire, 'root', {\n    get: function () {\n      return globalObject[parcelRequireName];\n    },\n  });\n\n  globalObject[parcelRequireName] = newRequire;\n\n  for (var i = 0; i < entry.length; i++) {\n    newRequire(entry[i]);\n  }\n\n  if (mainEntry) {\n    // Expose entry point to Node, AMD or browser globals\n    // Based on https://github.com/ForbesLindesay/umd/blob/master/template.js\n    var mainExports = newRequire(mainEntry);\n\n    // CommonJS\n    if (typeof exports === 'object' && typeof module !== 'undefined') {\n      module.exports = mainExports;\n\n      // RequireJS\n    } else if (typeof define === 'function' && define.amd) {\n      define(function () {\n        return mainExports;\n      });\n\n      // <script>\n    } else if (globalName) {\n      this[globalName] = mainExports;\n    }\n  }\n})({\"nOUIZ\":[function(require,module,exports) {\nvar parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"newProgramRegistration\", ()=>newProgramRegistration);\nvar _startRegistration = require(\"../../api/startRegistration\");\nvar _dynamicRegistrationTable = require(\"./components/dynamicRegistrationTable\");\nvar _checkoutLineItems = require(\"./components/checkoutLineItems\");\nvar _financialAid = require(\"./components/financialAid\");\nvar _registrationState = require(\"./state/registrationState\");\nvar _pendingStudentsAlert = require(\"./components/pendingStudentsAlert\");\nvar _checkoutSubmission = require(\"./components/checkoutSubmission\");\nvar _loadRegistrationUi = require(\"./components/loadRegistrationUi\");\nvar _core = require(\"@xatom/core\");\nvar _actionRequiredDialog = require(\"./components/actionRequiredDialog\");\nasync function newProgramRegistration() {\n    console.log(\"new registration\");\n    try {\n        const response = await (0, _startRegistration.startRegistration)({});\n        console.log(\"Registration started:\", response);\n        // Save the API response in state.\n        (0, _registrationState.saveState)({\n            apiData: response\n        });\n        // Always initialize the dynamic registration table (this sets up the add button and template row).\n        (0, _dynamicRegistrationTable.initDynamicRegistrationTable)(response, {\n            tableBodySelector: \"#subscription_items_list\",\n            emptyStateSelector: \"#subscription_empty\",\n            templateRowSelector: \"#subscription_item\",\n            addButtonSelector: \"#subscription_items_table tfoot #add_subscription_item\",\n            isAddOn: false,\n            fields: {\n                program: {\n                    textSelector: \"#item_program_name\",\n                    selectSelector: \"#program-select-1\"\n                },\n                workshop: {\n                    textSelector: \"#item_workshop_name\",\n                    selectSelector: \"#workshop-select-1\"\n                },\n                session: {\n                    textSelector: \"#item_session_name\",\n                    selectSelector: \"#session-select-1\"\n                },\n                student: {\n                    textSelector: \"#item_student_name\",\n                    selectSelector: \"#student-select-1\"\n                }\n            }\n        });\n        // Rehydrate the UI if there are saved registration items.\n        const state = (0, _registrationState.loadState)();\n        if (state.registrationItems && state.registrationItems.length > 0) (0, _loadRegistrationUi.loadRegistrationUI)();\n        // Set subscription type select value from state.\n        const subscriptionTypeSelect = document.getElementById(\"subscription_type\");\n        if (subscriptionTypeSelect && state.subscriptionType) subscriptionTypeSelect.value = state.subscriptionType;\n        (0, _checkoutLineItems.updateCheckoutLineItems)(response);\n        (0, _pendingStudentsAlert.updatePendingStudentsAlert)(response);\n        // Show action required dialog if no student profiles are returned.\n        (0, _actionRequiredDialog.showActionRequiredDialogIfNoStudentProfiles)(response);\n        // After initial response is loaded, if the loading animation trigger exists, click it.\n        const successTrigger = document.querySelector(\".success_trigger\");\n        if (successTrigger) successTrigger.click();\n        // Setup an event to update the checkout button's enabled/disabled state.\n        function updateCheckoutButtonState() {\n            const confirmedRows = document.querySelectorAll(\"#subscription_items_list tr.confirmed\");\n            const checkoutBtn = document.getElementById(\"submit_registration_checkout\");\n            if (confirmedRows.length === 0) checkoutBtn.disabled = true;\n            else checkoutBtn.disabled = false;\n        }\n        updateCheckoutButtonState();\n        document.addEventListener(\"registrationChanged\", ()=>{\n            (0, _checkoutLineItems.updateCheckoutLineItems)(response);\n            (0, _pendingStudentsAlert.updatePendingStudentsAlert)(response);\n            updateCheckoutButtonState();\n        });\n        // When subscription type changes, update state and line items.\n        if (subscriptionTypeSelect) subscriptionTypeSelect.addEventListener(\"change\", ()=>{\n            (0, _registrationState.saveState)({\n                subscriptionType: subscriptionTypeSelect.value\n            });\n            (0, _checkoutLineItems.updateCheckoutLineItems)(response);\n        });\n        // Setup checkout button behavior.\n        const checkoutButton = new (0, _core.WFComponent)(\"#submit_registration_checkout\");\n        checkoutButton.on(\"click\", async (e)=>{\n            e.preventDefault();\n            const btnEl = checkoutButton.getElement();\n            if (btnEl.disabled) return;\n            btnEl.disabled = true;\n            // Show loading animation.\n            const loadingAnim = document.getElementById(\"submit_registration_checkout_animation\");\n            if (loadingAnim) loadingAnim.style.display = \"block\";\n            try {\n                await (0, _checkoutSubmission.submitCheckout)();\n            // If submitCheckout() returns successfully and redirects, this code may not run.\n            } catch (error) {\n                console.error(error);\n            } finally{\n                // Hide loading animation and re-enable the button if not redirected.\n                if (loadingAnim) loadingAnim.style.display = \"none\";\n                btnEl.disabled = false;\n            }\n        });\n    } catch (error) {\n        console.error(\"Error starting registration:\", error);\n    }\n    (0, _financialAid.initializeFinancialAid)();\n}\n\n},{\"../../api/startRegistration\":\"56OKH\",\"./components/dynamicRegistrationTable\":\"eXZgF\",\"./components/checkoutLineItems\":\"4OVcI\",\"./components/financialAid\":\"82j3J\",\"./state/registrationState\":\"7PLg3\",\"./components/pendingStudentsAlert\":\"fBuhT\",\"./components/checkoutSubmission\":\"aW9bX\",\"./components/loadRegistrationUi\":\"j6atX\",\"@xatom/core\":\"65YBq\",\"./components/actionRequiredDialog\":\"6YvTl\",\"@parcel/transformer-js/src/esmodule-helpers.js\":\"jiucr\"}],\"56OKH\":[function(require,module,exports) {\nvar parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"startRegistration\", ()=>startRegistration);\nvar _apiConfig = require(\"./apiConfig\");\nasync function startRegistration(payload) {\n    try {\n        const response = await (0, _apiConfig.apiClient).post(\"/registration/start_registration\", payload).fetch();\n        if (response.has_active_subscription) // navigate away if they already have an active subscription\n        window.location.assign(\"/dashboard/registration/manage-subscription\");\n        return response;\n    } catch (error) {\n        console.error(\"Error starting registration:\", error);\n        throw error;\n    }\n}\n\n},{\"./apiConfig\":\"dUmIV\",\"@parcel/transformer-js/src/esmodule-helpers.js\":\"jiucr\"}],\"eXZgF\":[function(require,module,exports) {\nvar parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"initDynamicRegistrationTable\", ()=>initDynamicRegistrationTable);\nparcelHelpers.export(exports, \"attachRowEventListeners\", ()=>attachRowEventListeners);\nparcelHelpers.export(exports, \"populateProgramOptions\", ()=>populateProgramOptions);\nvar _core = require(\"@xatom/core\");\nvar _registrationState = require(\"../state/registrationState\");\nfunction initDynamicRegistrationTable(data, config) {\n    const tableBody = new (0, _core.WFComponent)(config.tableBodySelector);\n    const emptyState = new (0, _core.WFComponent)(config.emptyStateSelector);\n    const addButton = new (0, _core.WFComponent)(config.addButtonSelector);\n    const templateRow = document.querySelector(config.templateRowSelector);\n    if (!templateRow) {\n        console.error(\"Template row not found with selector:\", config.templateRowSelector);\n        return;\n    }\n    // Ensure the template row is always hidden.\n    templateRow.style.display = \"none\";\n    addButton.on(\"click\", ()=>{\n        emptyState.getElement().style.display = \"none\";\n        // Clone the template row.\n        const newRowElement = templateRow.cloneNode(true);\n        // Remove the id from the clone so it doesn’t conflict with the template.\n        newRowElement.removeAttribute(\"id\");\n        newRowElement.style.display = \"table-row\";\n        const newRow = new (0, _core.WFComponent)(newRowElement);\n        resetRow(newRow, config);\n        tableBody.appendChild(newRow);\n        populateProgramOptions(newRow, data, config);\n        attachRowEventListeners(newRow, data, config);\n    });\n}\nfunction resetRow(row, config) {\n    const fieldsToReset = [\n        {\n            field: \"program\",\n            enable: true\n        },\n        {\n            field: \"workshop\",\n            enable: false\n        },\n        {\n            field: \"session\",\n            enable: false\n        },\n        {\n            field: \"student\",\n            enable: false\n        }\n    ];\n    fieldsToReset.forEach((item)=>{\n        const textEl = row.getChildAsComponent(config.fields[item.field].textSelector);\n        const selectEl = row.getChildAsComponent(config.fields[item.field].selectSelector);\n        textEl.getElement().style.display = \"none\";\n        selectEl.getElement().style.display = \"block\";\n        selectEl.getElement().disabled = !item.enable;\n    });\n    const confirmButton = row.getChildAsComponent(\".add_registration_button\");\n    confirmButton.getElement().style.display = \"block\";\n    row.removeCssClass(\"confirmed\");\n}\nfunction populateProgramOptions(row, data, config) {\n    const programSelect = row.getChildAsComponent(config.fields.program.selectSelector);\n    programSelect.getElement().disabled = false;\n    const programsMap = new Map();\n    data.sessions.forEach((session)=>{\n        if (session.program.Add_On_Program === config.isAddOn) programsMap.set(session.program.id, session.program.name);\n    });\n    let optionsHTML = '<option value=\"\">Select Program</option>';\n    programsMap.forEach((name, id)=>{\n        optionsHTML += `<option value=\"${id}\">${name}</option>`;\n    });\n    programSelect.setHTML(optionsHTML);\n}\nfunction populateWorkshopOptions(row, data, selectedProgramId, config) {\n    const workshopSelect = row.getChildAsComponent(config.fields.workshop.selectSelector);\n    const filteredSessions = data.sessions.filter((session)=>session.program.id.toString() === selectedProgramId && session.workshop);\n    if (filteredSessions.length > 0) {\n        workshopSelect.getElement().disabled = false;\n        let optionsHTML = '<option value=\"\">Select Workshop</option>';\n        const workshopsMap = new Map();\n        filteredSessions.forEach((session)=>{\n            if (session.workshop) workshopsMap.set(session.workshop.id, session.workshop.Name);\n        });\n        workshopsMap.forEach((name, id)=>{\n            optionsHTML += `<option value=\"${id}\">${name}</option>`;\n        });\n        workshopSelect.setHTML(optionsHTML);\n        workshopSelect.getElement().style.display = \"block\";\n        const workshopText = row.getChildAsComponent(config.fields.workshop.textSelector);\n        workshopText.getElement().style.display = \"none\";\n    } else {\n        workshopSelect.getElement().disabled = true;\n        workshopSelect.getElement().style.display = \"none\";\n        const workshopText = row.getChildAsComponent(config.fields.workshop.textSelector);\n        workshopText.setText(\" - \");\n        workshopText.getElement().style.display = \"block\";\n        populateSessionOptions(row, data, selectedProgramId, null, config);\n    }\n}\nfunction populateSessionOptions(row, data, selectedProgramId, selectedWorkshopId, config) {\n    const sessionSelect = row.getChildAsComponent(config.fields.session.selectSelector);\n    sessionSelect.getElement().disabled = false;\n    let filteredSessions = data.sessions.filter((session)=>session.program.id.toString() === selectedProgramId);\n    if (selectedWorkshopId) filteredSessions = filteredSessions.filter((session)=>session.workshop && session.workshop.id.toString() === selectedWorkshopId);\n    let optionsHTML = '<option value=\"\">Select Session</option>';\n    filteredSessions.forEach((session)=>{\n        const label = `${session.Weekday} ${session.Time_block}`;\n        optionsHTML += `<option value=\"${session.id}\">${label}</option>`;\n    });\n    sessionSelect.setHTML(optionsHTML);\n}\nfunction populateStudentOptions(row, data, config) {\n    const studentSelect = row.getChildAsComponent(config.fields.student.selectSelector);\n    studentSelect.getElement().disabled = false;\n    let optionsHTML = '<option value=\"\">Select Student</option>';\n    const currentSessionId = row.getElement().getAttribute(\"data-session-id\");\n    const tableBodyEl = document.querySelector(config.tableBodySelector);\n    let usedStudentIds = [];\n    if (tableBodyEl && currentSessionId) {\n        const confirmedRows = Array.from(tableBodyEl.querySelectorAll(\"tr.confirmed\"));\n        confirmedRows.forEach((tr)=>{\n            if (tr.getAttribute(\"data-session-id\") === currentSessionId) {\n                const studentId = tr.getAttribute(\"data-student-id\");\n                if (studentId) usedStudentIds.push(studentId);\n            }\n        });\n    }\n    data.student_profiles.forEach((profile)=>{\n        if (!usedStudentIds.includes(profile.id.toString())) optionsHTML += `<option value=\"${profile.id}\">${profile.full_name}</option>`;\n    });\n    studentSelect.setHTML(optionsHTML);\n}\nfunction attachRowEventListeners(row, data, config) {\n    const programSelect = row.getChildAsComponent(config.fields.program.selectSelector);\n    programSelect.on(\"change\", ()=>{\n        const selectEl = programSelect.getElement();\n        const selectedProgramId = selectEl.value;\n        row.getElement().setAttribute(\"data-program-id\", selectedProgramId);\n        populateWorkshopOptions(row, data, selectedProgramId, config);\n        const sessionSelect = row.getChildAsComponent(config.fields.session.selectSelector);\n        sessionSelect.getElement().disabled = false;\n    });\n    const workshopSelect = row.getChildAsComponent(config.fields.workshop.selectSelector);\n    workshopSelect.on(\"change\", ()=>{\n        const selectEl = workshopSelect.getElement();\n        const selectedWorkshopId = selectEl.value;\n        row.getElement().setAttribute(\"data-workshop-id\", selectedWorkshopId);\n        const confirmedProgramId = row.getElement().getAttribute(\"data-program-id\") || \"\";\n        populateSessionOptions(row, data, confirmedProgramId, selectedWorkshopId, config);\n    });\n    const sessionSelect = row.getChildAsComponent(config.fields.session.selectSelector);\n    sessionSelect.on(\"change\", ()=>{\n        const selectEl = sessionSelect.getElement();\n        const selectedSessionId = selectEl.value;\n        row.getElement().setAttribute(\"data-session-id\", selectedSessionId);\n        const studentSelect = row.getChildAsComponent(config.fields.student.selectSelector);\n        studentSelect.getElement().disabled = false;\n        populateStudentOptions(row, data, config);\n    });\n    const studentSelect = row.getChildAsComponent(config.fields.student.selectSelector);\n    studentSelect.on(\"change\", ()=>{\n        const selectEl = studentSelect.getElement();\n        row.getElement().setAttribute(\"data-student-id\", selectEl.value);\n    });\n    const confirmButton = row.getChildAsComponent(\".add_registration_button\");\n    confirmButton.on(\"click\", ()=>{\n        const programSelectEl = row.getChildAsComponent(config.fields.program.selectSelector).getElement();\n        const sessionSelectEl = row.getChildAsComponent(config.fields.session.selectSelector).getElement();\n        const studentSelectEl = row.getChildAsComponent(config.fields.student.selectSelector).getElement();\n        if (!programSelectEl.value || !sessionSelectEl.value || !studentSelectEl.value) {\n            console.warn(\"Please select a Program, Session, and Student.\");\n            return;\n        }\n        const tableBodyEl = document.querySelector(config.tableBodySelector);\n        const currentSessionId = row.getElement().getAttribute(\"data-session-id\");\n        if (tableBodyEl && currentSessionId) {\n            const duplicate = Array.from(tableBodyEl.querySelectorAll(\"tr.confirmed\")).some((tr)=>{\n                return tr.getAttribute(\"data-session-id\") === currentSessionId && tr.getAttribute(\"data-student-id\") === studentSelectEl.value;\n            });\n            if (duplicate) {\n                console.warn(\"This student is already registered for the selected session.\");\n                return;\n            }\n        }\n        row.getElement().setAttribute(\"data-student-id\", studentSelectEl.value);\n        const programText = row.getChildAsComponent(config.fields.program.textSelector);\n        programText.setText(programSelectEl.options[programSelectEl.selectedIndex].text);\n        const workshopSelectEl = row.getChildAsComponent(config.fields.workshop.selectSelector).getElement();\n        let workshopTextValue = workshopSelectEl.disabled ? \" - \" : workshopSelectEl.options[workshopSelectEl.selectedIndex].text;\n        const workshopText = row.getChildAsComponent(config.fields.workshop.textSelector);\n        workshopText.setText(workshopTextValue);\n        const sessionText = row.getChildAsComponent(config.fields.session.textSelector);\n        const selectedSession = data.sessions.find((session)=>session.id.toString() === sessionSelectEl.value);\n        if (selectedSession) sessionText.setText(`${selectedSession.Weekday} ${selectedSession.Time_block}`);\n        else sessionText.setText(\"Unknown session\");\n        const studentText = row.getChildAsComponent(config.fields.student.textSelector);\n        studentText.setText(studentSelectEl.options[studentSelectEl.selectedIndex].text);\n        const hideSelectParent = (selectSelector)=>{\n            const comp = row.getChildAsComponent(selectSelector);\n            const parent = comp.getElement().parentElement;\n            if (parent) parent.style.display = \"none\";\n        };\n        hideSelectParent(config.fields.program.selectSelector);\n        hideSelectParent(config.fields.workshop.selectSelector);\n        hideSelectParent(config.fields.session.selectSelector);\n        hideSelectParent(config.fields.student.selectSelector);\n        confirmButton.getElement().style.display = \"none\";\n        programText.getElement().style.display = \"block\";\n        workshopText.getElement().style.display = \"block\";\n        sessionText.getElement().style.display = \"block\";\n        studentText.getElement().style.display = \"block\";\n        row.addCssClass(\"confirmed\");\n        // Update state: add this row's data to registrationItems.\n        const currentItems = (0, _registrationState.loadState)().registrationItems || [];\n        const newItem = {\n            program_id: row.getAttribute(\"data-program-id\"),\n            session_id: row.getAttribute(\"data-session-id\"),\n            student_id: row.getAttribute(\"data-student-id\"),\n            program_name: programSelectEl.options[programSelectEl.selectedIndex].text,\n            workshop_name: workshopText.getElement().textContent || \"\",\n            session_name: sessionText.getElement().textContent || \"\",\n            student_name: studentText.getElement().textContent || \"\"\n        };\n        (0, _registrationState.saveState)({\n            registrationItems: [\n                ...currentItems,\n                newItem\n            ]\n        });\n        document.dispatchEvent(new CustomEvent(\"registrationChanged\"));\n    });\n    const deleteButton = row.getChildAsComponent(\".remove_registration_button\");\n    deleteButton.on(\"click\", ()=>{\n        row.remove();\n        const tableBodyEl = document.querySelector(config.tableBodySelector);\n        if (tableBodyEl) {\n            const templateRowId = config.templateRowSelector.startsWith(\"#\") ? config.templateRowSelector.slice(1) : config.templateRowSelector;\n            const emptyStateId = config.emptyStateSelector.startsWith(\"#\") ? config.emptyStateSelector.slice(1) : config.emptyStateSelector;\n            const userRows = Array.from(tableBodyEl.querySelectorAll(\"tr\")).filter((tr)=>{\n                return tr.id !== templateRowId && tr.id !== emptyStateId;\n            });\n            if (userRows.length === 0) {\n                const emptyRowEl = document.querySelector(config.emptyStateSelector);\n                if (emptyRowEl) emptyRowEl.style.display = \"table-row\";\n            }\n        }\n        // Remove corresponding item from state.registrationItems.\n        const state = (0, _registrationState.loadState)();\n        const updatedItems = (state.registrationItems || []).filter((item)=>{\n            return !(item.session_id === row.getAttribute(\"data-session-id\") && item.student_id === row.getAttribute(\"data-student-id\"));\n        });\n        (0, _registrationState.saveState)({\n            registrationItems: updatedItems\n        });\n        document.dispatchEvent(new CustomEvent(\"registrationChanged\"));\n    });\n}\n\n},{\"@xatom/core\":\"65YBq\",\"../state/registrationState\":\"7PLg3\",\"@parcel/transformer-js/src/esmodule-helpers.js\":\"jiucr\"}],\"7PLg3\":[function(require,module,exports) {\n// registrationState.ts\nvar parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"loadState\", ()=>loadState);\nparcelHelpers.export(exports, \"saveState\", ()=>saveState);\nparcelHelpers.export(exports, \"resetRegistrationState\", ()=>resetRegistrationState);\nconst STORAGE_KEY = \"registrationState\";\nlet state = loadStateFromStorage() || {\n    fin_aid_requested: false,\n    selected_discount: undefined,\n    financialAidData: undefined,\n    subscriptionType: \"year\",\n    apiData: undefined,\n    originalSubscriptionTotal: 0,\n    registrationItems: []\n};\nfunction loadState() {\n    return state;\n}\nfunction saveState(newState) {\n    state = {\n        ...state,\n        ...newState\n    };\n    saveStateToStorage(state);\n}\nfunction resetRegistrationState() {\n    state = {\n        fin_aid_requested: false,\n        selected_discount: undefined,\n        financialAidData: undefined,\n        subscriptionType: \"year\",\n        apiData: undefined,\n        originalSubscriptionTotal: 0,\n        registrationItems: []\n    };\n    saveStateToStorage(state);\n}\nfunction loadStateFromStorage() {\n    try {\n        const stored = localStorage.getItem(STORAGE_KEY);\n        return stored ? JSON.parse(stored) : null;\n    } catch (error) {\n        console.error(\"Error loading state from storage:\", error);\n        return null;\n    }\n}\nfunction saveStateToStorage(state) {\n    try {\n        localStorage.setItem(STORAGE_KEY, JSON.stringify(state));\n    } catch (error) {\n        console.error(\"Error saving state to storage:\", error);\n    }\n}\n\n},{\"@parcel/transformer-js/src/esmodule-helpers.js\":\"jiucr\"}],\"4OVcI\":[function(require,module,exports) {\nvar parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\n/**\n * Updates the checkout line items UI.\n * - Builds and displays subscription line items.\n * - Determines if deposit line items should be displayed:\n *     • Always if pending student profiles exist.\n *     • Otherwise, only for monthly subscriptions if the registration is early.\n * - Updates the overall total and early alert accordingly.\n */ parcelHelpers.export(exports, \"updateCheckoutLineItems\", ()=>updateCheckoutLineItems);\nvar _core = require(\"@xatom/core\");\nvar _registrationState = require(\"../state/registrationState\");\nvar _updateTotalAmount = require(\"./updateTotalAmount\");\n/**\n * Retrieves a session by its ID.\n */ function getSessionById(sessions, sessionId) {\n    const session = sessions.find((s)=>s.id.toString() === sessionId);\n    console.log(`[DEBUG] getSessionById: Looking for session id ${sessionId}:`, session);\n    return session;\n}\n/**\n * Groups line items by productName.\n */ function groupLineItems(items) {\n    const grouped = new Map();\n    items.forEach((item)=>{\n        const key = item.productName;\n        if (grouped.has(key)) {\n            const existing = grouped.get(key);\n            existing.quantity += item.quantity;\n            existing.total += item.total;\n            grouped.set(key, existing);\n        } else grouped.set(key, {\n            ...item\n        });\n    });\n    const finalItems = Array.from(grouped.values());\n    console.log(\"[DEBUG] groupLineItems: Final grouped items:\", finalItems);\n    return finalItems;\n}\n/**\n * Updates the deposit line items using the deposit product’s single sale price.\n */ function updateDepositLineItems(apiData, subscriptionType) {\n    console.log(\"[DEBUG] updateDepositLineItems: Starting deposit update...\");\n    const subscriptionRows = document.querySelectorAll(\"#subscription_items_list tr.confirmed\");\n    console.log(\"[DEBUG] updateDepositLineItems: Found\", subscriptionRows.length, \"confirmed subscription rows.\");\n    const depositItems = [];\n    subscriptionRows.forEach((row, index)=>{\n        const sessionId = row.getAttribute(\"data-session-id\");\n        console.log(`[DEBUG] updateDepositLineItems: Processing row ${index + 1}, session id:`, sessionId);\n        if (!sessionId) return;\n        const session = getSessionById(apiData.sessions, sessionId);\n        if (!session || !session.deposit_product) {\n            console.log(`[DEBUG] updateDepositLineItems: No session or deposit product found for session id ${sessionId}`);\n            return;\n        }\n        // Use the deposit product’s single sale price.\n        const depositPriceStr = session.deposit_product.Displayed_single_sale_price;\n        const depositUnitPrice = parseFloat(depositPriceStr.replace(/[^0-9\\.]/g, \"\")) || 0;\n        console.log(`[DEBUG] updateDepositLineItems: Deposit price string: \"${depositPriceStr}\", parsed unit price: ${depositUnitPrice}`);\n        depositItems.push({\n            productName: session.Name,\n            quantity: 1,\n            unitPrice: depositUnitPrice,\n            total: depositUnitPrice\n        });\n    });\n    console.log(\"[DEBUG] updateDepositLineItems: Deposit Items Array before grouping:\", depositItems);\n    const finalDepositItems = groupLineItems(depositItems);\n    let depositHTML = \"\";\n    finalDepositItems.forEach((item, index)=>{\n        depositHTML += `\n      <div class=\"line_item u-hflex-left-center u-text-small\">\n        <div id=\"deposit_item_product\" class=\"text-weight-bold\">${item.productName}</div>\n        <div id=\"deposit_item_unit_amount\" class=\"line_item_unit_amount\">$${item.unitPrice.toFixed(2)}</div>\n        <div>x</div>\n        <div id=\"deposit_item_quantity\" class=\"line_item_quantity\">${item.quantity}</div>\n        <div id=\"deposit_item_total\" class=\"line_item_total text-weight-bold\">$${item.total.toFixed(2)}</div>\n      </div>\n    `;\n        console.log(`[DEBUG] updateDepositLineItems: Built deposit line item ${index + 1}:`, item);\n    });\n    new (0, _core.WFComponent)(\"#deposit_line_items_list\").setHTML(depositHTML);\n    const depositTotal = finalDepositItems.reduce((acc, item)=>acc + item.total, 0);\n    console.log(\"[DEBUG] updateDepositLineItems: Calculated deposit total:\", depositTotal);\n    new (0, _core.WFComponent)(\"#deposit_total\").setText(`$${depositTotal.toFixed(2)}`);\n    // Toggle container display based on whether any deposit items exist.\n    const depositContainer = new (0, _core.WFComponent)(\"#deposit_line_items_container\");\n    const displayStyle = finalDepositItems.length > 0 ? \"flex\" : \"none\";\n    depositContainer.getElement().style.display = displayStyle;\n    console.log(\"[DEBUG] updateDepositLineItems: Deposit container display set to:\", displayStyle);\n    return depositTotal;\n}\nfunction updateCheckoutLineItems(apiData) {\n    console.log(\"[DEBUG] updateCheckoutLineItems: Running updateCheckoutLineItems...\");\n    const subscriptionTypeSelect = document.getElementById(\"subscription_type\");\n    if (!subscriptionTypeSelect) {\n        console.warn(\"[DEBUG] updateCheckoutLineItems: Subscription type select not found.\");\n        return;\n    }\n    const subscriptionType = subscriptionTypeSelect.value; // \"year\", \"month\", or \"semester\"\n    console.log(\"[DEBUG] updateCheckoutLineItems: Subscription type selected:\", subscriptionType);\n    const suffix = subscriptionType === \"year\" ? \"/year\" : subscriptionType === \"month\" ? \"/month\" : subscriptionType === \"semester\" ? \"/semester\" : \"\";\n    // Process subscription items.\n    const subscriptionRows = document.querySelectorAll(\"#subscription_items_list tr.confirmed\");\n    console.log(\"[DEBUG] updateCheckoutLineItems: Found\", subscriptionRows.length, \"confirmed subscription rows.\");\n    const subscriptionItems = [];\n    subscriptionRows.forEach((row, index)=>{\n        const sessionId = row.getAttribute(\"data-session-id\");\n        console.log(`[DEBUG] updateCheckoutLineItems: Processing subscription row ${index + 1}, session id:`, sessionId);\n        if (!sessionId) return;\n        const session = getSessionById(apiData.sessions, sessionId);\n        if (!session) return;\n        let priceStr = \"\";\n        if (subscriptionType === \"year\") priceStr = session.tuition_product.Displayed_annual_price;\n        else if (subscriptionType === \"month\") priceStr = session.tuition_product.Displayed_monthly_price;\n        else if (subscriptionType === \"semester\") priceStr = session.tuition_product.Displayed_semester_price;\n        console.log(`[DEBUG] updateCheckoutLineItems: Price string for session ${sessionId}:`, priceStr);\n        const unitPrice = parseFloat(priceStr.replace(/[^0-9\\.]/g, \"\")) || 0;\n        console.log(`[DEBUG] updateCheckoutLineItems: Parsed unit price for session ${sessionId}:`, unitPrice);\n        subscriptionItems.push({\n            productName: session.Name,\n            quantity: 1,\n            unitPrice: unitPrice,\n            total: unitPrice\n        });\n    });\n    console.log(\"[DEBUG] updateCheckoutLineItems: Subscription Items Array before grouping:\", subscriptionItems);\n    const finalSubscriptionItems = groupLineItems(subscriptionItems);\n    let subscriptionHTML = \"\";\n    finalSubscriptionItems.forEach((item, index)=>{\n        subscriptionHTML += `\n      <div class=\"line_item u-hflex-left-center u-text-small\">\n        <div id=\"subscription_item_product\" class=\"text-weight-bold line_item_product\">${item.productName}</div>\n        <div id=\"subscription_item_unit_amount\" class=\"line_item_unit_amount\">$${item.unitPrice.toFixed(2)}</div>\n        <div>x</div>\n        <div id=\"subscription_item_quantity\" class=\"line_item_quantity\">${item.quantity}</div>\n        <div id=\"subscription_item_total\" class=\"line_item_total text-weight-bold\">$${item.total.toFixed(2)} ${suffix}</div>\n      </div>\n    `;\n        console.log(`[DEBUG] updateCheckoutLineItems: Built subscription line item ${index + 1}:`, item);\n    });\n    new (0, _core.WFComponent)(\"#subscription_line_items_list\").setHTML(subscriptionHTML);\n    const subscriptionItemsWrapper = new (0, _core.WFComponent)(\"#subscription_line_items_wrap\");\n    const subscriptionEmptyState = new (0, _core.WFComponent)(\"#subscription_line_items_empty\");\n    if (finalSubscriptionItems.length > 0) {\n        subscriptionItemsWrapper.getElement().style.display = \"flex\";\n        subscriptionEmptyState.getElement().style.display = \"none\";\n    } else {\n        subscriptionItemsWrapper.getElement().style.display = \"none\";\n        subscriptionEmptyState.getElement().style.display = \"block\";\n    }\n    const subscriptionTotal = finalSubscriptionItems.reduce((acc, item)=>acc + item.total, 0);\n    console.log(\"[DEBUG] updateCheckoutLineItems: Subscription Total:\", subscriptionTotal);\n    (0, _registrationState.saveState)({\n        originalSubscriptionTotal: subscriptionTotal\n    });\n    console.log(\"[DEBUG] updateCheckoutLineItems: Updated originalSubscriptionTotal:\", subscriptionTotal);\n    // Determine early registration for monthly subscriptions.\n    let earlyRegistration = false;\n    let earliestStartDate = null;\n    if (subscriptionType === \"month\") subscriptionRows.forEach((row)=>{\n        const sessionId = row.getAttribute(\"data-session-id\");\n        if (!sessionId) return;\n        const session = getSessionById(apiData.sessions, sessionId);\n        if (!session) return;\n        const startDate = session.program[\"1st_Semester_Start_Date\"];\n        if (startDate && startDate > Date.now()) {\n            earlyRegistration = true;\n            if (earliestStartDate === null || startDate < earliestStartDate) earliestStartDate = startDate;\n        }\n    });\n    // Check for pending student profiles.\n    const pendingStudents = apiData.student_profiles ? apiData.student_profiles.filter((profile)=>profile.Status && profile.Status.toLowerCase() === \"pending\") : [];\n    // Determine if deposit line items should display:\n    // • Always if pending students exist.\n    // • Otherwise, only if subscriptionType is \"month\" and earlyRegistration is true.\n    let depositShouldDisplay = false;\n    if (pendingStudents.length > 0) depositShouldDisplay = true;\n    else if (subscriptionType === \"month\" && earlyRegistration) depositShouldDisplay = true;\n    let depositTotal = 0;\n    if (depositShouldDisplay) {\n        console.log(\"[DEBUG] updateCheckoutLineItems: Pending students or early registration detected.\");\n        depositTotal = updateDepositLineItems(apiData, subscriptionType);\n        console.log(\"[DEBUG] updateCheckoutLineItems: Deposit total computed:\", depositTotal);\n    } else {\n        // Hide deposit container if not applicable.\n        new (0, _core.WFComponent)(\"#deposit_line_items_container\").getElement().style.display = \"none\";\n        console.log(\"[DEBUG] updateCheckoutLineItems: Deposit container hidden.\");\n    }\n    // Update overall total amount due.\n    (0, _updateTotalAmount.updateTotalAmount)(false, subscriptionType, depositTotal);\n    // Update early registration alert.\n    updateEarlyAlert(apiData, subscriptionType);\n}\n/**\n * If the subscription is monthly, checks confirmed rows for the earliest upcoming start date.\n * If found, displays the early alert with that date; otherwise, hides the alert.\n */ function updateEarlyAlert(apiData, subscriptionType) {\n    if (subscriptionType !== \"month\") {\n        new (0, _core.WFComponent)(\"#alertBoxEarly\").getElement().style.display = \"none\";\n        return;\n    }\n    const confirmedRows = document.querySelectorAll(\"#subscription_items_list tr.confirmed\");\n    let earliestStartDate = null;\n    confirmedRows.forEach((row)=>{\n        const sessionId = row.getAttribute(\"data-session-id\");\n        if (!sessionId) return;\n        const session = getSessionById(apiData.sessions, sessionId);\n        if (!session) return;\n        const startDate = session.program[\"1st_Semester_Start_Date\"];\n        if (startDate && startDate > Date.now()) {\n            if (earliestStartDate === null || startDate < earliestStartDate) earliestStartDate = startDate;\n        }\n    });\n    const alertBox = new (0, _core.WFComponent)(\"#alertBoxEarly\");\n    const startDateSpan = new (0, _core.WFComponent)(\"#subscription_start_date\");\n    if (earliestStartDate) {\n        const formattedDate = new Date(earliestStartDate).toLocaleDateString();\n        startDateSpan.setText(formattedDate);\n        alertBox.getElement().style.display = \"block\";\n        console.log(\"[DEBUG] updateEarlyAlert: Displaying early alert with start date:\", formattedDate);\n    } else {\n        alertBox.getElement().style.display = \"none\";\n        console.log(\"[DEBUG] updateEarlyAlert: No upcoming start dates found, hiding early alert.\");\n    }\n}\n\n},{\"@xatom/core\":\"65YBq\",\"../state/registrationState\":\"7PLg3\",\"./updateTotalAmount\":\"8DFQT\",\"@parcel/transformer-js/src/esmodule-helpers.js\":\"jiucr\"}],\"8DFQT\":[function(require,module,exports) {\nvar parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"updateTotalAmount\", ()=>updateTotalAmount);\nvar _core = require(\"@xatom/core\");\nvar _registrationState = require(\"../state/registrationState\");\nfunction updateTotalAmount(includeDeposit, subscriptionType, depositTotal = 0) {\n    const state = (0, _registrationState.loadState)();\n    const originalTotal = state.originalSubscriptionTotal || 0;\n    const discount = state.selected_discount ? parseFloat(state.selected_discount) : 0;\n    const discountAmount = originalTotal * (discount / 100);\n    const discountedSubscriptionTotal = originalTotal - discountAmount;\n    // If depositTotal is provided (i.e. pending students exist) then that is the due amount.\n    const overallTotal = depositTotal > 0 ? depositTotal : discountedSubscriptionTotal;\n    const suffix = subscriptionType ? \"/\" + subscriptionType : \"\";\n    const discountPill = new (0, _core.WFComponent)(\"#subscription_discount_pill\");\n    discountPill.getElement().style.display = discount > 0 ? \"block\" : \"none\";\n    const discountApplied = new (0, _core.WFComponent)(\"#subscription_discount_applied\");\n    discountApplied.setText(discount > 0 ? `${discount}%` : \"\");\n    const originalAmount = new (0, _core.WFComponent)(\"#subscription_original_amount\");\n    if (discount > 0) {\n        originalAmount.setText(`was $${originalTotal.toFixed(2)} ${suffix}`);\n        originalAmount.getElement().style.display = \"block\";\n    } else originalAmount.getElement().style.display = \"none\";\n    const subscriptionTotal = new (0, _core.WFComponent)(\"#subscription_total\");\n    subscriptionTotal.setText(`$${discountedSubscriptionTotal.toFixed(2)} ${suffix}`);\n    const overallTotalDisplay = new (0, _core.WFComponent)(\"#total_amount_due\");\n    overallTotalDisplay.setText(`$${overallTotal.toFixed(2)}`);\n}\n\n},{\"@xatom/core\":\"65YBq\",\"../state/registrationState\":\"7PLg3\",\"@parcel/transformer-js/src/esmodule-helpers.js\":\"jiucr\"}],\"82j3J\":[function(require,module,exports) {\nvar parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"initializeFinancialAid\", ()=>initializeFinancialAid);\nparcelHelpers.export(exports, \"saveFinancialAidData\", ()=>saveFinancialAidData);\nparcelHelpers.export(exports, \"loadFinancialAidData\", ()=>loadFinancialAidData);\nvar _core = require(\"@xatom/core\");\nvar _registrationState = require(\"../state/registrationState\");\nvar _formUtils = require(\"../../../utils/formUtils\");\nvar _validationUtils = require(\"../../../utils/validationUtils\");\nconst initializeFinancialAid = ()=>{\n    // Load any saved financial aid data to pre-populate the form.\n    loadFinancialAidData();\n    const financialAidCheckbox = new (0, _core.WFComponent)(\"#requestFinAid\");\n    const financialAidDialog = new (0, _core.WFComponent)(\"#finaidForm\");\n    financialAidCheckbox.on(\"change\", ()=>{\n        const checkboxElement = financialAidCheckbox.getElement();\n        if (checkboxElement.checked) financialAidDialog.getElement().showModal();\n        else {\n            (0, _registrationState.saveState)({\n                fin_aid_requested: false,\n                selected_discount: undefined\n            });\n            document.dispatchEvent(new CustomEvent(\"registrationChanged\"));\n        }\n    });\n    financialAidDialog.getElement()?.addEventListener(\"close\", ()=>{\n        const state = (0, _registrationState.loadState)();\n        if (!state.selected_discount) financialAidCheckbox.getElement().checked = false;\n    });\n    setupFinancialAidFormValidation();\n    const submitButton = new (0, _core.WFComponent)(\"#submitfinancialAid\");\n    submitButton.on(\"click\", ()=>{\n        if (validateFinancialAidForm()) {\n            saveFinancialAidData();\n            showSuccessState();\n        }\n    });\n    attachCloseDialogHandler(financialAidDialog);\n    const annualIncomeInput = new (0, _core.WFComponent)(\"#annualIncome\");\n    const monthlyExpenseInput = new (0, _core.WFComponent)(\"#monthlyExpense\");\n    const formatAndSetInputValue = (component)=>{\n        const inputEl = component.getElement();\n        let value = inputEl.value.replace(/[^\\d.-]/g, \"\");\n        let cursorPos = inputEl.selectionStart || 0;\n        const commaCountBefore = (inputEl.value.slice(0, cursorPos).match(/,/g) || []).length;\n        if (value.includes(\".\")) {\n            const [intPart, decPart] = value.split(\".\");\n            value = `${intPart}.${decPart.slice(0, 2)}`;\n        }\n        const formattedValue = formatNumber(value);\n        inputEl.value = formattedValue;\n        const commaCountAfter = (formattedValue.slice(0, cursorPos).match(/,/g) || []).length;\n        cursorPos += commaCountAfter - commaCountBefore;\n        if (cursorPos > formattedValue.length) cursorPos = formattedValue.length;\n        inputEl.setSelectionRange(cursorPos, cursorPos);\n    };\n    const formatNumber = (value)=>{\n        const num = parseFloat(value.replace(/,/g, \"\"));\n        if (isNaN(num)) return value;\n        return num.toLocaleString(\"en-US\", {\n            minimumFractionDigits: 0,\n            maximumFractionDigits: 0\n        });\n    };\n    annualIncomeInput.on(\"input\", ()=>formatAndSetInputValue(annualIncomeInput));\n    monthlyExpenseInput.on(\"input\", ()=>formatAndSetInputValue(monthlyExpenseInput));\n};\n/**\n * Loads saved financial aid data from state and populates the form fields.\n * The checkbox is set to checked only if fin_aid_requested is true.\n */ function loadFinancialAidData() {\n    const state = (0, _registrationState.loadState)();\n    const financialAidCheckbox = new (0, _core.WFComponent)(\"#requestFinAid\");\n    if (state.fin_aid_requested && state.financialAidData) {\n        financialAidCheckbox.getElement().checked = true;\n        const relationshipInput = new (0, _core.WFComponent)(\"#finaidRelationship\");\n        const annualIncomeInput = new (0, _core.WFComponent)(\"#annualIncome\");\n        const monthlyExpenseInput = new (0, _core.WFComponent)(\"#monthlyExpense\");\n        const previousParticipantValue = state.financialAidData.previousParticipant;\n        const previousParticipantInputs = document.getElementsByName(\"previous_participant\");\n        relationshipInput.getElement().value = state.financialAidData.relationship || \"\";\n        annualIncomeInput.getElement().value = state.financialAidData.annualIncome || \"\";\n        monthlyExpenseInput.getElement().value = state.financialAidData.monthlyExpense || \"\";\n        previousParticipantInputs.forEach((radio)=>{\n            radio.checked = radio.value === previousParticipantValue;\n        });\n        console.log(\"[DEBUG] loadFinancialAidData: Financial aid data loaded from state.\");\n    } else financialAidCheckbox.getElement().checked = false;\n}\n/**\n * Sets up field-level validation for the financial aid form.\n */ const setupFinancialAidFormValidation = ()=>{\n    const relationshipInput = new (0, _core.WFComponent)(\"#finaidRelationship\");\n    const relationshipError = new (0, _core.WFComponent)(\"#finaidRelationshipError\");\n    const previousParticipantInputs = document.getElementsByName(\"previous_participant\");\n    const previousParticipantError = new (0, _core.WFComponent)(\"#previousParticipantError\");\n    const annualIncomeInput = new (0, _core.WFComponent)(\"#annualIncome\");\n    const annualIncomeError = new (0, _core.WFComponent)(\"#annualIncomeError\");\n    const monthlyExpenseInput = new (0, _core.WFComponent)(\"#monthlyExpense\");\n    const monthlyExpenseError = new (0, _core.WFComponent)(\"#monthlyExpenseError\");\n    (0, _formUtils.setupValidation)(relationshipInput, relationshipError, ()=>(0, _validationUtils.validateSelectField)(getComponentValue(relationshipInput)) ? \"\" : \"Please select a relationship.\");\n    (0, _formUtils.setupValidation)(annualIncomeInput, annualIncomeError, ()=>(0, _validationUtils.validateNotEmpty)(getComponentValue(annualIncomeInput)) ? \"\" : \"Please enter your annual household income.\");\n    (0, _formUtils.setupValidation)(monthlyExpenseInput, monthlyExpenseError, ()=>(0, _validationUtils.validateNotEmpty)(getComponentValue(monthlyExpenseInput)) ? \"\" : \"Please enter your monthly expenditure.\");\n    Array.from(previousParticipantInputs).forEach((input)=>{\n        (0, _formUtils.setupValidation)(new (0, _core.WFComponent)(input), previousParticipantError, ()=>{\n            const selected = Array.from(previousParticipantInputs).some((radio)=>radio.checked);\n            return selected ? \"\" : \"Please select an option.\";\n        });\n    });\n};\n/**\n * Validates the financial aid form.\n */ const validateFinancialAidForm = ()=>{\n    const relationshipInput = new (0, _core.WFComponent)(\"#finaidRelationship\");\n    const annualIncomeInput = new (0, _core.WFComponent)(\"#annualIncome\");\n    const monthlyExpenseInput = new (0, _core.WFComponent)(\"#monthlyExpense\");\n    const previousParticipantInputs = document.getElementsByName(\"previous_participant\");\n    const isRelationshipValid = (0, _validationUtils.validateSelectField)(getComponentValue(relationshipInput));\n    (0, _formUtils.toggleError)(new (0, _core.WFComponent)(\"#finaidRelationshipError\"), \"Please select a relationship.\", !isRelationshipValid);\n    const isAnnualIncomeValid = (0, _validationUtils.validateNotEmpty)(getComponentValue(annualIncomeInput));\n    (0, _formUtils.toggleError)(new (0, _core.WFComponent)(\"#annualIncomeError\"), \"Please enter your annual household income.\", !isAnnualIncomeValid);\n    const isMonthlyExpenseValid = (0, _validationUtils.validateNotEmpty)(getComponentValue(monthlyExpenseInput));\n    (0, _formUtils.toggleError)(new (0, _core.WFComponent)(\"#monthlyExpenseError\"), \"Please enter your monthly expenditure.\", !isMonthlyExpenseValid);\n    const isPreviousParticipantValid = Array.from(previousParticipantInputs).some((radio)=>radio.checked);\n    (0, _formUtils.toggleError)(new (0, _core.WFComponent)(\"#previousParticipantError\"), \"Please select an option.\", !isPreviousParticipantValid);\n    return isRelationshipValid && isAnnualIncomeValid && isMonthlyExpenseValid && isPreviousParticipantValid;\n};\n/**\n * Saves the financial aid data to state.\n */ const saveFinancialAidData = ()=>{\n    const relationship = new (0, _core.WFComponent)(\"#finaidRelationship\").getElement().value;\n    const annualIncome = new (0, _core.WFComponent)(\"#annualIncome\").getElement().value;\n    const monthlyExpense = new (0, _core.WFComponent)(\"#monthlyExpense\").getElement().value;\n    const previousParticipantInput = document.querySelector(\"input[name='previous_participant']:checked\");\n    const previousParticipant = previousParticipantInput ? previousParticipantInput.value : \"\";\n    (0, _registrationState.saveState)({\n        fin_aid_requested: true,\n        selected_discount: \"\",\n        financialAidData: {\n            relationship,\n            annualIncome,\n            monthlyExpense,\n            previousParticipant\n        }\n    });\n    console.log(\"[DEBUG] saveFinancialAidData: Financial aid data saved:\", {\n        relationship,\n        annualIncome,\n        monthlyExpense,\n        previousParticipant\n    });\n};\n/**\n * Shows a success state for the financial aid form.\n */ const showSuccessState = ()=>{\n    const successMessage = new (0, _core.WFComponent)(\".success-message\");\n    const form = new (0, _core.WFComponent)(\"#wf-form-Finaid-Form\");\n    form.setStyle({\n        display: \"none\"\n    });\n    successMessage.setStyle({\n        display: \"block\"\n    });\n    const applyDiscountButton = new (0, _core.WFComponent)(\"#applyDiscount\");\n    const backFinAidButton = new (0, _core.WFComponent)(\"#backFinAid\");\n    const financialAidDialog = new (0, _core.WFComponent)(\"#finaidForm\");\n    applyDiscountButton.on(\"click\", ()=>{\n        const selectedDiscount = document.querySelector(\"input[name='discountValue']:checked\");\n        if (selectedDiscount) {\n            const discountValue = selectedDiscount.value;\n            (0, _registrationState.saveState)({\n                selected_discount: discountValue,\n                fin_aid_requested: true\n            });\n            document.dispatchEvent(new CustomEvent(\"registrationChanged\"));\n            closeFinancialAidDialog(financialAidDialog);\n        } else console.warn(\"No discount selected.\");\n    });\n    backFinAidButton.on(\"click\", ()=>{\n        successMessage.setStyle({\n            display: \"none\"\n        });\n        form.setStyle({\n            display: \"flex\"\n        });\n    });\n};\nconst closeFinancialAidDialog = (dialog)=>{\n    dialog.getElement().close();\n};\nconst attachCloseDialogHandler = (dialog)=>{\n    const closeButton = new (0, _core.WFComponent)(\"#close-dialog-btn\");\n    closeButton.on(\"click\", ()=>closeFinancialAidDialog(dialog));\n    dialog.getElement()?.addEventListener(\"click\", (event)=>{\n        const rect = dialog.getElement().getBoundingClientRect();\n        if (event.clientX < rect.left || event.clientX > rect.right || event.clientY < rect.top || event.clientY > rect.bottom) closeFinancialAidDialog(dialog);\n    });\n};\nconst getComponentValue = (component)=>{\n    const element = component.getElement();\n    return element.value;\n};\n\n},{\"@xatom/core\":\"65YBq\",\"../state/registrationState\":\"7PLg3\",\"../../../utils/formUtils\":\"gepHz\",\"../../../utils/validationUtils\":\"gu2z7\",\"@parcel/transformer-js/src/esmodule-helpers.js\":\"jiucr\"}],\"gepHz\":[function(require,module,exports) {\nvar parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"toggleError\", ()=>toggleError);\nparcelHelpers.export(exports, \"setupValidation\", ()=>setupValidation);\nparcelHelpers.export(exports, \"createValidationFunction\", ()=>createValidationFunction);\nparcelHelpers.export(exports, \"createCheckboxValidationFunction\", ()=>createCheckboxValidationFunction);\nparcelHelpers.export(exports, \"setupCheckboxValidation\", ()=>setupCheckboxValidation);\nparcelHelpers.export(exports, \"validateSelectedSessions\", ()=>validateSelectedSessions);\n/**\n * Updates the user's profile picture URL in the authentication system.\n * @param {string} imageUrl - The URL of the uploaded image.\n */ parcelHelpers.export(exports, \"setProfilePicUrl\", ()=>setProfilePicUrl);\n/**\n * Handles file upload and displays the uploaded image.\n * @param {WFComponent} fileInput - The WFComponent instance for the file input field.\n * @param {WFComponent} fileInputError - The WFComponent instance for displaying error messages.\n * @param {WFComponent} fileInputSuccess - The WFComponent instance for displaying success messages.\n * @param {string} uploadEndpoint - The endpoint to which the file is sent.\n * @returns {Promise<string>} A promise that resolves with the URL of the uploaded image.\n */ /**\n * Handles file upload and displays the uploaded image.\n * Only JPEG files less than 2 MB can be uploaded.\n * @param {WFComponent} fileInput - The WFComponent instance for the file input field.\n * @param {WFComponent} fileInputError - The WFComponent instance for displaying error messages.\n * @param {WFComponent} fileInputSuccess - The WFComponent instance for displaying success messages.\n * @param {string} uploadEndpoint - The endpoint to which the file is sent.\n * @returns {Promise<string>} A promise that resolves with the URL of the uploaded image.\n */ parcelHelpers.export(exports, \"setupFileUpload\", ()=>setupFileUpload);\nparcelHelpers.export(exports, \"formatPhoneNumber\", ()=>formatPhoneNumber);\nvar _core = require(\"@xatom/core\");\nvar _image = require(\"@xatom/image\");\nvar _apiConfig = require(\"../api/apiConfig\");\nvar _authConfig = require(\"../auth/authConfig\");\nfunction toggleError(errorMessageComponent, message, show) {\n    errorMessageComponent.updateTextViaAttrVar({\n        text: show ? message : \"\"\n    });\n    errorMessageComponent.setStyle({\n        display: show ? \"flex\" : \"none\"\n    });\n}\nfunction setupValidation(inputComponent, errorComponent, validate, requestErrorComponent // Optional component to clear on input change\n) {\n    const validateAndUpdate = ()=>{\n        const errorMessage = validate();\n        toggleError(errorComponent, errorMessage, !!errorMessage);\n        if (requestErrorComponent && errorMessage === \"\") // Clear request error message when the user is correcting the input\n        toggleError(requestErrorComponent, \"\", false);\n    };\n    // Attach event listeners for real-time validation\n    inputComponent.on(\"input\", validateAndUpdate);\n    inputComponent.on(\"blur\", validateAndUpdate);\n    inputComponent.on(\"change\", validateAndUpdate);\n}\nfunction createValidationFunction(inputComponent, validationFn, errorMessage) {\n    return ()=>{\n        const inputElement = inputComponent.getElement();\n        const isValid = validationFn(inputElement.value);\n        return isValid ? \"\" : errorMessage;\n    };\n}\nfunction createCheckboxValidationFunction(checkboxComponent, errorMessage) {\n    return ()=>{\n        const checkbox = checkboxComponent.getElement();\n        return checkbox.checked ? \"\" : errorMessage;\n    };\n}\nfunction setupCheckboxValidation(checkboxComponent, checkboxErrorComponent, errorMessage) {\n    const validate = createCheckboxValidationFunction(checkboxComponent, errorMessage);\n    setupValidation(checkboxComponent, checkboxErrorComponent, validate);\n}\nfunction validateSelectedSessions(selectedSessions, errorMessageComponent, errorMessage) {\n    const isValid = selectedSessions.length > 0 && selectedSessions.some((session)=>session.studentIds.length > 0);\n    if (!isValid) toggleError(errorMessageComponent, errorMessage, true);\n    else toggleError(errorMessageComponent, \"\", false);\n    return isValid;\n}\nfunction setProfilePicUrl(imageUrl) {\n    const user = (0, _authConfig.userAuth).getUser();\n    if (user && user.profile) {\n        // Ensure the profile_picture object exists\n        user.profile.profile_pic = user.profile.profile_pic || {\n            url: \"\"\n        };\n        // Set the profile picture URL\n        user.profile.profile_pic.url = imageUrl;\n        (0, _authConfig.userAuth).setUser(user);\n        localStorage.setItem(\"auth_user\", JSON.stringify(user));\n    }\n}\nfunction setupFileUpload(fileInput, fileInputError, fileInputSuccess, uploadEndpoint) {\n    const profilePictureImage = new (0, _image.WFImage)(\"#profilePictureImage\");\n    const uploadAnimation = new (0, _core.WFComponent)(\"#uploadAnimation\");\n    const overlay = new (0, _core.WFComponent)(\".drop-zone\");\n    let dragCounter = 0;\n    return new Promise((resolve)=>{\n        const handleFile = (file)=>{\n            // Validate file type and size\n            const validTypes = [\n                \"image/jpeg\",\n                \"image/jpg\"\n            ];\n            const maxSizeInBytes = 2097152; // 2 MB\n            if (!validTypes.includes(file.type) && !/\\.(jpg|jpeg)$/i.test(file.name)) {\n                const errorMessage = \"Only JPEG images are allowed.\";\n                toggleError(fileInputError, errorMessage, true);\n                // Reset file input value\n                fileInput.getElement().value = \"\";\n                return;\n            }\n            if (file.size > maxSizeInBytes) {\n                const errorMessage = \"File size must be less than 2 MB.\";\n                toggleError(fileInputError, errorMessage, true);\n                // Reset file input value\n                fileInput.getElement().value = \"\";\n                return;\n            }\n            // Show upload animation immediately\n            uploadAnimation.setStyle({\n                display: \"flex\"\n            });\n            // Hide error and success messages\n            fileInputError.setStyle({\n                display: \"none\"\n            });\n            fileInputSuccess.setStyle({\n                display: \"none\"\n            });\n            const reader = new FileReader();\n            // Display preview image as soon as the file is loaded into memory\n            reader.onload = (event)=>{\n                // Set the preview image for the profile picture\n                const result = event.target?.result;\n                profilePictureImage.setImage(result);\n                // Hide overlay once the image is set\n                overlay.setStyle({\n                    display: \"none\"\n                });\n            };\n            reader.readAsDataURL(file);\n            const formData = new FormData();\n            formData.append(\"profile_picture\", file);\n            const existingStudent = localStorage.getItem(\"current_student\");\n            if (existingStudent) {\n                const student = JSON.parse(existingStudent);\n                formData.append(\"student_profile_id\", student.id.toString());\n            }\n            // Send the file to the server\n            const postRequest = (0, _apiConfig.apiClient).post(uploadEndpoint, {\n                data: formData\n            });\n            postRequest.onData((response)=>{\n                if (response.status === \"success\") {\n                    const imageUrl = response.url.profile_pic.url;\n                    // Update the profile picture URL in the user session and local storage\n                    setProfilePicUrl(imageUrl);\n                    // Update the image for other parts of the UI as well\n                    profilePictureImage.setImage(imageUrl);\n                    // Store the URL in local storage\n                    localStorage.setItem(\"image_upload\", imageUrl);\n                    // Show success message and hide upload animation\n                    fileInputSuccess.setStyle({\n                        display: \"flex\"\n                    });\n                    uploadAnimation.setStyle({\n                        display: \"none\"\n                    });\n                    // Resolve with the uploaded image URL\n                    resolve(imageUrl);\n                } else {\n                    const errorMessage = \"Failed to upload profile picture.\";\n                    toggleError(fileInputError, errorMessage, true);\n                    uploadAnimation.setStyle({\n                        display: \"none\"\n                    });\n                    overlay.setStyle({\n                        display: \"none\"\n                    });\n                    dragCounter = 0;\n                    // Reset file input value\n                    fileInput.getElement().value = \"\";\n                }\n            });\n            postRequest.onError((error)=>{\n                let errorMessage = \"An error occurred during image upload.\";\n                if (error.response && error.response.data) errorMessage = error.response.data.message || errorMessage;\n                else if (error.message) errorMessage = error.message;\n                // Show error message and hide upload animation\n                toggleError(fileInputError, errorMessage, true);\n                uploadAnimation.setStyle({\n                    display: \"none\"\n                });\n                overlay.setStyle({\n                    display: \"none\"\n                });\n                dragCounter = 0;\n                // Reset file input value\n                fileInput.getElement().value = \"\";\n            });\n            // Make the API call\n            postRequest.fetch();\n        };\n        // Event listener for file input changes\n        fileInput.on(\"change\", ()=>{\n            const file = fileInput.getElement().files?.[0];\n            if (file) handleFile(file);\n        });\n        // Event listeners for drag-and-drop\n        const dragZoneElement = document.body;\n        dragZoneElement.addEventListener(\"dragenter\", (event)=>{\n            event.preventDefault();\n            dragCounter++;\n            if (dragCounter === 1) overlay.setStyle({\n                display: \"flex\"\n            });\n        });\n        dragZoneElement.addEventListener(\"dragleave\", ()=>{\n            dragCounter--;\n            if (dragCounter <= 0) {\n                overlay.setStyle({\n                    display: \"none\"\n                });\n                dragCounter = 0;\n            }\n        });\n        dragZoneElement.addEventListener(\"dragover\", (event)=>{\n            event.preventDefault();\n        });\n        dragZoneElement.addEventListener(\"drop\", (event)=>{\n            event.preventDefault();\n            const files = event.dataTransfer?.files;\n            if (files?.length) handleFile(files[0]);\n            overlay.setStyle({\n                display: \"none\"\n            });\n            dragCounter = 0;\n        });\n    });\n}\nconst formatPhoneNumber = (value)=>{\n    const cleaned = value.replace(/\\D/g, \"\"); // Remove all non-digit characters\n    if (cleaned.length <= 3) return cleaned;\n    else if (cleaned.length <= 6) return `(${cleaned.slice(0, 3)}) ${cleaned.slice(3)}`;\n    else if (cleaned.length <= 10) return `(${cleaned.slice(0, 3)}) ${cleaned.slice(3, 6)}-${cleaned.slice(6)}`;\n    else // If more than 10 digits, truncate the extra digits\n    return `(${cleaned.slice(0, 3)}) ${cleaned.slice(3, 6)}-${cleaned.slice(6, 10)}`;\n};\n\n},{\"@xatom/core\":\"65YBq\",\"@xatom/image\":\"bavwf\",\"../api/apiConfig\":\"dUmIV\",\"../auth/authConfig\":\"dHwPR\",\"@parcel/transformer-js/src/esmodule-helpers.js\":\"jiucr\"}],\"bavwf\":[function(require,module,exports) {\nvar t = require(\"d023971cccd819e3\");\nvar e, r, s, i, o, n, u = {};\ne = u, r = \"WFImage\", s = ()=>c, Object.defineProperty(e, r, {\n    get: s,\n    set: i,\n    enumerable: !0,\n    configurable: !0\n});\nclass c extends t.WFComponent {\n    constructor(t){\n        super(t);\n    }\n    getImageConfig() {\n        return this._config;\n    }\n    getSrc() {\n        return this.getAttribute(\"src\");\n    }\n    getSizes() {\n        return this.getAttribute(\"sizes\");\n    }\n    getSrcSet() {\n        return this.getAttribute(\"srcset\");\n    }\n    getLoading() {\n        return this.getAttribute(\"loading\");\n    }\n    onLoad(t) {\n        return this.on(\"load\", t), ()=>{\n            this.off(\"load\", t);\n        };\n    }\n    onLoadError(t) {\n        return this.on(\"error\", t), ()=>{\n            this.off(\"error\", t);\n        };\n    }\n    setImage(t) {\n        if (\"string\" == typeof t) this.setAttribute(\"src\", t), this.removeAttribute(\"srcset\"), this.removeAttribute(\"sizes\");\n        else {\n            if (this.setAttribute(\"src\", t.src), \"object\" == typeof t && t.srcSet && t.srcSet.length && t.sizes && t.sizes.length) {\n                const e = t.srcSet.map((t)=>`${t.url} ${t.size}`).join(\", \");\n                this.setAttribute(\"srcset\", e);\n            } else this.removeAttribute(\"srcset\"), this.removeAttribute(\"sizes\");\n            t.loading && this.setAttribute(\"loading\", t.loading);\n        }\n    }\n}\no = module.exports, n = u, Object.keys(n).forEach(function(t) {\n    \"default\" === t || \"__esModule\" === t || o.hasOwnProperty(t) || Object.defineProperty(o, t, {\n        enumerable: !0,\n        get: function() {\n            return n[t];\n        }\n    });\n});\n\n},{\"d023971cccd819e3\":\"65YBq\"}],\"gu2z7\":[function(require,module,exports) {\nvar parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"validateNotEmpty\", ()=>validateNotEmpty);\nparcelHelpers.export(exports, \"validateEmail\", ()=>validateEmail);\nparcelHelpers.export(exports, \"validateEmailOptional\", ()=>validateEmailOptional);\nparcelHelpers.export(exports, \"validatePasswordRequirements\", ()=>validatePasswordRequirements);\nparcelHelpers.export(exports, \"validateCheckbox\", ()=>validateCheckbox);\nparcelHelpers.export(exports, \"validatePasswordsMatch\", ()=>validatePasswordsMatch);\nparcelHelpers.export(exports, \"validateSelectField\", ()=>validateSelectField);\nparcelHelpers.export(exports, \"validatePhoneNumber\", ()=>validatePhoneNumber);\nparcelHelpers.export(exports, \"validatePhoneNumberOptional\", ()=>validatePhoneNumberOptional);\nfunction validateNotEmpty(input) {\n    return input !== undefined && input.trim() !== \"\";\n}\nfunction validateEmail(input) {\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    return emailRegex.test(input);\n}\nconst validateEmailOptional = (value)=>{\n    if (value.trim() === \"\") // Email is optional, so empty string is valid\n    return true;\n    // Validate the email format if not empty\n    return validateEmail(value);\n};\nfunction validatePasswordRequirements(password) {\n    const hasLowercase = /[a-z]/.test(password);\n    const hasUppercase = /[A-Z]/.test(password);\n    const hasDigit = /\\d/.test(password);\n    const hasSpecialChar = /[!@#$%^&*(),.?\":{}|<>]/.test(password);\n    const hasValidLength = password.length >= 8;\n    return hasLowercase && hasUppercase && hasDigit && hasSpecialChar && hasValidLength;\n}\nfunction validateCheckbox(checked) {\n    return checked;\n}\nfunction validatePasswordsMatch(originalPassword, confirmPassword) {\n    return originalPassword === confirmPassword;\n}\nfunction validateSelectField(input) {\n    return input !== undefined && input !== \"N/A\";\n}\nfunction validatePhoneNumber(input) {\n    const phoneRegex = /^\\(\\d{3}\\)\\s\\d{3}-\\d{4}$/;\n    return phoneRegex.test(input);\n}\nconst validatePhoneNumberOptional = (value)=>{\n    if (value.trim() === \"\") // Phone number is optional, so empty string is valid\n    return true;\n    // Validate the phone number format if not empty\n    return validatePhoneNumber(value);\n};\n\n},{\"@parcel/transformer-js/src/esmodule-helpers.js\":\"jiucr\"}],\"fBuhT\":[function(require,module,exports) {\nvar parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"updatePendingStudentsAlert\", ()=>updatePendingStudentsAlert);\nvar _core = require(\"@xatom/core\");\nfunction updatePendingStudentsAlert(apiData) {\n    const alertBox = new (0, _core.WFComponent)(\"#alertBox\");\n    const alertPendingStudentList = new (0, _core.WFComponent)(\"#alertPendingStudentList\");\n    // Check if student_profiles exists in the API response\n    if (apiData.student_profiles && Array.isArray(apiData.student_profiles)) {\n        // Filter for pending profiles (case-insensitive)\n        const pendingStudents = apiData.student_profiles.filter((profile)=>profile.Status && profile.Status.toLowerCase() === \"pending\");\n        if (pendingStudents.length > 0) {\n            // Create a comma-separated list of full names\n            const names = pendingStudents.map((profile)=>profile.full_name).join(\", \");\n            alertPendingStudentList.setText(names);\n            alertBox.getElement().style.display = \"flex\";\n            return;\n        }\n    }\n    // If no pending students, hide the alert box.\n    alertBox.getElement().style.display = \"none\";\n}\n\n},{\"@xatom/core\":\"65YBq\",\"@parcel/transformer-js/src/esmodule-helpers.js\":\"jiucr\"}],\"aW9bX\":[function(require,module,exports) {\nvar parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\n/**\n * Gathers all registration data and sends it to the checkout endpoint.\n */ parcelHelpers.export(exports, \"submitCheckout\", ()=>submitCheckout);\nvar _core = require(\"@xatom/core\");\nvar _registrationState = require(\"../state/registrationState\");\nvar _formUtils = require(\"../../../utils/formUtils\");\nvar _apiConfig = require(\"../../../api/apiConfig\");\n/**\n * Utility: Given an array of sessions and a sessionId (as string),\n * returns the matching session object.\n */ function getSessionById(sessions, sessionId) {\n    const session = sessions.find((s)=>s.id.toString() === sessionId);\n    console.log(`[DEBUG] checkoutSubmission - getSessionById: Looking for session id ${sessionId}:`, session);\n    return session;\n}\nasync function submitCheckout() {\n    // 1. Load state (which should include apiData, financial aid info, subscription type, etc.)\n    const state = (0, _registrationState.loadState)();\n    if (!state.apiData) {\n        console.error(\"No API data found in state.\");\n        displayCheckoutError(\"No API data found in state.\");\n        return;\n    }\n    const apiData = state.apiData;\n    // 2. Build registration items from confirmed subscription rows.\n    const confirmedRows = Array.from(document.querySelectorAll(\"#subscription_items_list tr.confirmed\"));\n    const registrationItems = confirmedRows.map((row)=>({\n            program_id: row.getAttribute(\"data-program-id\"),\n            session_id: row.getAttribute(\"data-session-id\"),\n            student_id: row.getAttribute(\"data-student-id\")\n        }));\n    // 3. Build subscription line items.\n    const subscriptionLineItemsMap = new Map();\n    confirmedRows.forEach((row)=>{\n        const sessionId = row.getAttribute(\"data-session-id\");\n        if (!sessionId) return;\n        const session = getSessionById(apiData.sessions, sessionId);\n        if (!session) return;\n        let priceId = \"\";\n        if (state.subscriptionType === \"year\") priceId = session.tuition_product.Annual_price_id;\n        else if (state.subscriptionType === \"month\") priceId = session.tuition_product.Monthly_price_id;\n        else if (state.subscriptionType === \"semester\") priceId = session.tuition_product.Semester_price_id;\n        if (!priceId) return;\n        const currentQty = subscriptionLineItemsMap.get(priceId) || 0;\n        subscriptionLineItemsMap.set(priceId, currentQty + 1);\n    });\n    const subscriptionLineItems = Array.from(subscriptionLineItemsMap.entries()).map(([price, quantity])=>({\n            price,\n            quantity\n        }));\n    console.log(\"[DEBUG] submitCheckout: Subscription line items\", subscriptionLineItems);\n    // 4. Determine early registration for monthly subscriptions.\n    let earlyRegistration = false;\n    let earliestStartDate = null;\n    if (state.subscriptionType === \"month\") confirmedRows.forEach((row)=>{\n        const sessionId = row.getAttribute(\"data-session-id\");\n        if (!sessionId) return;\n        const session = getSessionById(apiData.sessions, sessionId);\n        if (!session) return;\n        const startDate = session.program[\"1st_Semester_Start_Date\"];\n        if (startDate && startDate > Date.now()) {\n            earlyRegistration = true;\n            if (earliestStartDate === null || startDate < earliestStartDate) earliestStartDate = startDate;\n        }\n    });\n    console.log(\"[DEBUG] submitCheckout: Early registration =\", earlyRegistration, \"Earliest start date =\", earliestStartDate);\n    // 5. Check for pending student profiles.\n    const pendingStudents = apiData.student_profiles ? apiData.student_profiles.filter((profile)=>profile.Status && profile.Status.toLowerCase() === \"pending\") : [];\n    console.log(\"[DEBUG] submitCheckout: Pending students\", pendingStudents);\n    // 6. Build deposit line items if applicable.\n    let depositLineItems = null;\n    if (pendingStudents.length > 0 || state.subscriptionType === \"month\" && earlyRegistration) {\n        const depositLineItemsMap = new Map();\n        const savedItems = state.registrationItems || [];\n        savedItems.forEach((item)=>{\n            const sessionId = item.session_id;\n            if (!sessionId) return;\n            const session = getSessionById(apiData.sessions, sessionId);\n            if (!session || !session.deposit_product) return;\n            const depositPriceId = session.deposit_product.Single_sale_price_id;\n            if (!depositPriceId) return;\n            const currentQty = depositLineItemsMap.get(depositPriceId) || 0;\n            depositLineItemsMap.set(depositPriceId, currentQty + 1);\n        });\n        depositLineItems = depositLineItemsMap.size > 0 ? Array.from(depositLineItemsMap.entries()).map(([price, quantity])=>({\n                price,\n                quantity\n            })) : null;\n    }\n    console.log(\"[DEBUG] submitCheckout: Deposit line items\", depositLineItems);\n    // 7. Get the total amount due from the DOM.\n    const totalDueText = new (0, _core.WFComponent)(\"#total_amount_due\").getElement().textContent || \"\";\n    const totalDue = parseFloat(totalDueText.replace(/[^0-9\\.]/g, \"\")) || 0;\n    // 8. Compute subscription pricing details.\n    const subscriptionSubtotal = state.originalSubscriptionTotal || 0; // Amount with no discounts.\n    const discountPercent = state.selected_discount ? parseFloat(state.selected_discount) : 0;\n    const subscriptionAmountDiscount = subscriptionSubtotal * (discountPercent / 100);\n    const subscriptionTotal = subscriptionSubtotal - subscriptionAmountDiscount;\n    // 9. Pull financial aid info from state.\n    const financialAid = {\n        requested: state.fin_aid_requested,\n        selected_discount: state.selected_discount,\n        data: state.financialAidData\n    };\n    // 10. Assemble the payload object with new subscription pricing keys.\n    const checkoutPayload = {\n        registration_items: registrationItems,\n        subscription_line_items: subscriptionLineItems,\n        deposit_line_items: depositLineItems,\n        financial_aid: financialAid,\n        subscription_type: state.subscriptionType,\n        early_registration: earlyRegistration,\n        earliest_start_date: earliestStartDate,\n        subscription_subtotal: subscriptionSubtotal,\n        subscription_amount_discount: subscriptionAmountDiscount,\n        subscription_total: subscriptionTotal,\n        total_due: totalDue,\n        students_pending: pendingStudents.length > 0,\n        base_url: window.location.origin\n    };\n    console.log(\"[DEBUG] submitCheckout: Payload\", checkoutPayload);\n    // 11. Send the payload using your Axios-based apiClient with .fetch() and a wrapped data property.\n    try {\n        const response = await (0, _apiConfig.apiClient).post(\"/registration/checkout\", {\n            data: checkoutPayload\n        }).fetch();\n        const data = response;\n        console.log(\"[DEBUG] submitCheckout: Response\", data);\n        if (data.url) {\n            hideCheckoutError();\n            window.location.href = data.url;\n        } else throw new Error(\"No checkout URL returned\");\n    } catch (error) {\n        console.error(\"Error submitting checkout\", error);\n        displayCheckoutError(error.message || \"An error occurred during checkout.\");\n    }\n}\n/**\n * Displays an error message in the checkout error element using toggleError.\n * @param message The error message to display.\n */ function displayCheckoutError(message) {\n    const errorComp = new (0, _core.WFComponent)(\"#registration_checkout_error\");\n    (0, _formUtils.toggleError)(errorComp, message, true);\n}\n/**\n * Hides the checkout error element.\n */ function hideCheckoutError() {\n    const errorComp = new (0, _core.WFComponent)(\"#registration_checkout_error\");\n    (0, _formUtils.toggleError)(errorComp, \"\", false);\n}\n\n},{\"@xatom/core\":\"65YBq\",\"../state/registrationState\":\"7PLg3\",\"../../../utils/formUtils\":\"gepHz\",\"../../../api/apiConfig\":\"dUmIV\",\"@parcel/transformer-js/src/esmodule-helpers.js\":\"jiucr\"}],\"j6atX\":[function(require,module,exports) {\nvar parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"loadRegistrationUI\", ()=>loadRegistrationUI);\nvar _registrationState = require(\"../state/registrationState\");\nfunction loadRegistrationUI() {\n    const state = (0, _registrationState.loadState)();\n    if (!state.registrationItems || state.registrationItems.length === 0) {\n        console.log(\"[DEBUG] loadRegistrationUI: No registration items to load.\");\n        return;\n    }\n    const tableBodyEl = document.getElementById(\"subscription_items_list\");\n    if (!tableBodyEl) {\n        console.error(\"Table body not found.\");\n        return;\n    }\n    // Get the template row.\n    const templateRow = document.getElementById(\"subscription_item\");\n    if (!templateRow) {\n        console.error(\"Template row not found.\");\n        return;\n    }\n    // Ensure the template row remains hidden.\n    templateRow.style.display = \"none\";\n    // Remove any confirmed rows that are clones (i.e. that do not have the id \"subscription_item\").\n    const allRows = Array.from(tableBodyEl.getElementsByTagName(\"tr\"));\n    allRows.forEach((row)=>{\n        if (row.id !== \"subscription_item\") row.remove();\n    });\n    // Hide the empty state element.\n    const emptyStateEl = document.getElementById(\"subscription_empty\");\n    if (emptyStateEl) emptyStateEl.style.display = \"none\";\n    // For each saved registration item, clone the template row and append it.\n    state.registrationItems.forEach((item)=>{\n        const newRow = templateRow.cloneNode(true);\n        // Remove id so it's not the template.\n        newRow.removeAttribute(\"id\");\n        newRow.classList.add(\"confirmed\");\n        newRow.style.display = \"table-row\";\n        // Set data attributes.\n        newRow.setAttribute(\"data-program-id\", item.program_id || \"\");\n        newRow.setAttribute(\"data-session-id\", item.session_id || \"\");\n        newRow.setAttribute(\"data-student-id\", item.student_id || \"\");\n        // Populate display text fields.\n        const programTextEl = newRow.querySelector(\"#item_program_name\");\n        if (programTextEl) {\n            programTextEl.textContent = item.program_name || \"\";\n            programTextEl.style.display = \"block\";\n        }\n        const workshopTextEl = newRow.querySelector(\"#item_workshop_name\");\n        if (workshopTextEl) {\n            workshopTextEl.textContent = item.workshop_name || \"\";\n            workshopTextEl.style.display = \"block\";\n        }\n        const sessionTextEl = newRow.querySelector(\"#item_session_name\");\n        if (sessionTextEl) {\n            sessionTextEl.textContent = item.session_name || \"\";\n            sessionTextEl.style.display = \"block\";\n        }\n        const studentTextEl = newRow.querySelector(\"#item_student_name\");\n        if (studentTextEl) {\n            studentTextEl.textContent = item.student_name || \"\";\n            studentTextEl.style.display = \"block\";\n        }\n        // Hide select elements and the confirm button.\n        const selects = newRow.querySelectorAll(\"select\");\n        selects.forEach((sel)=>sel.style.display = \"none\");\n        const confirmButton = newRow.querySelector(\".add_registration_button\");\n        if (confirmButton) confirmButton.style.display = \"none\";\n        // Attach delete event listener.\n        const deleteButton = newRow.querySelector(\".remove_registration_button\");\n        if (deleteButton) deleteButton.addEventListener(\"click\", ()=>{\n            newRow.remove();\n            const currentItems = (0, _registrationState.loadState)().registrationItems || [];\n            const updatedItems = currentItems.filter((stateItem)=>{\n                return !(stateItem.session_id === newRow.getAttribute(\"data-session-id\") && stateItem.student_id === newRow.getAttribute(\"data-student-id\"));\n            });\n            (0, _registrationState.saveState)({\n                registrationItems: updatedItems\n            });\n            // If no confirmed rows remain (other than template), show the empty state.\n            const remainingRows = Array.from(tableBodyEl.getElementsByTagName(\"tr\")).filter((r)=>r.id === \"subscription_item\" ? false : true);\n            if (remainingRows.length === 0) {\n                const emptyEl = document.getElementById(\"subscription_empty\");\n                if (emptyEl) emptyEl.style.display = \"table-row\";\n            }\n            document.dispatchEvent(new CustomEvent(\"registrationChanged\"));\n        });\n        tableBodyEl.appendChild(newRow);\n    });\n    console.log(\"[DEBUG] loadRegistrationUI: UI reloaded from state.\");\n}\n\n},{\"../state/registrationState\":\"7PLg3\",\"@parcel/transformer-js/src/esmodule-helpers.js\":\"jiucr\"}],\"6YvTl\":[function(require,module,exports) {\nvar parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\n/**\n * Checks if the API data has any student profiles.\n * If not, displays the Action Required dialog and clicks the trigger element.\n */ parcelHelpers.export(exports, \"showActionRequiredDialogIfNoStudentProfiles\", ()=>showActionRequiredDialogIfNoStudentProfiles);\nvar _core = require(\"@xatom/core\");\nfunction showActionRequiredDialogIfNoStudentProfiles(apiData) {\n    // Check if student_profiles is missing or empty.\n    if (!apiData.student_profiles || apiData.student_profiles.length === 0) {\n        const dialogComp = new (0, _core.WFComponent)(\"#actionRequiredDialog\");\n        const dialogEl = dialogComp.getElement();\n        if (dialogEl instanceof HTMLDialogElement) dialogEl.showModal();\n        else dialogEl.style.display = \"block\";\n        // Also trigger the animation click.\n        const trigger = document.getElementById(\"alertDialogAnimationTrigger\");\n        if (trigger) trigger.click();\n    }\n}\n\n},{\"@xatom/core\":\"65YBq\",\"@parcel/transformer-js/src/esmodule-helpers.js\":\"jiucr\"}]},[], null, \"parcelRequired346\")\n\n//# sourceMappingURL=registration_new.00a6d582.js.map\n","import { startRegistration } from \"../../api/startRegistration\";\nimport { initDynamicRegistrationTable } from \"./components/dynamicRegistrationTable\";\nimport { updateCheckoutLineItems } from \"./components/checkoutLineItems\";\nimport { initializeFinancialAid } from \"./components/financialAid\";\nimport { saveState, loadState } from \"./state/registrationState\";\nimport { updatePendingStudentsAlert } from \"./components/pendingStudentsAlert\";\nimport { submitCheckout } from \"./components/checkoutSubmission\";\nimport { loadRegistrationUI } from \"./components/loadRegistrationUi\";\nimport { WFComponent } from \"@xatom/core\";\nimport { showActionRequiredDialogIfNoStudentProfiles } from \"./components/actionRequiredDialog\";\n\nexport async function newProgramRegistration(): Promise<void> {\n  console.log(\"new registration\");\n\n  try {\n    const response = await startRegistration({});\n    console.log(\"Registration started:\", response);\n\n    // Save the API response in state.\n    saveState({ apiData: response });\n\n    // Always initialize the dynamic registration table (this sets up the add button and template row).\n    initDynamicRegistrationTable(response, {\n      tableBodySelector: \"#subscription_items_list\",\n      emptyStateSelector: \"#subscription_empty\",\n      templateRowSelector: \"#subscription_item\",\n      addButtonSelector: \"#subscription_items_table tfoot #add_subscription_item\",\n      isAddOn: false,\n      fields: {\n        program: { textSelector: \"#item_program_name\", selectSelector: \"#program-select-1\" },\n        workshop: { textSelector: \"#item_workshop_name\", selectSelector: \"#workshop-select-1\" },\n        session: { textSelector: \"#item_session_name\", selectSelector: \"#session-select-1\" },\n        student: { textSelector: \"#item_student_name\", selectSelector: \"#student-select-1\" },\n      }\n    });\n\n    // Rehydrate the UI if there are saved registration items.\n    const state = loadState();\n    if (state.registrationItems && state.registrationItems.length > 0) {\n      loadRegistrationUI();\n    }\n\n    // Set subscription type select value from state.\n    const subscriptionTypeSelect = document.getElementById(\"subscription_type\") as HTMLSelectElement;\n    if (subscriptionTypeSelect && state.subscriptionType) {\n      subscriptionTypeSelect.value = state.subscriptionType;\n    }\n\n    updateCheckoutLineItems(response);\n    updatePendingStudentsAlert(response);\n\n    // Show action required dialog if no student profiles are returned.\n    showActionRequiredDialogIfNoStudentProfiles(response);\n\n    // After initial response is loaded, if the loading animation trigger exists, click it.\n    const successTrigger = document.querySelector(\".success_trigger\") as HTMLElement;\n    if (successTrigger) {\n      successTrigger.click();\n    }\n\n    // Setup an event to update the checkout button's enabled/disabled state.\n    function updateCheckoutButtonState() {\n      const confirmedRows = document.querySelectorAll(\"#subscription_items_list tr.confirmed\");\n      const checkoutBtn = document.getElementById(\"submit_registration_checkout\") as HTMLButtonElement;\n      if (confirmedRows.length === 0) {\n        checkoutBtn.disabled = true;\n      } else {\n        checkoutBtn.disabled = false;\n      }\n    }\n    updateCheckoutButtonState();\n    document.addEventListener(\"registrationChanged\", () => {\n      updateCheckoutLineItems(response);\n      updatePendingStudentsAlert(response);\n      updateCheckoutButtonState();\n    });\n\n    // When subscription type changes, update state and line items.\n    if (subscriptionTypeSelect) {\n      subscriptionTypeSelect.addEventListener(\"change\", () => {\n        saveState({ subscriptionType: subscriptionTypeSelect.value });\n        updateCheckoutLineItems(response);\n      });\n    }\n\n    // Setup checkout button behavior.\n    const checkoutButton = new WFComponent(\"#submit_registration_checkout\");\n    checkoutButton.on(\"click\", async (e: Event) => {\n      e.preventDefault();\n      const btnEl = checkoutButton.getElement() as HTMLButtonElement;\n      if (btnEl.disabled) return;\n      btnEl.disabled = true;\n\n      // Show loading animation.\n      const loadingAnim = document.getElementById(\"submit_registration_checkout_animation\");\n      if (loadingAnim) {\n        loadingAnim.style.display = \"block\";\n      }\n\n      try {\n        await submitCheckout();\n        // If submitCheckout() returns successfully and redirects, this code may not run.\n      } catch (error) {\n        console.error(error);\n      } finally {\n        // Hide loading animation and re-enable the button if not redirected.\n        if (loadingAnim) loadingAnim.style.display = \"none\";\n        btnEl.disabled = false;\n      }\n    });\n\n  } catch (error) {\n    console.error(\"Error starting registration:\", error);\n  }\n  initializeFinancialAid();\n}\n","import { apiClient } from \"./apiConfig\";\n\n// match the shape of profile_pic in your JSON\nexport interface ProfilePic {\n  access: string;\n  path: string;\n  name: string;\n  type: string;\n  size: number;\n  mime: string;\n  meta: {\n    width: number;\n    height: number;\n  };\n  url: string;\n}\n\nexport interface StudentProfile {\n  id: number;\n  full_name: string;\n  Status: string;\n  user_id: number;\n  parent_user_id: number;\n  first_name: string;\n  last_name: string;\n  email: string;\n  phone: string;\n  send_texts: boolean;\n  dob: string | null;\n  gender: string;\n  school: string;\n  grade: string;\n  health: string;\n  emergency_first_name: string;\n  emergency_last_name: string;\n  emergency_phone: string;\n  emergency_email: string;\n  emergency_relationship: string;\n  dismissal_names: string;\n  independent_travel: boolean;\n  family_involved: string;\n  photo_release: boolean;\n  created_at: number;\n  profile_pic: ProfilePic | null;\n}\n\nexport interface SessionProduct {\n  id: number;\n  Product_name: string;\n  Annual_price_id?: string;\n  Monthly_price_id?: string;\n  Semester_price_id?: string;\n  Single_sale_price_id?: string;\n  Displayed_annual_price?: string;\n  Displayed_monthly_price?: string;\n  Displayed_semester_price?: string;\n  Displayed_single_sale_price?: string;\n  Annual_price_amount: number;\n  Monthly_price_amount: number;\n  Semester_price_amount: number;\n  Single_sale_price_amount: number;\n}\n\nexport interface ProgramInfo {\n  id: number;\n  name: string;\n  Add_On_Program: boolean;\n  // reflect the 1st_Semester_Start_Date field in your payload\n  \"1st_Semester_Start_Date\": number;\n}\n\nexport interface Session {\n  id: number;\n  Name: string;\n  Weekday: string;\n  Time_block: string;\n  Start_Date: string | null;\n  End_Date: string | null;\n  Location: number;\n  Tuition_product: number;\n  Deposit_product: number;\n  program: ProgramInfo;\n  tuition_product: SessionProduct;\n  deposit_product: SessionProduct;\n  workshop?: {\n    id: number;\n    Name: string;\n  };\n}\n\nexport interface StartRegistrationResponse {\n  student_profiles: StudentProfile[];\n  sessions: Session[];\n  has_active_subscription: boolean;\n  pending_students?: StudentProfile[];\n}\n\nexport async function startRegistration(\n  payload: any\n): Promise<StartRegistrationResponse> {\n  try {\n    const response = await apiClient\n      .post<StartRegistrationResponse>(\"/registration/start_registration\", payload)\n      .fetch();\n\n    if (response.has_active_subscription) {\n      // navigate away if they already have an active subscription\n      window.location.assign(\"/dashboard/registration/manage-subscription\");\n      // optionally return here if you don’t want calling code to keep running:\n      // return response;\n    }\n\n    return response;\n  } catch (error) {\n    console.error(\"Error starting registration:\", error);\n    throw error;\n  }\n}","import { WFComponent } from \"@xatom/core\";\nimport { StartRegistrationResponse } from \"../../../api/startRegistration\";\nimport { loadState, saveState } from \"../state/registrationState\";\n\nexport interface FieldSelectors {\n  textSelector: string;\n  selectSelector: string;\n}\n\nexport interface DynamicTableConfig {\n  tableBodySelector: string;\n  emptyStateSelector: string;\n  templateRowSelector: string;\n  addButtonSelector: string;\n  isAddOn: boolean;\n  fields: {\n    program: FieldSelectors;\n    workshop: FieldSelectors;\n    session: FieldSelectors;\n    student: FieldSelectors;\n  };\n}\n\nexport function initDynamicRegistrationTable(\n  data: StartRegistrationResponse,\n  config: DynamicTableConfig\n): void {\n  const tableBody = new WFComponent(config.tableBodySelector);\n  const emptyState = new WFComponent(config.emptyStateSelector);\n  const addButton = new WFComponent(config.addButtonSelector);\n\n  const templateRow = document.querySelector(config.templateRowSelector) as HTMLElement;\n  if (!templateRow) {\n    console.error(\"Template row not found with selector:\", config.templateRowSelector);\n    return;\n  }\n  // Ensure the template row is always hidden.\n  templateRow.style.display = \"none\";\n\n  addButton.on(\"click\", () => {\n    emptyState.getElement().style.display = \"none\";\n\n    // Clone the template row.\n    const newRowElement = templateRow.cloneNode(true) as HTMLElement;\n    // Remove the id from the clone so it doesn’t conflict with the template.\n    newRowElement.removeAttribute(\"id\");\n    newRowElement.style.display = \"table-row\";\n\n    const newRow = new WFComponent(newRowElement);\n    resetRow(newRow, config);\n    tableBody.appendChild(newRow);\n\n    populateProgramOptions(newRow, data, config);\n    attachRowEventListeners(newRow, data, config);\n  });\n}\n\nfunction resetRow(row: WFComponent, config: DynamicTableConfig): void {\n  const fieldsToReset = [\n    { field: \"program\", enable: true },\n    { field: \"workshop\", enable: false },\n    { field: \"session\", enable: false },\n    { field: \"student\", enable: false },\n  ];\n\n  fieldsToReset.forEach(item => {\n    const textEl = row.getChildAsComponent(config.fields[item.field].textSelector);\n    const selectEl = row.getChildAsComponent(config.fields[item.field].selectSelector);\n    textEl.getElement().style.display = \"none\";\n    (selectEl.getElement() as HTMLElement).style.display = \"block\";\n    (selectEl.getElement() as HTMLSelectElement).disabled = !item.enable;\n  });\n\n  const confirmButton = row.getChildAsComponent(\".add_registration_button\");\n  (confirmButton.getElement() as HTMLElement).style.display = \"block\";\n\n  row.removeCssClass(\"confirmed\");\n}\n\nfunction populateProgramOptions(\n  row: WFComponent,\n  data: StartRegistrationResponse,\n  config: DynamicTableConfig\n): void {\n  const programSelect = row.getChildAsComponent(config.fields.program.selectSelector);\n  (programSelect.getElement() as HTMLSelectElement).disabled = false;\n\n  const programsMap = new Map<number, string>();\n  data.sessions.forEach(session => {\n    if (session.program.Add_On_Program === config.isAddOn) {\n      programsMap.set(session.program.id, session.program.name);\n    }\n  });\n\n  let optionsHTML = '<option value=\"\">Select Program</option>';\n  programsMap.forEach((name, id) => {\n    optionsHTML += `<option value=\"${id}\">${name}</option>`;\n  });\n  programSelect.setHTML(optionsHTML);\n}\n\nfunction populateWorkshopOptions(\n  row: WFComponent,\n  data: StartRegistrationResponse,\n  selectedProgramId: string,\n  config: DynamicTableConfig\n): void {\n  const workshopSelect = row.getChildAsComponent(config.fields.workshop.selectSelector);\n  const filteredSessions = data.sessions.filter(session =>\n    session.program.id.toString() === selectedProgramId && session.workshop\n  );\n  if (filteredSessions.length > 0) {\n    (workshopSelect.getElement() as HTMLSelectElement).disabled = false;\n    let optionsHTML = '<option value=\"\">Select Workshop</option>';\n    const workshopsMap = new Map<number, string>();\n    filteredSessions.forEach(session => {\n      if (session.workshop) {\n        workshopsMap.set(session.workshop.id, session.workshop.Name);\n      }\n    });\n    workshopsMap.forEach((name, id) => {\n      optionsHTML += `<option value=\"${id}\">${name}</option>`;\n    });\n    workshopSelect.setHTML(optionsHTML);\n    (workshopSelect.getElement() as HTMLElement).style.display = \"block\";\n    const workshopText = row.getChildAsComponent(config.fields.workshop.textSelector);\n    workshopText.getElement().style.display = \"none\";\n  } else {\n    (workshopSelect.getElement() as HTMLSelectElement).disabled = true;\n    (workshopSelect.getElement() as HTMLElement).style.display = \"none\";\n    const workshopText = row.getChildAsComponent(config.fields.workshop.textSelector);\n    workshopText.setText(\" - \");\n    workshopText.getElement().style.display = \"block\";\n    populateSessionOptions(row, data, selectedProgramId, null, config);\n  }\n}\n\nfunction populateSessionOptions(\n  row: WFComponent,\n  data: StartRegistrationResponse,\n  selectedProgramId: string,\n  selectedWorkshopId: string | null,\n  config: DynamicTableConfig\n): void {\n  const sessionSelect = row.getChildAsComponent(config.fields.session.selectSelector);\n  (sessionSelect.getElement() as HTMLSelectElement).disabled = false;\n\n  let filteredSessions = data.sessions.filter(\n    session => session.program.id.toString() === selectedProgramId\n  );\n\n  if (selectedWorkshopId) {\n    filteredSessions = filteredSessions.filter(\n      session => session.workshop && session.workshop.id.toString() === selectedWorkshopId\n    );\n  }\n\n  let optionsHTML = '<option value=\"\">Select Session</option>';\n  filteredSessions.forEach(session => {\n    const label = `${session.Weekday} ${session.Time_block}`;\n    optionsHTML += `<option value=\"${session.id}\">${label}</option>`;\n  });\n\n  sessionSelect.setHTML(optionsHTML);\n}\n\nfunction populateStudentOptions(\n  row: WFComponent,\n  data: StartRegistrationResponse,\n  config: DynamicTableConfig\n): void {\n  const studentSelect = row.getChildAsComponent(config.fields.student.selectSelector);\n  (studentSelect.getElement() as HTMLSelectElement).disabled = false;\n  let optionsHTML = '<option value=\"\">Select Student</option>';\n  const currentSessionId = (row.getElement() as HTMLElement).getAttribute(\"data-session-id\");\n  const tableBodyEl = document.querySelector(config.tableBodySelector);\n  let usedStudentIds: string[] = [];\n  if (tableBodyEl && currentSessionId) {\n    const confirmedRows = Array.from(tableBodyEl.querySelectorAll(\"tr.confirmed\"));\n    confirmedRows.forEach(tr => {\n      if (tr.getAttribute(\"data-session-id\") === currentSessionId) {\n        const studentId = tr.getAttribute(\"data-student-id\");\n        if (studentId) {\n          usedStudentIds.push(studentId);\n        }\n      }\n    });\n  }\n  data.student_profiles.forEach(profile => {\n    if (!usedStudentIds.includes(profile.id.toString())) {\n      optionsHTML += `<option value=\"${profile.id}\">${profile.full_name}</option>`;\n    }\n  });\n  studentSelect.setHTML(optionsHTML);\n}\n\nfunction attachRowEventListeners(\n  row: WFComponent,\n  data: StartRegistrationResponse,\n  config: DynamicTableConfig\n): void {\n  const programSelect = row.getChildAsComponent(config.fields.program.selectSelector);\n  programSelect.on(\"change\", () => {\n    const selectEl = programSelect.getElement() as HTMLSelectElement;\n    const selectedProgramId = selectEl.value;\n    (row.getElement() as HTMLElement).setAttribute(\"data-program-id\", selectedProgramId);\n    populateWorkshopOptions(row, data, selectedProgramId, config);\n    const sessionSelect = row.getChildAsComponent(config.fields.session.selectSelector);\n    (sessionSelect.getElement() as HTMLSelectElement).disabled = false;\n  });\n\n  const workshopSelect = row.getChildAsComponent(config.fields.workshop.selectSelector);\n  workshopSelect.on(\"change\", () => {\n    const selectEl = workshopSelect.getElement() as HTMLSelectElement;\n    const selectedWorkshopId = selectEl.value;\n    (row.getElement() as HTMLElement).setAttribute(\"data-workshop-id\", selectedWorkshopId);\n    const confirmedProgramId = (row.getElement() as HTMLElement).getAttribute(\"data-program-id\") || \"\";\n    populateSessionOptions(row, data, confirmedProgramId, selectedWorkshopId, config);\n  });\n\n  const sessionSelect = row.getChildAsComponent(config.fields.session.selectSelector);\n  sessionSelect.on(\"change\", () => {\n    const selectEl = sessionSelect.getElement() as HTMLSelectElement;\n    const selectedSessionId = selectEl.value;\n    (row.getElement() as HTMLElement).setAttribute(\"data-session-id\", selectedSessionId);\n    const studentSelect = row.getChildAsComponent(config.fields.student.selectSelector);\n    (studentSelect.getElement() as HTMLSelectElement).disabled = false;\n    populateStudentOptions(row, data, config);\n  });\n\n  const studentSelect = row.getChildAsComponent(config.fields.student.selectSelector);\n  studentSelect.on(\"change\", () => {\n    const selectEl = studentSelect.getElement() as HTMLSelectElement;\n    (row.getElement() as HTMLElement).setAttribute(\"data-student-id\", selectEl.value);\n  });\n\n  const confirmButton = row.getChildAsComponent(\".add_registration_button\");\n  confirmButton.on(\"click\", () => {\n    const programSelectEl = row.getChildAsComponent(config.fields.program.selectSelector).getElement() as HTMLSelectElement;\n    const sessionSelectEl = row.getChildAsComponent(config.fields.session.selectSelector).getElement() as HTMLSelectElement;\n    const studentSelectEl = row.getChildAsComponent(config.fields.student.selectSelector).getElement() as HTMLSelectElement;\n  \n    if (!programSelectEl.value || !sessionSelectEl.value || !studentSelectEl.value) {\n      console.warn(\"Please select a Program, Session, and Student.\");\n      return;\n    }\n  \n    const tableBodyEl = document.querySelector(config.tableBodySelector);\n    const currentSessionId = (row.getElement() as HTMLElement).getAttribute(\"data-session-id\");\n    if (tableBodyEl && currentSessionId) {\n      const duplicate = Array.from(tableBodyEl.querySelectorAll(\"tr.confirmed\")).some(tr => {\n        return tr.getAttribute(\"data-session-id\") === currentSessionId &&\n               tr.getAttribute(\"data-student-id\") === studentSelectEl.value;\n      });\n      if (duplicate) {\n        console.warn(\"This student is already registered for the selected session.\");\n        return;\n      }\n    }\n  \n    (row.getElement() as HTMLElement).setAttribute(\"data-student-id\", studentSelectEl.value);\n  \n    const programText = row.getChildAsComponent(config.fields.program.textSelector);\n    programText.setText(programSelectEl.options[programSelectEl.selectedIndex].text);\n  \n    const workshopSelectEl = row.getChildAsComponent(config.fields.workshop.selectSelector).getElement() as HTMLSelectElement;\n    let workshopTextValue = workshopSelectEl.disabled\n      ? \" - \"\n      : workshopSelectEl.options[workshopSelectEl.selectedIndex].text;\n    const workshopText = row.getChildAsComponent(config.fields.workshop.textSelector);\n    workshopText.setText(workshopTextValue);\n  \n    const sessionText = row.getChildAsComponent(config.fields.session.textSelector);\nconst selectedSession = data.sessions.find(\n  session => session.id.toString() === sessionSelectEl.value\n);\n\nif (selectedSession) {\n  sessionText.setText(`${selectedSession.Weekday} ${selectedSession.Time_block}`);\n} else {\n  sessionText.setText(\"Unknown session\");\n}\n  \n    const studentText = row.getChildAsComponent(config.fields.student.textSelector);\n    studentText.setText(studentSelectEl.options[studentSelectEl.selectedIndex].text);\n  \n    const hideSelectParent = (selectSelector: string) => {\n      const comp = row.getChildAsComponent(selectSelector);\n      const parent = comp.getElement().parentElement;\n      if (parent) {\n        (parent as HTMLElement).style.display = \"none\";\n      }\n    };\n  \n    hideSelectParent(config.fields.program.selectSelector);\n    hideSelectParent(config.fields.workshop.selectSelector);\n    hideSelectParent(config.fields.session.selectSelector);\n    hideSelectParent(config.fields.student.selectSelector);\n  \n    (confirmButton.getElement() as HTMLElement).style.display = \"none\";\n    programText.getElement().style.display = \"block\";\n    workshopText.getElement().style.display = \"block\";\n    sessionText.getElement().style.display = \"block\";\n    studentText.getElement().style.display = \"block\";\n  \n    row.addCssClass(\"confirmed\");\n  \n    // Update state: add this row's data to registrationItems.\n    const currentItems = loadState().registrationItems || [];\n    const newItem = {\n      program_id: row.getAttribute(\"data-program-id\"),\n      session_id: row.getAttribute(\"data-session-id\"),\n      student_id: row.getAttribute(\"data-student-id\"),\n      program_name: programSelectEl.options[programSelectEl.selectedIndex].text,\n      workshop_name: workshopText.getElement().textContent || \"\",\n      session_name: sessionText.getElement().textContent || \"\",\n      student_name: studentText.getElement().textContent || \"\"\n    };\n    saveState({ registrationItems: [...currentItems, newItem] });\n  \n    document.dispatchEvent(new CustomEvent(\"registrationChanged\"));\n  });\n  \n  const deleteButton = row.getChildAsComponent(\".remove_registration_button\");\n  deleteButton.on(\"click\", () => {\n    row.remove();\n    const tableBodyEl = document.querySelector(config.tableBodySelector);\n    if (tableBodyEl) {\n      const templateRowId = config.templateRowSelector.startsWith(\"#\")\n        ? config.templateRowSelector.slice(1)\n        : config.templateRowSelector;\n      const emptyStateId = config.emptyStateSelector.startsWith(\"#\")\n        ? config.emptyStateSelector.slice(1)\n        : config.emptyStateSelector;\n      const userRows = Array.from(tableBodyEl.querySelectorAll(\"tr\")).filter(tr => {\n        return tr.id !== templateRowId && tr.id !== emptyStateId;\n      });\n      if (userRows.length === 0) {\n        const emptyRowEl = document.querySelector(config.emptyStateSelector) as HTMLElement;\n        if (emptyRowEl) {\n          emptyRowEl.style.display = \"table-row\";\n        }\n      }\n    }\n    // Remove corresponding item from state.registrationItems.\n    const state = loadState();\n    const updatedItems = (state.registrationItems || []).filter(item => {\n      return !(\n        item.session_id === row.getAttribute(\"data-session-id\") &&\n        item.student_id === row.getAttribute(\"data-student-id\")\n      );\n    });\n    saveState({ registrationItems: updatedItems });\n  \n    document.dispatchEvent(new CustomEvent(\"registrationChanged\"));\n  });\n}\n\nexport { attachRowEventListeners, populateProgramOptions };\n","// registrationState.ts\n\nexport interface RegistrationState {\n  fin_aid_requested: boolean;\n  selected_discount?: string;\n  financialAidData?: {\n    relationship: string;\n    annualIncome: string;\n    monthlyExpense: string;\n    previousParticipant: string;\n  };\n  subscriptionType?: string;\n  apiData?: any; // API response from startRegistration.\n  originalSubscriptionTotal?: number;\n  // NEW: Array of confirmed registration items with IDs and display text.\n  registrationItems?: {\n    program_id: string | null;\n    session_id: string | null;\n    student_id: string | null;\n    program_name?: string;\n    workshop_name?: string;\n    session_name?: string;\n    student_name?: string;\n  }[];\n}\n\nconst STORAGE_KEY = \"registrationState\";\n\nlet state: RegistrationState = loadStateFromStorage() || {\n  fin_aid_requested: false,\n  selected_discount: undefined,\n  financialAidData: undefined,\n  subscriptionType: \"year\",\n  apiData: undefined,\n  originalSubscriptionTotal: 0,\n  registrationItems: []\n};\n\nexport function loadState(): RegistrationState {\n  return state;\n}\n\nexport function saveState(newState: Partial<RegistrationState>): void {\n  state = { ...state, ...newState };\n  saveStateToStorage(state);\n}\n\nexport function resetRegistrationState(): void {\n  state = {\n    fin_aid_requested: false,\n    selected_discount: undefined,\n    financialAidData: undefined,\n    subscriptionType: \"year\",\n    apiData: undefined,\n    originalSubscriptionTotal: 0,\n    registrationItems: []\n  };\n  saveStateToStorage(state);\n}\n\nfunction loadStateFromStorage(): RegistrationState | null {\n  try {\n    const stored = localStorage.getItem(STORAGE_KEY);\n    return stored ? JSON.parse(stored) : null;\n  } catch (error) {\n    console.error(\"Error loading state from storage:\", error);\n    return null;\n  }\n}\n\nfunction saveStateToStorage(state: RegistrationState): void {\n  try {\n    localStorage.setItem(STORAGE_KEY, JSON.stringify(state));\n  } catch (error) {\n    console.error(\"Error saving state to storage:\", error);\n  }\n}\n","import { WFComponent } from \"@xatom/core\";\nimport { StartRegistrationResponse, Session } from \"../../../api/startRegistration\";\nimport { saveState, loadState } from \"../state/registrationState\";\nimport { updateTotalAmount } from \"./updateTotalAmount\";\n\ninterface LineItem {\n  productName: string;\n  quantity: number;\n  unitPrice: number;\n  total: number;\n}\n\n/**\n * Retrieves a session by its ID.\n */\nfunction getSessionById(sessions: Session[], sessionId: string): Session | undefined {\n  const session = sessions.find(s => s.id.toString() === sessionId);\n  console.log(`[DEBUG] getSessionById: Looking for session id ${sessionId}:`, session);\n  return session;\n}\n\n/**\n * Groups line items by productName.\n */\nfunction groupLineItems(items: LineItem[]): LineItem[] {\n  const grouped = new Map<string, LineItem>();\n  items.forEach(item => {\n    const key = item.productName;\n    if (grouped.has(key)) {\n      const existing = grouped.get(key)!;\n      existing.quantity += item.quantity;\n      existing.total += item.total;\n      grouped.set(key, existing);\n    } else {\n      grouped.set(key, { ...item });\n    }\n  });\n  const finalItems = Array.from(grouped.values());\n  console.log(\"[DEBUG] groupLineItems: Final grouped items:\", finalItems);\n  return finalItems;\n}\n\n/**\n * Updates the deposit line items using the deposit product’s single sale price.\n */\nfunction updateDepositLineItems(apiData: StartRegistrationResponse, subscriptionType: string): number {\n  console.log(\"[DEBUG] updateDepositLineItems: Starting deposit update...\");\n  const subscriptionRows = document.querySelectorAll(\"#subscription_items_list tr.confirmed\");\n  console.log(\"[DEBUG] updateDepositLineItems: Found\", subscriptionRows.length, \"confirmed subscription rows.\");\n  const depositItems: LineItem[] = [];\n  subscriptionRows.forEach((row, index) => {\n    const sessionId = row.getAttribute(\"data-session-id\");\n    console.log(`[DEBUG] updateDepositLineItems: Processing row ${index + 1}, session id:`, sessionId);\n    if (!sessionId) return;\n    const session = getSessionById(apiData.sessions, sessionId);\n    if (!session || !session.deposit_product) {\n      console.log(`[DEBUG] updateDepositLineItems: No session or deposit product found for session id ${sessionId}`);\n      return;\n    }\n    // Use the deposit product’s single sale price.\n    const depositPriceStr = session.deposit_product.Displayed_single_sale_price;\n    const depositUnitPrice = parseFloat(depositPriceStr.replace(/[^0-9\\.]/g, \"\")) || 0;\n    console.log(`[DEBUG] updateDepositLineItems: Deposit price string: \"${depositPriceStr}\", parsed unit price: ${depositUnitPrice}`);\n    depositItems.push({\n      productName: session.Name,\n      quantity: 1,\n      unitPrice: depositUnitPrice,\n      total: depositUnitPrice\n    });\n  });\n  console.log(\"[DEBUG] updateDepositLineItems: Deposit Items Array before grouping:\", depositItems);\n  const finalDepositItems = groupLineItems(depositItems);\n  let depositHTML = \"\";\n  finalDepositItems.forEach((item, index) => {\n    depositHTML += `\n      <div class=\"line_item u-hflex-left-center u-text-small\">\n        <div id=\"deposit_item_product\" class=\"text-weight-bold\">${item.productName}</div>\n        <div id=\"deposit_item_unit_amount\" class=\"line_item_unit_amount\">$${item.unitPrice.toFixed(2)}</div>\n        <div>x</div>\n        <div id=\"deposit_item_quantity\" class=\"line_item_quantity\">${item.quantity}</div>\n        <div id=\"deposit_item_total\" class=\"line_item_total text-weight-bold\">$${item.total.toFixed(2)}</div>\n      </div>\n    `;\n    console.log(`[DEBUG] updateDepositLineItems: Built deposit line item ${index + 1}:`, item);\n  });\n  new WFComponent(\"#deposit_line_items_list\").setHTML(depositHTML);\n  const depositTotal = finalDepositItems.reduce((acc, item) => acc + item.total, 0);\n  console.log(\"[DEBUG] updateDepositLineItems: Calculated deposit total:\", depositTotal);\n  new WFComponent(\"#deposit_total\").setText(`$${depositTotal.toFixed(2)}`);\n  \n  // Toggle container display based on whether any deposit items exist.\n  const depositContainer = new WFComponent(\"#deposit_line_items_container\");\n  const displayStyle = finalDepositItems.length > 0 ? \"flex\" : \"none\";\n  depositContainer.getElement().style.display = displayStyle;\n  console.log(\"[DEBUG] updateDepositLineItems: Deposit container display set to:\", displayStyle);\n  \n  return depositTotal;\n}\n\n/**\n * Updates the checkout line items UI.\n * - Builds and displays subscription line items.\n * - Determines if deposit line items should be displayed:\n *     • Always if pending student profiles exist.\n *     • Otherwise, only for monthly subscriptions if the registration is early.\n * - Updates the overall total and early alert accordingly.\n */\nexport function updateCheckoutLineItems(apiData: StartRegistrationResponse): void {\n  console.log(\"[DEBUG] updateCheckoutLineItems: Running updateCheckoutLineItems...\");\n  const subscriptionTypeSelect = document.getElementById(\"subscription_type\") as HTMLSelectElement;\n  if (!subscriptionTypeSelect) {\n    console.warn(\"[DEBUG] updateCheckoutLineItems: Subscription type select not found.\");\n    return;\n  }\n  const subscriptionType = subscriptionTypeSelect.value; // \"year\", \"month\", or \"semester\"\n  console.log(\"[DEBUG] updateCheckoutLineItems: Subscription type selected:\", subscriptionType);\n\n  const suffix = subscriptionType === \"year\" ? \"/year\"\n                : subscriptionType === \"month\" ? \"/month\"\n                : subscriptionType === \"semester\" ? \"/semester\"\n                : \"\";\n\n  // Process subscription items.\n  const subscriptionRows = document.querySelectorAll(\"#subscription_items_list tr.confirmed\");\n  console.log(\"[DEBUG] updateCheckoutLineItems: Found\", subscriptionRows.length, \"confirmed subscription rows.\");\n  const subscriptionItems: LineItem[] = [];\n  subscriptionRows.forEach((row, index) => {\n    const sessionId = row.getAttribute(\"data-session-id\");\n    console.log(`[DEBUG] updateCheckoutLineItems: Processing subscription row ${index + 1}, session id:`, sessionId);\n    if (!sessionId) return;\n    const session = getSessionById(apiData.sessions, sessionId);\n    if (!session) return;\n    let priceStr = \"\";\n    if (subscriptionType === \"year\") {\n      priceStr = session.tuition_product.Displayed_annual_price;\n    } else if (subscriptionType === \"month\") {\n      priceStr = session.tuition_product.Displayed_monthly_price;\n    } else if (subscriptionType === \"semester\") {\n      priceStr = session.tuition_product.Displayed_semester_price;\n    }\n    console.log(`[DEBUG] updateCheckoutLineItems: Price string for session ${sessionId}:`, priceStr);\n    const unitPrice = parseFloat(priceStr.replace(/[^0-9\\.]/g, \"\")) || 0;\n    console.log(`[DEBUG] updateCheckoutLineItems: Parsed unit price for session ${sessionId}:`, unitPrice);\n    subscriptionItems.push({\n      productName: session.Name,\n      quantity: 1,\n      unitPrice: unitPrice,\n      total: unitPrice\n    });\n  });\n  console.log(\"[DEBUG] updateCheckoutLineItems: Subscription Items Array before grouping:\", subscriptionItems);\n  const finalSubscriptionItems = groupLineItems(subscriptionItems);\n\n  let subscriptionHTML = \"\";\n  finalSubscriptionItems.forEach((item, index) => {\n    subscriptionHTML += `\n      <div class=\"line_item u-hflex-left-center u-text-small\">\n        <div id=\"subscription_item_product\" class=\"text-weight-bold line_item_product\">${item.productName}</div>\n        <div id=\"subscription_item_unit_amount\" class=\"line_item_unit_amount\">$${item.unitPrice.toFixed(2)}</div>\n        <div>x</div>\n        <div id=\"subscription_item_quantity\" class=\"line_item_quantity\">${item.quantity}</div>\n        <div id=\"subscription_item_total\" class=\"line_item_total text-weight-bold\">$${item.total.toFixed(2)} ${suffix}</div>\n      </div>\n    `;\n    console.log(`[DEBUG] updateCheckoutLineItems: Built subscription line item ${index + 1}:`, item);\n  });\n  new WFComponent(\"#subscription_line_items_list\").setHTML(subscriptionHTML);\n\n  const subscriptionItemsWrapper = new WFComponent(\"#subscription_line_items_wrap\");\n  const subscriptionEmptyState = new WFComponent(\"#subscription_line_items_empty\");\n  if (finalSubscriptionItems.length > 0) {\n    subscriptionItemsWrapper.getElement().style.display = \"flex\";\n    subscriptionEmptyState.getElement().style.display = \"none\";\n  } else {\n    subscriptionItemsWrapper.getElement().style.display = \"none\";\n    subscriptionEmptyState.getElement().style.display = \"block\";\n  }\n\n  const subscriptionTotal = finalSubscriptionItems.reduce((acc, item) => acc + item.total, 0);\n  console.log(\"[DEBUG] updateCheckoutLineItems: Subscription Total:\", subscriptionTotal);\n  saveState({ originalSubscriptionTotal: subscriptionTotal });\n  console.log(\"[DEBUG] updateCheckoutLineItems: Updated originalSubscriptionTotal:\", subscriptionTotal);\n\n  // Determine early registration for monthly subscriptions.\n  let earlyRegistration = false;\n  let earliestStartDate: number | null = null;\n  if (subscriptionType === \"month\") {\n    subscriptionRows.forEach(row => {\n      const sessionId = row.getAttribute(\"data-session-id\");\n      if (!sessionId) return;\n      const session = getSessionById(apiData.sessions, sessionId);\n      if (!session) return;\n      const startDate = session.program[\"1st_Semester_Start_Date\"];\n      if (startDate && startDate > Date.now()) {\n        earlyRegistration = true;\n        if (earliestStartDate === null || startDate < earliestStartDate) {\n          earliestStartDate = startDate;\n        }\n      }\n    });\n  }\n\n  // Check for pending student profiles.\n  const pendingStudents = apiData.student_profiles\n    ? apiData.student_profiles.filter((profile: any) =>\n        profile.Status && profile.Status.toLowerCase() === \"pending\"\n      )\n    : [];\n\n  // Determine if deposit line items should display:\n  // • Always if pending students exist.\n  // • Otherwise, only if subscriptionType is \"month\" and earlyRegistration is true.\n  let depositShouldDisplay = false;\n  if (pendingStudents.length > 0) {\n    depositShouldDisplay = true;\n  } else if (subscriptionType === \"month\" && earlyRegistration) {\n    depositShouldDisplay = true;\n  }\n\n  let depositTotal = 0;\n  if (depositShouldDisplay) {\n    console.log(\"[DEBUG] updateCheckoutLineItems: Pending students or early registration detected.\");\n    depositTotal = updateDepositLineItems(apiData, subscriptionType);\n    console.log(\"[DEBUG] updateCheckoutLineItems: Deposit total computed:\", depositTotal);\n  } else {\n    // Hide deposit container if not applicable.\n    new WFComponent(\"#deposit_line_items_container\").getElement().style.display = \"none\";\n    console.log(\"[DEBUG] updateCheckoutLineItems: Deposit container hidden.\");\n  }\n\n  // Update overall total amount due.\n  updateTotalAmount(false, subscriptionType, depositTotal);\n\n  // Update early registration alert.\n  updateEarlyAlert(apiData, subscriptionType);\n}\n\n/**\n * If the subscription is monthly, checks confirmed rows for the earliest upcoming start date.\n * If found, displays the early alert with that date; otherwise, hides the alert.\n */\nfunction updateEarlyAlert(apiData: StartRegistrationResponse, subscriptionType: string): void {\n  if (subscriptionType !== \"month\") {\n    new WFComponent(\"#alertBoxEarly\").getElement().style.display = \"none\";\n    return;\n  }\n  const confirmedRows = document.querySelectorAll(\"#subscription_items_list tr.confirmed\");\n  let earliestStartDate: number | null = null;\n  confirmedRows.forEach(row => {\n    const sessionId = row.getAttribute(\"data-session-id\");\n    if (!sessionId) return;\n    const session = getSessionById(apiData.sessions, sessionId);\n    if (!session) return;\n    const startDate = session.program[\"1st_Semester_Start_Date\"];\n    if (startDate && startDate > Date.now()) {\n      if (earliestStartDate === null || startDate < earliestStartDate) {\n        earliestStartDate = startDate;\n      }\n    }\n  });\n  const alertBox = new WFComponent(\"#alertBoxEarly\");\n  const startDateSpan = new WFComponent(\"#subscription_start_date\");\n  if (earliestStartDate) {\n    const formattedDate = new Date(earliestStartDate).toLocaleDateString();\n    startDateSpan.setText(formattedDate);\n    alertBox.getElement().style.display = \"block\";\n    console.log(\"[DEBUG] updateEarlyAlert: Displaying early alert with start date:\", formattedDate);\n  } else {\n    alertBox.getElement().style.display = \"none\";\n    console.log(\"[DEBUG] updateEarlyAlert: No upcoming start dates found, hiding early alert.\");\n  }\n}\n","import { WFComponent } from \"@xatom/core\";\nimport { loadState } from \"../state/registrationState\";\n\nexport function updateTotalAmount(\n  includeDeposit: boolean,\n  subscriptionType: string | undefined,\n  depositTotal: number = 0\n): void {\n  const state = loadState();\n  const originalTotal = state.originalSubscriptionTotal || 0;\n  const discount = state.selected_discount ? parseFloat(state.selected_discount) : 0;\n  const discountAmount = originalTotal * (discount / 100);\n  const discountedSubscriptionTotal = originalTotal - discountAmount;\n\n  // If depositTotal is provided (i.e. pending students exist) then that is the due amount.\n  const overallTotal = depositTotal > 0 ? depositTotal : discountedSubscriptionTotal;\n  const suffix = subscriptionType ? \"/\" + subscriptionType : \"\";\n\n  const discountPill = new WFComponent(\"#subscription_discount_pill\");\n  discountPill.getElement().style.display = discount > 0 ? \"block\" : \"none\";\n\n  const discountApplied = new WFComponent(\"#subscription_discount_applied\");\n  discountApplied.setText(discount > 0 ? `${discount}%` : \"\");\n\n  const originalAmount = new WFComponent(\"#subscription_original_amount\");\n  if (discount > 0) {\n    originalAmount.setText(`was $${originalTotal.toFixed(2)} ${suffix}`);\n    originalAmount.getElement().style.display = \"block\";\n  } else {\n    originalAmount.getElement().style.display = \"none\";\n  }\n\n  const subscriptionTotal = new WFComponent(\"#subscription_total\");\n  subscriptionTotal.setText(`$${discountedSubscriptionTotal.toFixed(2)} ${suffix}`);\n\n  const overallTotalDisplay = new WFComponent(\"#total_amount_due\");\n  overallTotalDisplay.setText(`$${overallTotal.toFixed(2)}`);\n}\n","import { WFComponent } from \"@xatom/core\";\nimport { loadState, saveState } from \"../state/registrationState\";\nimport { updateTotalAmount } from \"./updateTotalAmount\";\nimport { toggleError, setupValidation } from \"../../../utils/formUtils\";\nimport { validateNotEmpty, validateSelectField } from \"../../../utils/validationUtils\";\n\nexport const initializeFinancialAid = (): void => {\n  // Load any saved financial aid data to pre-populate the form.\n  loadFinancialAidData();\n\n  const financialAidCheckbox = new WFComponent(\"#requestFinAid\");\n  const financialAidDialog = new WFComponent(\"#finaidForm\");\n\n  financialAidCheckbox.on(\"change\", () => {\n    const checkboxElement = financialAidCheckbox.getElement() as HTMLInputElement;\n    if (checkboxElement.checked) {\n      (financialAidDialog.getElement() as HTMLDialogElement).showModal();\n    } else {\n      saveState({ fin_aid_requested: false, selected_discount: undefined });\n      document.dispatchEvent(new CustomEvent(\"registrationChanged\"));\n    }\n  });\n\n  financialAidDialog.getElement()?.addEventListener(\"close\", () => {\n    const state = loadState();\n    if (!state.selected_discount) {\n      (financialAidCheckbox.getElement() as HTMLInputElement).checked = false;\n    }\n  });\n\n  setupFinancialAidFormValidation();\n\n  const submitButton = new WFComponent(\"#submitfinancialAid\");\n  submitButton.on(\"click\", () => {\n    if (validateFinancialAidForm()) {\n      saveFinancialAidData();\n      showSuccessState();\n    }\n  });\n\n  attachCloseDialogHandler(financialAidDialog);\n\n  const annualIncomeInput = new WFComponent(\"#annualIncome\");\n  const monthlyExpenseInput = new WFComponent(\"#monthlyExpense\");\n\n  const formatAndSetInputValue = (component: WFComponent): void => {\n    const inputEl = component.getElement() as HTMLInputElement;\n    let value = inputEl.value.replace(/[^\\d.-]/g, \"\");\n    let cursorPos = inputEl.selectionStart || 0;\n    const commaCountBefore = (inputEl.value.slice(0, cursorPos).match(/,/g) || []).length;\n    if (value.includes(\".\")) {\n      const [intPart, decPart] = value.split(\".\");\n      value = `${intPart}.${decPart.slice(0, 2)}`;\n    }\n    const formattedValue = formatNumber(value);\n    inputEl.value = formattedValue;\n    const commaCountAfter = (formattedValue.slice(0, cursorPos).match(/,/g) || []).length;\n    cursorPos += commaCountAfter - commaCountBefore;\n    if (cursorPos > formattedValue.length) cursorPos = formattedValue.length;\n    inputEl.setSelectionRange(cursorPos, cursorPos);\n  };\n\n  const formatNumber = (value: string): string => {\n    const num = parseFloat(value.replace(/,/g, \"\"));\n    if (isNaN(num)) return value;\n    return num.toLocaleString(\"en-US\", { minimumFractionDigits: 0, maximumFractionDigits: 0 });\n  };\n\n  annualIncomeInput.on(\"input\", () => formatAndSetInputValue(annualIncomeInput));\n  monthlyExpenseInput.on(\"input\", () => formatAndSetInputValue(monthlyExpenseInput));\n};\n\n/**\n * Loads saved financial aid data from state and populates the form fields.\n * The checkbox is set to checked only if fin_aid_requested is true.\n */\nfunction loadFinancialAidData(): void {\n  const state = loadState();\n  const financialAidCheckbox = new WFComponent(\"#requestFinAid\");\n  if (state.fin_aid_requested && state.financialAidData) {\n    (financialAidCheckbox.getElement() as HTMLInputElement).checked = true;\n    \n    const relationshipInput = new WFComponent(\"#finaidRelationship\");\n    const annualIncomeInput = new WFComponent(\"#annualIncome\");\n    const monthlyExpenseInput = new WFComponent(\"#monthlyExpense\");\n    const previousParticipantValue = state.financialAidData.previousParticipant;\n    const previousParticipantInputs = document.getElementsByName(\"previous_participant\") as NodeListOf<HTMLInputElement>;\n\n    (relationshipInput.getElement() as HTMLSelectElement).value = state.financialAidData.relationship || \"\";\n    (annualIncomeInput.getElement() as HTMLInputElement).value = state.financialAidData.annualIncome || \"\";\n    (monthlyExpenseInput.getElement() as HTMLInputElement).value = state.financialAidData.monthlyExpense || \"\";\n    \n    previousParticipantInputs.forEach(radio => {\n      radio.checked = (radio.value === previousParticipantValue);\n    });\n    console.log(\"[DEBUG] loadFinancialAidData: Financial aid data loaded from state.\");\n  } else {\n    (financialAidCheckbox.getElement() as HTMLInputElement).checked = false;\n  }\n};\n\n/**\n * Sets up field-level validation for the financial aid form.\n */\nconst setupFinancialAidFormValidation = (): void => {\n  const relationshipInput = new WFComponent(\"#finaidRelationship\");\n  const relationshipError = new WFComponent(\"#finaidRelationshipError\");\n  const previousParticipantInputs = document.getElementsByName(\"previous_participant\");\n  const previousParticipantError = new WFComponent(\"#previousParticipantError\");\n  const annualIncomeInput = new WFComponent(\"#annualIncome\");\n  const annualIncomeError = new WFComponent(\"#annualIncomeError\");\n  const monthlyExpenseInput = new WFComponent(\"#monthlyExpense\");\n  const monthlyExpenseError = new WFComponent(\"#monthlyExpenseError\");\n\n  setupValidation(relationshipInput, relationshipError, () =>\n    validateSelectField(getComponentValue(relationshipInput))\n      ? \"\"\n      : \"Please select a relationship.\"\n  );\n\n  setupValidation(annualIncomeInput, annualIncomeError, () =>\n    validateNotEmpty(getComponentValue(annualIncomeInput))\n      ? \"\"\n      : \"Please enter your annual household income.\"\n  );\n\n  setupValidation(monthlyExpenseInput, monthlyExpenseError, () =>\n    validateNotEmpty(getComponentValue(monthlyExpenseInput))\n      ? \"\"\n      : \"Please enter your monthly expenditure.\"\n  );\n\n  Array.from(previousParticipantInputs).forEach((input) => {\n    setupValidation(new WFComponent(input as HTMLElement), previousParticipantError, () => {\n      const selected = Array.from(previousParticipantInputs).some(radio => (radio as HTMLInputElement).checked);\n      return selected ? \"\" : \"Please select an option.\";\n    });\n  });\n};\n\n/**\n * Validates the financial aid form.\n */\nconst validateFinancialAidForm = (): boolean => {\n  const relationshipInput = new WFComponent(\"#finaidRelationship\");\n  const annualIncomeInput = new WFComponent(\"#annualIncome\");\n  const monthlyExpenseInput = new WFComponent(\"#monthlyExpense\");\n  const previousParticipantInputs = document.getElementsByName(\"previous_participant\");\n\n  const isRelationshipValid = validateSelectField(getComponentValue(relationshipInput));\n  toggleError(new WFComponent(\"#finaidRelationshipError\"), \"Please select a relationship.\", !isRelationshipValid);\n\n  const isAnnualIncomeValid = validateNotEmpty(getComponentValue(annualIncomeInput));\n  toggleError(new WFComponent(\"#annualIncomeError\"), \"Please enter your annual household income.\", !isAnnualIncomeValid);\n\n  const isMonthlyExpenseValid = validateNotEmpty(getComponentValue(monthlyExpenseInput));\n  toggleError(new WFComponent(\"#monthlyExpenseError\"), \"Please enter your monthly expenditure.\", !isMonthlyExpenseValid);\n\n  const isPreviousParticipantValid = Array.from(previousParticipantInputs).some(radio => (radio as HTMLInputElement).checked);\n  toggleError(new WFComponent(\"#previousParticipantError\"), \"Please select an option.\", !isPreviousParticipantValid);\n\n  return isRelationshipValid && isAnnualIncomeValid && isMonthlyExpenseValid && isPreviousParticipantValid;\n};\n\n/**\n * Saves the financial aid data to state.\n */\nconst saveFinancialAidData = (): void => {\n  const relationship = (new WFComponent(\"#finaidRelationship\").getElement() as HTMLSelectElement).value;\n  const annualIncome = (new WFComponent(\"#annualIncome\").getElement() as HTMLInputElement).value;\n  const monthlyExpense = (new WFComponent(\"#monthlyExpense\").getElement() as HTMLInputElement).value;\n  const previousParticipantInput = document.querySelector(\"input[name='previous_participant']:checked\") as HTMLInputElement | null;\n  const previousParticipant = previousParticipantInput ? previousParticipantInput.value : \"\";\n\n  saveState({\n    fin_aid_requested: true,\n    selected_discount: \"\",\n    financialAidData: { relationship, annualIncome, monthlyExpense, previousParticipant },\n  });\n\n  console.log(\"[DEBUG] saveFinancialAidData: Financial aid data saved:\", { relationship, annualIncome, monthlyExpense, previousParticipant });\n};\n\n/**\n * Shows a success state for the financial aid form.\n */\nconst showSuccessState = (): void => {\n  const successMessage = new WFComponent(\".success-message\");\n  const form = new WFComponent(\"#wf-form-Finaid-Form\");\n  form.setStyle({ display: \"none\" });\n  successMessage.setStyle({ display: \"block\" });\n\n  const applyDiscountButton = new WFComponent(\"#applyDiscount\");\n  const backFinAidButton = new WFComponent(\"#backFinAid\");\n  const financialAidDialog = new WFComponent(\"#finaidForm\");\n\n  applyDiscountButton.on(\"click\", () => {\n    const selectedDiscount = document.querySelector(\"input[name='discountValue']:checked\") as HTMLInputElement | null;\n    if (selectedDiscount) {\n      const discountValue = selectedDiscount.value;\n      saveState({ selected_discount: discountValue, fin_aid_requested: true });\n      document.dispatchEvent(new CustomEvent(\"registrationChanged\"));\n      closeFinancialAidDialog(financialAidDialog);\n    } else {\n      console.warn(\"No discount selected.\");\n    }\n  });\n\n  backFinAidButton.on(\"click\", () => {\n    successMessage.setStyle({ display: \"none\" });\n    form.setStyle({ display: \"flex\" });\n  });\n};\n\nconst closeFinancialAidDialog = (dialog: WFComponent): void => {\n  (dialog.getElement() as HTMLDialogElement).close();\n};\n\nconst attachCloseDialogHandler = (dialog: WFComponent): void => {\n  const closeButton = new WFComponent(\"#close-dialog-btn\");\n  closeButton.on(\"click\", () => closeFinancialAidDialog(dialog));\n\n  dialog.getElement()?.addEventListener(\"click\", (event) => {\n    const rect = (dialog.getElement() as HTMLDialogElement).getBoundingClientRect();\n    if (\n      event.clientX < rect.left ||\n      event.clientX > rect.right ||\n      event.clientY < rect.top ||\n      event.clientY > rect.bottom\n    ) {\n      closeFinancialAidDialog(dialog);\n    }\n  });\n};\n\nconst getComponentValue = (component: WFComponent): string => {\n  const element = component.getElement() as HTMLInputElement | HTMLSelectElement;\n  return element.value;\n};\n\nexport { saveFinancialAidData, loadFinancialAidData };\n","import { WFComponent } from \"@xatom/core\";\nimport { WFImage } from \"@xatom/image\";\nimport { apiClient } from \"../api/apiConfig\";\nimport { userAuth } from \"../auth/authConfig\";\n\nexport function toggleError(\n  errorMessageComponent: WFComponent<any>,\n  message: string,\n  show: boolean\n): void {\n  errorMessageComponent.updateTextViaAttrVar({ text: show ? message : \"\" });\n  errorMessageComponent.setStyle({ display: show ? \"flex\" : \"none\" });\n}\n\nexport function setupValidation(\n  inputComponent: WFComponent,\n  errorComponent: WFComponent,\n  validate: () => string,\n  requestErrorComponent?: WFComponent // Optional component to clear on input change\n) {\n  const validateAndUpdate = () => {\n    const errorMessage = validate();\n    toggleError(errorComponent, errorMessage, !!errorMessage);\n    if (requestErrorComponent && errorMessage === \"\") {\n      // Clear request error message when the user is correcting the input\n      toggleError(requestErrorComponent, \"\", false);\n    }\n  };\n\n  // Attach event listeners for real-time validation\n  inputComponent.on(\"input\", validateAndUpdate);\n  inputComponent.on(\"blur\", validateAndUpdate);\n  inputComponent.on(\"change\", validateAndUpdate);\n}\n\nexport function createValidationFunction(\n  inputComponent: WFComponent,\n  validationFn: (input: string) => boolean,\n  errorMessage: string\n): () => string {\n  return () => {\n    const inputElement = inputComponent.getElement() as HTMLInputElement;\n    const isValid = validationFn(inputElement.value);\n    return isValid ? \"\" : errorMessage;\n  };\n}\n\nexport function createCheckboxValidationFunction(\n  checkboxComponent: WFComponent,\n  errorMessage: string\n): () => string {\n  return () => {\n    const checkbox = checkboxComponent.getElement() as HTMLInputElement;\n    return checkbox.checked ? \"\" : errorMessage;\n  };\n}\n\nexport function setupCheckboxValidation(\n  checkboxComponent: WFComponent,\n  checkboxErrorComponent: WFComponent,\n  errorMessage: string\n) {\n  const validate = createCheckboxValidationFunction(\n    checkboxComponent,\n    errorMessage\n  );\n  setupValidation(checkboxComponent, checkboxErrorComponent, validate);\n}\n\nexport function validateSelectedSessions(\n  selectedSessions: { sessionId: string; studentIds: string[] }[],\n  errorMessageComponent: WFComponent<any>,\n  errorMessage: string\n): boolean {\n  const isValid =\n    selectedSessions.length > 0 &&\n    selectedSessions.some((session) => session.studentIds.length > 0);\n\n  if (!isValid) {\n    toggleError(errorMessageComponent, errorMessage, true);\n  } else {\n    toggleError(errorMessageComponent, \"\", false);\n  }\n\n  return isValid;\n}\n\ntype fileUploadResponse = {\n  status: string;\n  url: {\n    profile_pic: {\n      url: string;\n    };\n  };\n};\n\n/**\n * Updates the user's profile picture URL in the authentication system.\n * @param {string} imageUrl - The URL of the uploaded image.\n */\nexport function setProfilePicUrl(imageUrl: string): void {\n  const user = userAuth.getUser();\n  if (user && user.profile) {\n    // Ensure the profile_picture object exists\n    user.profile.profile_pic = user.profile.profile_pic || { url: \"\" };\n\n    // Set the profile picture URL\n    user.profile.profile_pic.url = imageUrl;\n    userAuth.setUser(user);\n    localStorage.setItem(\"auth_user\", JSON.stringify(user));\n  }\n}\n\n/**\n * Handles file upload and displays the uploaded image.\n * @param {WFComponent} fileInput - The WFComponent instance for the file input field.\n * @param {WFComponent} fileInputError - The WFComponent instance for displaying error messages.\n * @param {WFComponent} fileInputSuccess - The WFComponent instance for displaying success messages.\n * @param {string} uploadEndpoint - The endpoint to which the file is sent.\n * @returns {Promise<string>} A promise that resolves with the URL of the uploaded image.\n */\n/**\n * Handles file upload and displays the uploaded image.\n * Only JPEG files less than 2 MB can be uploaded.\n * @param {WFComponent} fileInput - The WFComponent instance for the file input field.\n * @param {WFComponent} fileInputError - The WFComponent instance for displaying error messages.\n * @param {WFComponent} fileInputSuccess - The WFComponent instance for displaying success messages.\n * @param {string} uploadEndpoint - The endpoint to which the file is sent.\n * @returns {Promise<string>} A promise that resolves with the URL of the uploaded image.\n */\nexport function setupFileUpload(\n  fileInput: WFComponent,\n  fileInputError: WFComponent,\n  fileInputSuccess: WFComponent,\n  uploadEndpoint: string\n): Promise<string> {\n  const profilePictureImage = new WFImage(\"#profilePictureImage\");\n  const uploadAnimation = new WFComponent(\"#uploadAnimation\");\n\n  const overlay = new WFComponent(\".drop-zone\");\n  let dragCounter = 0;\n\n  return new Promise<string>((resolve) => {\n    const handleFile = (file: File) => {\n      // Validate file type and size\n      const validTypes = [\"image/jpeg\", \"image/jpg\"];\n      const maxSizeInBytes = 2 * 1024 * 1024; // 2 MB\n\n      if (\n        !validTypes.includes(file.type) &&\n        !/\\.(jpg|jpeg)$/i.test(file.name)\n      ) {\n        const errorMessage = \"Only JPEG images are allowed.\";\n        toggleError(fileInputError, errorMessage, true);\n        // Reset file input value\n        (fileInput.getElement() as HTMLInputElement).value = \"\";\n        return;\n      }\n\n      if (file.size > maxSizeInBytes) {\n        const errorMessage = \"File size must be less than 2 MB.\";\n        toggleError(fileInputError, errorMessage, true);\n        // Reset file input value\n        (fileInput.getElement() as HTMLInputElement).value = \"\";\n        return;\n      }\n\n      // Show upload animation immediately\n      uploadAnimation.setStyle({ display: \"flex\" });\n\n      // Hide error and success messages\n      fileInputError.setStyle({ display: \"none\" });\n      fileInputSuccess.setStyle({ display: \"none\" });\n\n      const reader = new FileReader();\n\n      // Display preview image as soon as the file is loaded into memory\n      reader.onload = (event) => {\n        // Set the preview image for the profile picture\n        const result = event.target?.result as string;\n        profilePictureImage.setImage(result);\n\n        // Hide overlay once the image is set\n        overlay.setStyle({ display: \"none\" });\n      };\n\n      reader.readAsDataURL(file);\n\n      const formData = new FormData();\n      formData.append(\"profile_picture\", file);\n\n      const existingStudent = localStorage.getItem(\"current_student\");\n      if (existingStudent) {\n        const student = JSON.parse(existingStudent);\n        formData.append(\"student_profile_id\", student.id.toString());\n      }\n\n      // Send the file to the server\n      const postRequest = apiClient.post<fileUploadResponse>(uploadEndpoint, {\n        data: formData,\n      });\n\n      postRequest.onData((response) => {\n        if (response.status === \"success\") {\n          const imageUrl = response.url.profile_pic.url;\n\n          // Update the profile picture URL in the user session and local storage\n          setProfilePicUrl(imageUrl);\n\n          // Update the image for other parts of the UI as well\n          profilePictureImage.setImage(imageUrl);\n\n          // Store the URL in local storage\n          localStorage.setItem(\"image_upload\", imageUrl);\n\n          // Show success message and hide upload animation\n          fileInputSuccess.setStyle({ display: \"flex\" });\n          uploadAnimation.setStyle({ display: \"none\" });\n\n          // Resolve with the uploaded image URL\n          resolve(imageUrl);\n        } else {\n          const errorMessage = \"Failed to upload profile picture.\";\n          toggleError(fileInputError, errorMessage, true);\n          uploadAnimation.setStyle({ display: \"none\" });\n          overlay.setStyle({ display: \"none\" });\n          dragCounter = 0;\n          // Reset file input value\n          (fileInput.getElement() as HTMLInputElement).value = \"\";\n        }\n      });\n\n      postRequest.onError((error) => {\n        let errorMessage = \"An error occurred during image upload.\";\n        if (error.response && error.response.data) {\n          errorMessage = error.response.data.message || errorMessage;\n        } else if (error.message) {\n          errorMessage = error.message;\n        }\n\n        // Show error message and hide upload animation\n        toggleError(fileInputError, errorMessage, true);\n        uploadAnimation.setStyle({ display: \"none\" });\n        overlay.setStyle({ display: \"none\" });\n        dragCounter = 0;\n        // Reset file input value\n        (fileInput.getElement() as HTMLInputElement).value = \"\";\n      });\n\n      // Make the API call\n      postRequest.fetch();\n    };\n\n    // Event listener for file input changes\n    fileInput.on(\"change\", () => {\n      const file = (fileInput.getElement() as HTMLInputElement).files?.[0];\n      if (file) {\n        handleFile(file);\n      }\n    });\n\n    // Event listeners for drag-and-drop\n    const dragZoneElement = document.body;\n    dragZoneElement.addEventListener(\"dragenter\", (event) => {\n      event.preventDefault();\n      dragCounter++;\n      if (dragCounter === 1) {\n        overlay.setStyle({ display: \"flex\" });\n      }\n    });\n\n    dragZoneElement.addEventListener(\"dragleave\", () => {\n      dragCounter--;\n      if (dragCounter <= 0) {\n        overlay.setStyle({ display: \"none\" });\n        dragCounter = 0;\n      }\n    });\n\n    dragZoneElement.addEventListener(\"dragover\", (event) => {\n      event.preventDefault();\n    });\n\n    dragZoneElement.addEventListener(\"drop\", (event) => {\n      event.preventDefault();\n\n      const files = event.dataTransfer?.files;\n      if (files?.length) {\n        handleFile(files[0]);\n      }\n\n      overlay.setStyle({ display: \"none\" });\n      dragCounter = 0;\n    });\n  });\n}\n\n// src/utils/formUtils.ts\n\n/**\n * Formats a phone number string to the format (xxx) xxx-xxxx.\n * If the input contains more than 10 digits, it truncates the extra digits.\n * If it contains fewer, it formats as much as possible.\n *\n * @param value - The raw phone number string.\n * @returns The formatted phone number string.\n */\nexport const formatPhoneNumber = (value: string): string => {\n  const cleaned = value.replace(/\\D/g, \"\"); // Remove all non-digit characters\n\n  if (cleaned.length <= 3) {\n    return cleaned;\n  } else if (cleaned.length <= 6) {\n    return `(${cleaned.slice(0, 3)}) ${cleaned.slice(3)}`;\n  } else if (cleaned.length <= 10) {\n    return `(${cleaned.slice(0, 3)}) ${cleaned.slice(3, 6)}-${cleaned.slice(\n      6\n    )}`;\n  } else {\n    // If more than 10 digits, truncate the extra digits\n    return `(${cleaned.slice(0, 3)}) ${cleaned.slice(3, 6)}-${cleaned.slice(\n      6,\n      10\n    )}`;\n  }\n};\n","var t=require(\"@xatom/core\");var e,r,s,i,o,n,u={};e=u,r=\"WFImage\",s=()=>c,Object.defineProperty(e,r,{get:s,set:i,enumerable:!0,configurable:!0});class c extends t.WFComponent{constructor(t){super(t)}getImageConfig(){return this._config}getSrc(){return this.getAttribute(\"src\")}getSizes(){return this.getAttribute(\"sizes\")}getSrcSet(){return this.getAttribute(\"srcset\")}getLoading(){return this.getAttribute(\"loading\")}onLoad(t){return this.on(\"load\",t),()=>{this.off(\"load\",t)}}onLoadError(t){return this.on(\"error\",t),()=>{this.off(\"error\",t)}}setImage(t){if(\"string\"==typeof t)this.setAttribute(\"src\",t),this.removeAttribute(\"srcset\"),this.removeAttribute(\"sizes\");else{if(this.setAttribute(\"src\",t.src),\"object\"==typeof t&&t.srcSet&&t.srcSet.length&&t.sizes&&t.sizes.length){const e=t.srcSet.map((t=>`${t.url} ${t.size}`)).join(\", \");this.setAttribute(\"srcset\",e)}else this.removeAttribute(\"srcset\"),this.removeAttribute(\"sizes\");t.loading&&this.setAttribute(\"loading\",t.loading)}}}o=module.exports,n=u,Object.keys(n).forEach((function(t){\"default\"===t||\"__esModule\"===t||o.hasOwnProperty(t)||Object.defineProperty(o,t,{enumerable:!0,get:function(){return n[t]}})}));","import { WFComponent } from \"@xatom/core\";\nimport { toggleError } from \"./formUtils\";\n\nexport function validateNotEmpty(input: string | undefined): boolean {\n  return input !== undefined && input.trim() !== \"\";\n}\n\nexport function validateEmail(input: string): boolean {\n  const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n  return emailRegex.test(input);\n}\n\n/**\n * Validates that the email is either empty or correctly formatted.\n * @param value The email input value.\n * @returns True if valid, false otherwise.\n */\nexport const validateEmailOptional = (value: string): boolean => {\n  if (value.trim() === \"\") {\n    // Email is optional, so empty string is valid\n    return true;\n  }\n  // Validate the email format if not empty\n  return validateEmail(value);\n};\n\nexport function validatePasswordRequirements(password: string): boolean {\n  const hasLowercase = /[a-z]/.test(password);\n  const hasUppercase = /[A-Z]/.test(password);\n  const hasDigit = /\\d/.test(password);\n  const hasSpecialChar = /[!@#$%^&*(),.?\":{}|<>]/.test(password);\n  const hasValidLength = password.length >= 8;\n  return (\n    hasLowercase && hasUppercase && hasDigit && hasSpecialChar && hasValidLength\n  );\n}\n\nexport function validateCheckbox(checked: boolean): boolean {\n  return checked;\n}\n\nexport function validatePasswordsMatch(\n  originalPassword: string,\n  confirmPassword: string\n): boolean {\n  return originalPassword === confirmPassword;\n}\n\nexport function validateSelectField(input: string | undefined): boolean {\n  return input !== undefined && input !== \"N/A\";\n}\n\nexport function validatePhoneNumber(input: string): boolean {\n  const phoneRegex = /^\\(\\d{3}\\)\\s\\d{3}-\\d{4}$/;\n  return phoneRegex.test(input);\n}\n\nexport const validatePhoneNumberOptional = (value: string): boolean => {\n  if (value.trim() === \"\") {\n    // Phone number is optional, so empty string is valid\n    return true;\n  }\n  // Validate the phone number format if not empty\n  return validatePhoneNumber(value);\n};\n","import { WFComponent } from \"@xatom/core\";\nimport { StartRegistrationResponse } from \"../../../api/startRegistration\";\n\nexport function updatePendingStudentsAlert(apiData: StartRegistrationResponse): void {\n  const alertBox = new WFComponent(\"#alertBox\");\n  const alertPendingStudentList = new WFComponent(\"#alertPendingStudentList\");\n\n  // Check if student_profiles exists in the API response\n  if (apiData.student_profiles && Array.isArray(apiData.student_profiles)) {\n    // Filter for pending profiles (case-insensitive)\n    const pendingStudents = apiData.student_profiles.filter(profile => \n      profile.Status && profile.Status.toLowerCase() === \"pending\"\n    );\n    \n    if (pendingStudents.length > 0) {\n      // Create a comma-separated list of full names\n      const names = pendingStudents.map(profile => profile.full_name).join(\", \");\n      alertPendingStudentList.setText(names);\n      alertBox.getElement().style.display = \"flex\";\n      return;\n    }\n  }\n  \n  // If no pending students, hide the alert box.\n  alertBox.getElement().style.display = \"none\";\n}\n","import { WFComponent } from \"@xatom/core\";\nimport { loadState } from \"../state/registrationState\";\nimport { toggleError } from \"../../../utils/formUtils\";\nimport { apiClient } from \"../../../api/apiConfig\";\n\ninterface CheckoutPayload {\n  registration_items: { program_id: string | null; session_id: string | null; student_id: string | null }[];\n  subscription_line_items: { price: string; quantity: number }[];\n  deposit_line_items: { price: string; quantity: number }[] | null;\n  financial_aid: {\n    requested: boolean;\n    selected_discount?: string;\n    data?: any;\n  };\n  subscription_type: string;\n  early_registration: boolean;\n  earliest_start_date: number | null;\n  subscription_subtotal: number;         // Original subscription total (no discounts).\n  subscription_amount_discount: number;    // Total discount amount for subscription pricing.\n  subscription_total: number;              // Subscription total after discount.\n  total_due: number;\n  students_pending: boolean;\n  base_url: string;\n}\n\ninterface CheckoutResponse {\n  url: string;\n  [key: string]: any;\n}\n\n/**\n * Utility: Given an array of sessions and a sessionId (as string),\n * returns the matching session object.\n */\nfunction getSessionById(sessions: any[], sessionId: string): any {\n  const session = sessions.find(s => s.id.toString() === sessionId);\n  console.log(`[DEBUG] checkoutSubmission - getSessionById: Looking for session id ${sessionId}:`, session);\n  return session;\n}\n\n/**\n * Gathers all registration data and sends it to the checkout endpoint.\n */\nexport async function submitCheckout() {\n  // 1. Load state (which should include apiData, financial aid info, subscription type, etc.)\n  const state = loadState();\n  if (!state.apiData) {\n    console.error(\"No API data found in state.\");\n    displayCheckoutError(\"No API data found in state.\");\n    return;\n  }\n  const apiData = state.apiData;\n\n  // 2. Build registration items from confirmed subscription rows.\n  const confirmedRows = Array.from(document.querySelectorAll(\"#subscription_items_list tr.confirmed\"));\n  const registrationItems = confirmedRows.map(row => ({\n    program_id: row.getAttribute(\"data-program-id\"),\n    session_id: row.getAttribute(\"data-session-id\"),\n    student_id: row.getAttribute(\"data-student-id\")\n  }));\n\n  // 3. Build subscription line items.\n  const subscriptionLineItemsMap = new Map<string, number>();\n  confirmedRows.forEach(row => {\n    const sessionId = row.getAttribute(\"data-session-id\");\n    if (!sessionId) return;\n    const session = getSessionById(apiData.sessions, sessionId);\n    if (!session) return;\n    let priceId = \"\";\n    if (state.subscriptionType === \"year\") {\n      priceId = session.tuition_product.Annual_price_id;\n    } else if (state.subscriptionType === \"month\") {\n      priceId = session.tuition_product.Monthly_price_id;\n    } else if (state.subscriptionType === \"semester\") {\n      priceId = session.tuition_product.Semester_price_id;\n    }\n    if (!priceId) return;\n    const currentQty = subscriptionLineItemsMap.get(priceId) || 0;\n    subscriptionLineItemsMap.set(priceId, currentQty + 1);\n  });\n  const subscriptionLineItems = Array.from(subscriptionLineItemsMap.entries()).map(\n    ([price, quantity]) => ({ price, quantity })\n  );\n  console.log(\"[DEBUG] submitCheckout: Subscription line items\", subscriptionLineItems);\n\n  // 4. Determine early registration for monthly subscriptions.\n  let earlyRegistration = false;\n  let earliestStartDate: number | null = null;\n  if (state.subscriptionType === \"month\") {\n    confirmedRows.forEach(row => {\n      const sessionId = row.getAttribute(\"data-session-id\");\n      if (!sessionId) return;\n      const session = getSessionById(apiData.sessions, sessionId);\n      if (!session) return;\n      const startDate = session.program[\"1st_Semester_Start_Date\"];\n      if (startDate && startDate > Date.now()) {\n        earlyRegistration = true;\n        if (earliestStartDate === null || startDate < earliestStartDate) {\n          earliestStartDate = startDate;\n        }\n      }\n    });\n  }\n  console.log(\"[DEBUG] submitCheckout: Early registration =\", earlyRegistration, \"Earliest start date =\", earliestStartDate);\n\n  // 5. Check for pending student profiles.\n  const pendingStudents = apiData.student_profiles\n    ? apiData.student_profiles.filter((profile: any) =>\n        profile.Status && profile.Status.toLowerCase() === \"pending\"\n      )\n    : [];\n  console.log(\"[DEBUG] submitCheckout: Pending students\", pendingStudents);\n\n  // 6. Build deposit line items if applicable.\n  let depositLineItems: { price: string; quantity: number }[] | null = null;\n  if (pendingStudents.length > 0 || (state.subscriptionType === \"month\" && earlyRegistration)) {\n    const depositLineItemsMap = new Map<string, number>();\n    const savedItems = state.registrationItems || [];\n    savedItems.forEach(item => {\n      const sessionId = item.session_id;\n      if (!sessionId) return;\n      const session = getSessionById(apiData.sessions, sessionId);\n      if (!session || !session.deposit_product) return;\n      const depositPriceId = session.deposit_product.Single_sale_price_id;\n      if (!depositPriceId) return;\n      const currentQty = depositLineItemsMap.get(depositPriceId) || 0;\n      depositLineItemsMap.set(depositPriceId, currentQty + 1);\n    });\n    depositLineItems = depositLineItemsMap.size > 0\n      ? Array.from(depositLineItemsMap.entries()).map(([price, quantity]) => ({ price, quantity }))\n      : null;\n  }\n  console.log(\"[DEBUG] submitCheckout: Deposit line items\", depositLineItems);\n\n  // 7. Get the total amount due from the DOM.\n  const totalDueText = new WFComponent(\"#total_amount_due\").getElement().textContent || \"\";\n  const totalDue = parseFloat(totalDueText.replace(/[^0-9\\.]/g, \"\")) || 0;\n\n  // 8. Compute subscription pricing details.\n  const subscriptionSubtotal = state.originalSubscriptionTotal || 0; // Amount with no discounts.\n  const discountPercent = state.selected_discount ? parseFloat(state.selected_discount) : 0;\n  const subscriptionAmountDiscount = subscriptionSubtotal * (discountPercent / 100);\n  const subscriptionTotal = subscriptionSubtotal - subscriptionAmountDiscount;\n\n  // 9. Pull financial aid info from state.\n  const financialAid = {\n    requested: state.fin_aid_requested,\n    selected_discount: state.selected_discount,\n    data: state.financialAidData\n  };\n\n  // 10. Assemble the payload object with new subscription pricing keys.\n  const checkoutPayload: CheckoutPayload = {\n    registration_items: registrationItems,\n    subscription_line_items: subscriptionLineItems,\n    deposit_line_items: depositLineItems,\n    financial_aid: financialAid,\n    subscription_type: state.subscriptionType,\n    early_registration: earlyRegistration,\n    earliest_start_date: earliestStartDate,\n    subscription_subtotal: subscriptionSubtotal,\n    subscription_amount_discount: subscriptionAmountDiscount,\n    subscription_total: subscriptionTotal,\n    total_due: totalDue,\n    students_pending: pendingStudents.length > 0,\n    base_url: window.location.origin\n  };\n\n  console.log(\"[DEBUG] submitCheckout: Payload\", checkoutPayload);\n\n  // 11. Send the payload using your Axios-based apiClient with .fetch() and a wrapped data property.\n  try {\n    const response = await apiClient\n      .post<CheckoutResponse>(\"/registration/checkout\", { data: checkoutPayload })\n      .fetch();\n    const data = response;\n    console.log(\"[DEBUG] submitCheckout: Response\", data);\n    if (data.url) {\n      hideCheckoutError();\n      window.location.href = data.url;\n    } else {\n      throw new Error(\"No checkout URL returned\");\n    }\n  } catch (error: any) {\n    console.error(\"Error submitting checkout\", error);\n    displayCheckoutError(error.message || \"An error occurred during checkout.\");\n  }\n}\n\n/**\n * Displays an error message in the checkout error element using toggleError.\n * @param message The error message to display.\n */\nfunction displayCheckoutError(message: string): void {\n  const errorComp = new WFComponent(\"#registration_checkout_error\");\n  toggleError(errorComp, message, true);\n}\n\n/**\n * Hides the checkout error element.\n */\nfunction hideCheckoutError(): void {\n  const errorComp = new WFComponent(\"#registration_checkout_error\");\n  toggleError(errorComp, \"\", false);\n}\n","import { WFComponent } from \"@xatom/core\";\nimport { loadState, saveState } from \"../state/registrationState\";\n\nexport function loadRegistrationUI(): void {\n  const state = loadState();\n  if (!state.registrationItems || state.registrationItems.length === 0) {\n    console.log(\"[DEBUG] loadRegistrationUI: No registration items to load.\");\n    return;\n  }\n\n  const tableBodyEl = document.getElementById(\"subscription_items_list\");\n  if (!tableBodyEl) {\n    console.error(\"Table body not found.\");\n    return;\n  }\n\n  // Get the template row.\n  const templateRow = document.getElementById(\"subscription_item\");\n  if (!templateRow) {\n    console.error(\"Template row not found.\");\n    return;\n  }\n  // Ensure the template row remains hidden.\n  templateRow.style.display = \"none\";\n\n  // Remove any confirmed rows that are clones (i.e. that do not have the id \"subscription_item\").\n  const allRows = Array.from(tableBodyEl.getElementsByTagName(\"tr\"));\n  allRows.forEach(row => {\n    if (row.id !== \"subscription_item\") {\n      row.remove();\n    }\n  });\n\n  // Hide the empty state element.\n  const emptyStateEl = document.getElementById(\"subscription_empty\");\n  if (emptyStateEl) {\n    emptyStateEl.style.display = \"none\";\n  }\n\n  // For each saved registration item, clone the template row and append it.\n  state.registrationItems.forEach(item => {\n    const newRow = templateRow.cloneNode(true) as HTMLElement;\n    // Remove id so it's not the template.\n    newRow.removeAttribute(\"id\");\n    newRow.classList.add(\"confirmed\");\n    newRow.style.display = \"table-row\";\n\n    // Set data attributes.\n    newRow.setAttribute(\"data-program-id\", item.program_id || \"\");\n    newRow.setAttribute(\"data-session-id\", item.session_id || \"\");\n    newRow.setAttribute(\"data-student-id\", item.student_id || \"\");\n\n    // Populate display text fields.\n    const programTextEl = newRow.querySelector(\"#item_program_name\");\n    if (programTextEl) {\n      programTextEl.textContent = item.program_name || \"\";\n      (programTextEl as HTMLElement).style.display = \"block\";\n    }\n    const workshopTextEl = newRow.querySelector(\"#item_workshop_name\");\n    if (workshopTextEl) {\n      workshopTextEl.textContent = item.workshop_name || \"\";\n      (workshopTextEl as HTMLElement).style.display = \"block\";\n    }\n    const sessionTextEl = newRow.querySelector(\"#item_session_name\");\n    if (sessionTextEl) {\n      sessionTextEl.textContent = item.session_name || \"\";\n      (sessionTextEl as HTMLElement).style.display = \"block\";\n    }\n    const studentTextEl = newRow.querySelector(\"#item_student_name\");\n    if (studentTextEl) {\n      studentTextEl.textContent = item.student_name || \"\";\n      (studentTextEl as HTMLElement).style.display = \"block\";\n    }\n\n    // Hide select elements and the confirm button.\n    const selects = newRow.querySelectorAll(\"select\");\n    selects.forEach(sel => (sel as HTMLElement).style.display = \"none\");\n    const confirmButton = newRow.querySelector(\".add_registration_button\");\n    if (confirmButton) {\n      (confirmButton as HTMLElement).style.display = \"none\";\n    }\n\n    // Attach delete event listener.\n    const deleteButton = newRow.querySelector(\".remove_registration_button\");\n    if (deleteButton) {\n      (deleteButton as HTMLElement).addEventListener(\"click\", () => {\n        newRow.remove();\n        const currentItems = loadState().registrationItems || [];\n        const updatedItems = currentItems.filter(stateItem => {\n          return !(\n            stateItem.session_id === newRow.getAttribute(\"data-session-id\") &&\n            stateItem.student_id === newRow.getAttribute(\"data-student-id\")\n          );\n        });\n        saveState({ registrationItems: updatedItems });\n        // If no confirmed rows remain (other than template), show the empty state.\n        const remainingRows = Array.from(tableBodyEl.getElementsByTagName(\"tr\")).filter(r => r.id === \"subscription_item\" ? false : true);\n        if (remainingRows.length === 0) {\n          const emptyEl = document.getElementById(\"subscription_empty\");\n          if (emptyEl) {\n            emptyEl.style.display = \"table-row\";\n          }\n        }\n        document.dispatchEvent(new CustomEvent(\"registrationChanged\"));\n      });\n    }\n\n    tableBodyEl.appendChild(newRow);\n  });\n  console.log(\"[DEBUG] loadRegistrationUI: UI reloaded from state.\");\n}\n","import { WFComponent } from \"@xatom/core\";\n\n/**\n * Checks if the API data has any student profiles.\n * If not, displays the Action Required dialog and clicks the trigger element.\n */\nexport function showActionRequiredDialogIfNoStudentProfiles(apiData: any): void {\n  // Check if student_profiles is missing or empty.\n  if (!apiData.student_profiles || apiData.student_profiles.length === 0) {\n    const dialogComp = new WFComponent(\"#actionRequiredDialog\");\n    const dialogEl = dialogComp.getElement();\n    if (dialogEl instanceof HTMLDialogElement) {\n      dialogEl.showModal();\n    } else {\n      dialogEl.style.display = \"block\";\n    }\n    // Also trigger the animation click.\n    const trigger = document.getElementById(\"alertDialogAnimationTrigger\");\n    if (trigger) {\n      trigger.click();\n    }\n  }\n}\n"],"names":["modules","entry","mainEntry","parcelRequireName","globalName","globalObject","globalThis","self","window","global","previousRequire","cache","nodeRequire","module","require","bind","newRequire","name","jumped","currentRequire","err","Error","code","localRequire","resolve","x","id","Module","call","exports","res","isParcelRequire","moduleName","bundle","parent","register","Object","defineProperty","get","i","length","parcelHelpers","defineInteropFlag","export","newProgramRegistration","_startRegistration","_dynamicRegistrationTable","_checkoutLineItems","_financialAid","_registrationState","_pendingStudentsAlert","_checkoutSubmission","_loadRegistrationUi","_core","_actionRequiredDialog","console","log","response","startRegistration","saveState","apiData","initDynamicRegistrationTable","tableBodySelector","emptyStateSelector","templateRowSelector","addButtonSelector","isAddOn","fields","program","textSelector","selectSelector","workshop","session","student","state","loadState","registrationItems","loadRegistrationUI","subscriptionTypeSelect","document","getElementById","subscriptionType","value","updateCheckoutLineItems","updatePendingStudentsAlert","showActionRequiredDialogIfNoStudentProfiles","successTrigger","querySelector","updateCheckoutButtonState","confirmedRows","querySelectorAll","checkoutBtn","disabled","click","addEventListener","checkoutButton","WFComponent","on","e","preventDefault","btnEl","getElement","loadingAnim","style","display","submitCheckout","error","initializeFinancialAid","_apiConfig","payload","apiClient","post","fetch","has_active_subscription","location","assign","attachRowEventListeners","populateProgramOptions","data","config","tableBody","emptyState","addButton","templateRow","newRowElement","cloneNode","removeAttribute","newRow","fieldsToReset","field","enable","forEach","item","textEl","row","getChildAsComponent","selectEl","confirmButton","removeCssClass","appendChild","programSelect","programsMap","Map","sessions","Add_On_Program","set","optionsHTML","setHTML","populateSessionOptions","selectedProgramId","selectedWorkshopId","sessionSelect","filteredSessions","filter","toString","label","Weekday","Time_block","setAttribute","populateWorkshopOptions","workshopSelect","workshopsMap","Name","workshopText","setText","confirmedProgramId","getAttribute","selectedSessionId","studentSelect","populateStudentOptions","currentSessionId","tableBodyEl","usedStudentIds","Array","from","tr","studentId","push","student_profiles","profile","includes","full_name","programSelectEl","sessionSelectEl","studentSelectEl","warn","some","programText","options","selectedIndex","text","workshopSelectEl","workshopTextValue","sessionText","selectedSession","find","studentText","hideSelectParent","comp","parentElement","addCssClass","currentItems","newItem","program_id","session_id","student_id","program_name","workshop_name","textContent","session_name","student_name","dispatchEvent","CustomEvent","deleteButton","remove","templateRowId","startsWith","slice","emptyStateId","userRows","emptyRowEl","updatedItems","resetRegistrationState","STORAGE_KEY","loadStateFromStorage","stored","localStorage","getItem","JSON","parse","fin_aid_requested","selected_discount","undefined","financialAidData","originalSubscriptionTotal","newState","saveStateToStorage","setItem","stringify","_updateTotalAmount","getSessionById","sessionId","s","groupLineItems","items","grouped","key","productName","has","existing","quantity","total","finalItems","values","suffix","subscriptionRows","subscriptionItems","index","priceStr","tuition_product","Displayed_annual_price","Displayed_monthly_price","Displayed_semester_price","unitPrice","parseFloat","replace","finalSubscriptionItems","subscriptionHTML","toFixed","subscriptionItemsWrapper","subscriptionEmptyState","subscriptionTotal","reduce","acc","earlyRegistration","earliestStartDate","startDate","Date","now","pendingStudents","Status","toLowerCase","depositShouldDisplay","depositTotal","updateDepositLineItems","depositItems","deposit_product","depositPriceStr","Displayed_single_sale_price","depositUnitPrice","finalDepositItems","depositHTML","depositContainer","displayStyle","updateTotalAmount","updateEarlyAlert","alertBox","startDateSpan","formattedDate","toLocaleDateString","includeDeposit","originalTotal","discount","discountedSubscriptionTotal","discountPill","discountApplied","originalAmount","overallTotalDisplay","overallTotal","saveFinancialAidData","loadFinancialAidData","_formUtils","_validationUtils","financialAidCheckbox","financialAidDialog","checkboxElement","checked","showModal","setupFinancialAidFormValidation","submitButton","validateFinancialAidForm","showSuccessState","attachCloseDialogHandler","annualIncomeInput","monthlyExpenseInput","formatAndSetInputValue","component","inputEl","cursorPos","selectionStart","commaCountBefore","match","intPart","decPart","split","formattedValue","formatNumber","commaCountAfter","setSelectionRange","num","isNaN","toLocaleString","minimumFractionDigits","maximumFractionDigits","relationshipInput","previousParticipantValue","previousParticipant","previousParticipantInputs","getElementsByName","relationship","annualIncome","monthlyExpense","radio","relationshipError","previousParticipantError","annualIncomeError","monthlyExpenseError","setupValidation","validateSelectField","getComponentValue","validateNotEmpty","input","selected","isRelationshipValid","toggleError","isAnnualIncomeValid","isMonthlyExpenseValid","isPreviousParticipantValid","previousParticipantInput","successMessage","form","setStyle","applyDiscountButton","backFinAidButton","selectedDiscount","discountValue","closeFinancialAidDialog","dialog","close","closeButton","event","rect","getBoundingClientRect","clientX","left","right","clientY","top","bottom","element","createValidationFunction","createCheckboxValidationFunction","setupCheckboxValidation","validateSelectedSessions","setProfilePicUrl","setupFileUpload","formatPhoneNumber","_image","_authConfig","errorMessageComponent","message","show","updateTextViaAttrVar","inputComponent","errorComponent","validate","requestErrorComponent","validateAndUpdate","errorMessage","validationFn","isValid","inputElement","checkboxComponent","checkbox","checkboxErrorComponent","selectedSessions","studentIds","imageUrl","user","userAuth","getUser","profile_pic","url","setUser","fileInput","fileInputError","fileInputSuccess","uploadEndpoint","profilePictureImage","WFImage","uploadAnimation","overlay","dragCounter","Promise","handleFile","file","validTypes","type","test","size","reader","FileReader","onload","result","target","setImage","readAsDataURL","formData","FormData","append","existingStudent","postRequest","onData","status","onError","files","dragZoneElement","body","dataTransfer","cleaned","o","t","u","c","enumerable","configurable","constructor","getImageConfig","_config","getSrc","getSizes","getSrcSet","getLoading","onLoad","off","onLoadError","src","srcSet","sizes","map","join","loading","keys","hasOwnProperty","n","trim","validateEmail","emailRegex","validateEmailOptional","validatePasswordRequirements","validateCheckbox","validatePasswordsMatch","validatePhoneNumber","validatePhoneNumberOptional","password","hasLowercase","hasUppercase","hasDigit","hasSpecialChar","hasValidLength","originalPassword","confirmPassword","phoneRegex","alertPendingStudentList","isArray","names","displayCheckoutError","subscriptionLineItemsMap","priceId","Annual_price_id","Monthly_price_id","Semester_price_id","currentQty","subscriptionLineItems","entries","price","depositLineItems","depositLineItemsMap","savedItems","depositPriceId","Single_sale_price_id","totalDue","totalDueText","subscriptionSubtotal","subscriptionAmountDiscount","checkoutPayload","registration_items","subscription_line_items","deposit_line_items","financial_aid","requested","subscription_type","early_registration","earliest_start_date","subscription_subtotal","subscription_amount_discount","subscription_total","total_due","students_pending","base_url","origin","hideCheckoutError","errorComp","href","allRows","getElementsByTagName","emptyStateEl","classList","add","programTextEl","workshopTextEl","sessionTextEl","studentTextEl","selects","sel","stateItem","remainingRows","r","emptyEl","dialogEl","dialogComp","HTMLDialogElement","trigger"],"version":3,"file":"registration_new.00a6d582.js.map"}