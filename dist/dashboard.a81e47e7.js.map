{"mappings":"C,A,S,C,C,C,C,C,C,C,C,C,E,I,E,A,a,O,W,W,A,a,O,K,K,A,a,O,O,O,A,a,O,O,O,C,E,E,A,Y,O,C,C,E,E,C,C,E,C,E,E,K,E,C,E,E,A,a,O,Q,A,Y,O,O,O,E,O,O,C,I,C,Q,S,E,C,C,C,E,G,C,C,C,E,C,C,G,C,C,C,E,C,C,I,E,A,Y,O,C,C,E,E,C,C,E,C,G,C,G,E,O,E,E,C,G,G,E,O,E,E,C,G,G,G,A,U,O,E,O,E,G,I,E,A,M,uB,E,I,O,E,I,C,mB,C,C,E,O,C,S,C,E,I,E,C,C,E,C,E,C,E,C,O,A,M,E,E,C,E,E,K,C,C,E,I,E,C,C,E,C,I,E,M,C,G,C,C,E,C,E,C,I,C,E,O,C,E,E,E,O,C,I,C,C,O,C,C,E,C,O,C,S,E,C,E,I,E,E,O,C,G,M,A,C,I,E,C,E,E,E,C,C,E,e,C,C,E,E,M,C,S,C,E,I,C,E,C,E,I,C,M,C,E,I,C,O,C,C,C,E,E,O,C,E,E,K,C,E,E,M,C,E,E,Q,C,S,C,C,C,E,C,C,E,C,C,S,C,C,C,E,E,O,C,C,E,C,E,A,E,O,c,C,E,O,C,I,W,O,C,C,E,A,C,G,C,C,E,C,E,I,I,E,E,E,E,M,C,I,E,C,C,E,C,E,C,M,C,S,C,C,C,C,C,E,I,E,E,kD,E,iB,C,GCaa,EAAA,MAAA,CAAA,EAAA,YAAA,IAAA,GAXb,IAAA,EAAA,EAAA,kBACA,EAAA,EAAA,4BACA,EAAA,EAAA,oBACA,EAAA,EAAA,sBACA,EAAA,EAAA,sBACA,EAAA,EAAA,mBACA,EAAA,EAAA,gCACA,EAAA,EAAA,eACA,EAAA,EAAA,eACA,EAAA,EAAA,yBAEO,IAAM,EAAY,UAEvB,AADsB,IAAI,EAAA,WAAU,CAAE,kBACxB,OAAO,CAAC,AAAA,CAAA,EAAA,EAAA,QAAO,AAAP,EAAS,OAAO,GAAG,OAAO,CAAC,UAAU,EAE3D,GAAI,CACF,MAAM,AAAA,CAAA,EAAA,EAAA,4BAA2B,AAA3B,EAA6B,wBACnC,MAAM,AAAA,CAAA,EAAA,EAAA,sCAAqC,AAArC,EACJ,kCAEF,MAAM,AAAA,CAAA,EAAA,EAAA,yBAAyB,AAAzB,EAA0B,cAChC,MAAM,AAAA,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","sources":["<anon>","src/modules/dashboard/dashboard.ts","src/modules/dashboard/listCaregiverNotifications.ts","src/modules/dashboard/listFiles.ts","src/utils/formUtils.ts","src/utils/validationUtils.ts","src/utils/recaptchaUtils.ts"],"sourcesContent":["// modules are defined as an array\n// [ module function, map of requires ]\n//\n// map of requires is short require name -> numeric require\n//\n// anything defined in a previous bundle is accessed via the\n// orig method which is the require for previous bundles\n\n(function (modules, entry, mainEntry, parcelRequireName, globalName) {\n  /* eslint-disable no-undef */\n  var globalObject =\n    typeof globalThis !== 'undefined'\n      ? globalThis\n      : typeof self !== 'undefined'\n      ? self\n      : typeof window !== 'undefined'\n      ? window\n      : typeof global !== 'undefined'\n      ? global\n      : {};\n  /* eslint-enable no-undef */\n\n  // Save the require from previous bundle to this closure if any\n  var previousRequire =\n    typeof globalObject[parcelRequireName] === 'function' &&\n    globalObject[parcelRequireName];\n\n  var cache = previousRequire.cache || {};\n  // Do not use `require` to prevent Webpack from trying to bundle this call\n  var nodeRequire =\n    typeof module !== 'undefined' &&\n    typeof module.require === 'function' &&\n    module.require.bind(module);\n\n  function newRequire(name, jumped) {\n    if (!cache[name]) {\n      if (!modules[name]) {\n        // if we cannot find the module within our internal map or\n        // cache jump to the current global require ie. the last bundle\n        // that was added to the page.\n        var currentRequire =\n          typeof globalObject[parcelRequireName] === 'function' &&\n          globalObject[parcelRequireName];\n        if (!jumped && currentRequire) {\n          return currentRequire(name, true);\n        }\n\n        // If there are other bundles on this page the require from the\n        // previous one is saved to 'previousRequire'. Repeat this as\n        // many times as there are bundles until the module is found or\n        // we exhaust the require chain.\n        if (previousRequire) {\n          return previousRequire(name, true);\n        }\n\n        // Try the node require function if it exists.\n        if (nodeRequire && typeof name === 'string') {\n          return nodeRequire(name);\n        }\n\n        var err = new Error(\"Cannot find module '\" + name + \"'\");\n        err.code = 'MODULE_NOT_FOUND';\n        throw err;\n      }\n\n      localRequire.resolve = resolve;\n      localRequire.cache = {};\n\n      var module = (cache[name] = new newRequire.Module(name));\n\n      modules[name][0].call(\n        module.exports,\n        localRequire,\n        module,\n        module.exports,\n        this\n      );\n    }\n\n    return cache[name].exports;\n\n    function localRequire(x) {\n      var res = localRequire.resolve(x);\n      return res === false ? {} : newRequire(res);\n    }\n\n    function resolve(x) {\n      var id = modules[name][1][x];\n      return id != null ? id : x;\n    }\n  }\n\n  function Module(moduleName) {\n    this.id = moduleName;\n    this.bundle = newRequire;\n    this.exports = {};\n  }\n\n  newRequire.isParcelRequire = true;\n  newRequire.Module = Module;\n  newRequire.modules = modules;\n  newRequire.cache = cache;\n  newRequire.parent = previousRequire;\n  newRequire.register = function (id, exports) {\n    modules[id] = [\n      function (require, module) {\n        module.exports = exports;\n      },\n      {},\n    ];\n  };\n\n  Object.defineProperty(newRequire, 'root', {\n    get: function () {\n      return globalObject[parcelRequireName];\n    },\n  });\n\n  globalObject[parcelRequireName] = newRequire;\n\n  for (var i = 0; i < entry.length; i++) {\n    newRequire(entry[i]);\n  }\n\n  if (mainEntry) {\n    // Expose entry point to Node, AMD or browser globals\n    // Based on https://github.com/ForbesLindesay/umd/blob/master/template.js\n    var mainExports = newRequire(mainEntry);\n\n    // CommonJS\n    if (typeof exports === 'object' && typeof module !== 'undefined') {\n      module.exports = mainExports;\n\n      // RequireJS\n    } else if (typeof define === 'function' && define.amd) {\n      define(function () {\n        return mainExports;\n      });\n\n      // <script>\n    } else if (globalName) {\n      this[globalName] = mainExports;\n    }\n  }\n})({\"dgsaz\":[function(require,module,exports) {\n// src/pages/dashboard.ts\nvar parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"dashboard\", ()=>dashboard);\nvar _listStudents = require(\"./listStudents\");\nvar _listAdditionalStudents = require(\"./listAdditionalStudents\");\nvar _listCaregivers = require(\"./listCaregivers\");\nvar _listRegistration = require(\"./listRegistration\");\nvar _listTicketOrders = require(\"./listTicketOrders\");\nvar _listDonations = require(\"./listDonations\");\nvar _listCaregiverNotifications = require(\"./listCaregiverNotifications\");\nvar _listFiles = require(\"./listFiles\");\nvar _core = require(\"@xatom/core\");\nvar _authConfig = require(\"../../auth/authConfig\");\nconst dashboard = async ()=>{\n    const firstNameText = new (0, _core.WFComponent)(\"#firstNameText\");\n    firstNameText.setText((0, _authConfig.userAuth).getUser().profile.first_name);\n    try {\n        await (0, _listStudents.initializeDynamicStudentList)(\"#listStudentProfiles\");\n        await (0, _listAdditionalStudents.initializeDynamicAdditionalStudentList)(\"#listAdditionalStudentProfiles\");\n        await (0, _listFiles.initializeDynamicFileList)(\"#filesList\"); // Corrected selector here\n        await (0, _listCaregivers.initializeDynamicCaregiverList)(\"#caregiversList\");\n        (0, _listRegistration.initializeDynamicSubscriptionList)(\"#listRegistration\");\n        await (0, _listTicketOrders.initializeDynamicTicketOrderList)(\"#listTickets\");\n        await (0, _listDonations.initializeDynamicDonationList)(\"#listDonations\");\n        (0, _listCaregiverNotifications.initializeCaregiverNotifications)(\"caregiverNotificationList\");\n        triggerSuccessEvent(\".success_trigger\");\n    } catch (error) {\n    // Handle error if needed\n    }\n};\nconst triggerSuccessEvent = (selector)=>{\n    const successTrigger = document.querySelector(selector);\n    if (successTrigger instanceof HTMLElement) successTrigger.click();\n};\n\n},{\"./listStudents\":\"5D5Dr\",\"./listAdditionalStudents\":\"3njZO\",\"./listCaregivers\":\"A7Qq7\",\"./listRegistration\":\"fmeF7\",\"./listTicketOrders\":\"klDdo\",\"./listDonations\":\"gXsgU\",\"./listCaregiverNotifications\":\"eueXt\",\"./listFiles\":\"d21gs\",\"@xatom/core\":\"65YBq\",\"../../auth/authConfig\":\"dHwPR\",\"@parcel/transformer-js/src/esmodule-helpers.js\":\"jiucr\"}],\"eueXt\":[function(require,module,exports) {\n// src/modules/dashboard/listCaregiverNotifications.ts\nvar parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\n/**\n * Initializes the caregiver notifications dynamic list.\n * @param containerId - ID of the caregiver notifications container.\n */ parcelHelpers.export(exports, \"initializeCaregiverNotifications\", ()=>initializeCaregiverNotifications);\nvar _core = require(\"@xatom/core\");\nvar _apiConfig = require(\"../../api/apiConfig\");\nasync function initializeCaregiverNotifications(containerId) {\n    // Select the caregiver notifications container by ID\n    const container = document.getElementById(containerId);\n    if (!container) {\n        console.error(\"Caregiver notifications container not found:\", containerId);\n        return;\n    }\n    // Initially hide the container\n    container.style.display = \"none\";\n    // Initialize a new WFDynamicList instance with ID selector for rows\n    const list = new (0, _core.WFDynamicList)(`#${containerId}`, {\n        rowSelector: \"#caregiverNotificationRow\"\n    });\n    /**\n   * Array to hold the current caregiver invites.\n   */ let caregiverInvites = [];\n    /**\n   * Customizes the rendering of each caregiver notification row.\n   * @param rowData - Data for the current caregiver invite.\n   * @param rowElement - The HTML element representing the notification row.\n   * @returns The modified rowElement.\n   */ list.rowRenderer(({ rowData, rowElement })=>{\n        const notificationCard = new (0, _core.WFComponent)(rowElement);\n        // Populate the caregiver's name\n        const notificationName = notificationCard.getChildAsComponent(\"#caregiverNotificationName\" // ID selector\n        );\n        notificationName.setText(rowData.user_one_name);\n        // Handle the Accept button\n        const acceptButton = notificationCard.getChildAsComponent(\"#acceptCaregiver\"); // ID selector\n        acceptButton.on(\"click\", async ()=>{\n            try {\n                console.log(`Accepting caregiver invite with ID: ${rowData.id}`);\n                // Show loading animation on Accept button\n                const loadingAnimation = notificationCard.getChildAsComponent(\"#requestingAnimationAccept\" // ID selector\n                );\n                if (loadingAnimation) loadingAnimation.setStyle({\n                    display: \"block\"\n                });\n                else console.warn(\"Loading animation element not found: #requestingAnimationAccept\");\n                // Make API call to accept the invite\n                const response = await (0, _apiConfig.apiClient).post(`/caregivers/invites/${rowData.id}/accept`).fetch();\n                console.log(\"API response:\", response);\n                if (response.status === \"success\") {\n                    console.log(\"Caregiver invite accepted successfully.\");\n                    // Instead of updating the list locally, refresh the page\n                    console.log(\"Refreshing the page to reflect changes.\");\n                    location.reload();\n                } else {\n                    console.warn(\"API response unsuccessful:\", response);\n                    alert(response.message || \"Failed to accept caregiver invite.\");\n                }\n            } catch (error) {\n                console.error(\"Error accepting caregiver invite:\", error);\n                alert(\"An error occurred while accepting the invite.\");\n            } finally{\n                // Hide loading animation\n                const loadingAnimation = notificationCard.getChildAsComponent(\"#requestingAnimationAccept\" // ID selector\n                );\n                if (loadingAnimation) loadingAnimation.setStyle({\n                    display: \"none\"\n                });\n                else console.warn(\"Loading animation element not found: #requestingAnimationAccept\");\n            }\n        });\n        // Handle the Decline button\n        const declineButton = notificationCard.getChildAsComponent(\"#declineCaregiver\"); // ID selector\n        declineButton.on(\"click\", async ()=>{\n            try {\n                console.log(`Declining caregiver invite with ID: ${rowData.id}`);\n                // Show loading animation on Decline button\n                const loadingAnimation = notificationCard.getChildAsComponent(\"#requestingAnimationDecline\" // ID selector\n                );\n                if (loadingAnimation) loadingAnimation.setStyle({\n                    display: \"block\"\n                });\n                else console.warn(\"Loading animation element not found: #requestingAnimationDecline\");\n                // Make API call to decline the invite\n                const response = await (0, _apiConfig.apiClient).post(`/caregivers/invites/${rowData.id}/decline`).fetch();\n                console.log(\"API response:\", response);\n                if (response.status === \"success\") {\n                    console.log(\"Caregiver invite declined successfully.\");\n                    // Instead of updating the list locally, refresh the page\n                    console.log(\"Refreshing the page to reflect changes.\");\n                    location.reload();\n                } else {\n                    console.warn(\"API response unsuccessful:\", response);\n                    alert(response.message || \"Failed to decline caregiver invite.\");\n                }\n            } catch (error) {\n                console.error(\"Error declining caregiver invite:\", error);\n                alert(\"An error occurred while declining the invite.\");\n            } finally{\n                // Hide loading animation\n                const loadingAnimation = notificationCard.getChildAsComponent(\"#requestingAnimationDecline\" // ID selector\n                );\n                if (loadingAnimation) loadingAnimation.setStyle({\n                    display: \"none\"\n                });\n                else console.warn(\"Loading animation element not found: #requestingAnimationDecline\");\n            }\n        });\n        return rowElement;\n    });\n    /**\n   * Fetches caregiver invites from the API and populates the dynamic list.\n   */ async function loadCaregiverInvites() {\n        try {\n            console.log(\"Fetching caregiver invites...\");\n            const response = await (0, _apiConfig.apiClient).get(\"/caregivers/invites\").fetch();\n            console.log(\"Fetched caregiver invites:\", response);\n            if (response.caregivers && Array.isArray(response.caregivers)) {\n                // Sort caregivers by creation date (newest first)\n                caregiverInvites = response.caregivers.sort((a, b)=>b.created_at - a.created_at);\n                list.setData(caregiverInvites);\n                // Update the container's display based on the fetched invites\n                updateContainerDisplay();\n            } else {\n                console.error(\"Invalid response structure for caregiver invites:\", response);\n                // Do not show anything if the list is empty\n                caregiverInvites = [];\n                list.setData(caregiverInvites);\n                // Ensure the container is hidden\n                container.style.display = \"none\";\n            }\n        } catch (error) {\n            console.error(\"Error fetching caregiver invites:\", error);\n            // Do not show anything if the list is empty\n            caregiverInvites = [];\n            list.setData(caregiverInvites);\n            // Ensure the container is hidden\n            container.style.display = \"none\";\n        }\n    }\n    /**\n   * Updates the container's display property based on the current list.\n   */ function updateContainerDisplay() {\n        if (caregiverInvites.length > 0) container.style.display = \"flex\";\n        else container.style.display = \"none\";\n    }\n    // Load caregiver invites when initializing\n    await loadCaregiverInvites();\n}\n\n},{\"@xatom/core\":\"65YBq\",\"../../api/apiConfig\":\"dUmIV\",\"@parcel/transformer-js/src/esmodule-helpers.js\":\"jiucr\"}],\"d21gs\":[function(require,module,exports) {\n// src/pages/listFiles.ts\nvar parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\n// Function to fetch files from the API\nparcelHelpers.export(exports, \"fetchFiles\", ()=>fetchFiles);\n// Function to initialize and render the dynamic file list\nparcelHelpers.export(exports, \"initializeDynamicFileList\", ()=>initializeDynamicFileList);\nvar _core = require(\"@xatom/core\");\nvar _apiConfig = require(\"../../api/apiConfig\");\nasync function fetchFiles() {\n    try {\n        const getFiles = (0, _apiConfig.apiClient).get(\"/student_files\");\n        const response = await getFiles.fetch();\n        return response;\n    } catch (error) {\n        console.error(\"Error fetching files:\", error);\n        throw error;\n    }\n}\nasync function initializeDynamicFileList(containerSelector) {\n    // Initialize a new instance of WFDynamicList for Files\n    const list = new (0, _core.WFDynamicList)(containerSelector, {\n        rowSelector: \"#fileCard\",\n        loaderSelector: \"#filesloading\",\n        emptySelector: \"#filesEmpty\"\n    });\n    // Customize the rendering of the loader\n    list.loaderRenderer((loaderElement)=>{\n        loaderElement.setStyle({\n            display: \"flex\"\n        });\n        return loaderElement;\n    });\n    // Customize the rendering of the empty state\n    list.emptyRenderer((emptyElement)=>{\n        emptyElement.setStyle({\n            display: \"flex\"\n        });\n        return emptyElement;\n    });\n    // Customize the rendering of list items (File Cards)\n    list.rowRenderer(({ rowData, rowElement })=>{\n        const fileCard = new (0, _core.WFComponent)(rowElement);\n        // Set the fileCard's href to file_url\n        fileCard.setAttribute(\"href\", rowData.file_url);\n        // Set the fileName to file_name\n        const fileName = fileCard.getChildAsComponent(\"#fileName\");\n        fileName.setText(rowData.file_name);\n        // Show the list item\n        rowElement.setStyle({\n            display: \"block\"\n        });\n        return rowElement;\n    });\n    // Load and display file data\n    try {\n        // Enable the loading state\n        list.changeLoadingStatus(true);\n        const files = await fetchFiles();\n        // Sort files alphabetically by file_name\n        files.sort((a, b)=>a.file_name.localeCompare(b.file_name));\n        // Set the data to be displayed in the dynamic list\n        list.setData(files);\n        // Disable the loading state\n        list.changeLoadingStatus(false);\n    } catch (error) {\n        console.error(\"Error loading files:\", error);\n        // If there's an error, set an empty array to trigger the empty state\n        list.setData([]);\n        // Disable the loading state\n        list.changeLoadingStatus(false);\n    }\n}\n\n},{\"@xatom/core\":\"65YBq\",\"../../api/apiConfig\":\"dUmIV\",\"@parcel/transformer-js/src/esmodule-helpers.js\":\"jiucr\"}],\"gepHz\":[function(require,module,exports) {\nvar parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"toggleError\", ()=>toggleError);\nparcelHelpers.export(exports, \"setupValidation\", ()=>setupValidation);\nparcelHelpers.export(exports, \"createValidationFunction\", ()=>createValidationFunction);\nparcelHelpers.export(exports, \"createCheckboxValidationFunction\", ()=>createCheckboxValidationFunction);\nparcelHelpers.export(exports, \"setupCheckboxValidation\", ()=>setupCheckboxValidation);\nparcelHelpers.export(exports, \"validateSelectedSessions\", ()=>validateSelectedSessions);\n/**\n * Updates the user's profile picture URL in the authentication system.\n * @param {string} imageUrl - The URL of the uploaded image.\n */ parcelHelpers.export(exports, \"setProfilePicUrl\", ()=>setProfilePicUrl);\n/**\n * Handles file upload and displays the uploaded image.\n * @param {WFComponent} fileInput - The WFComponent instance for the file input field.\n * @param {WFComponent} fileInputError - The WFComponent instance for displaying error messages.\n * @param {WFComponent} fileInputSuccess - The WFComponent instance for displaying success messages.\n * @param {string} uploadEndpoint - The endpoint to which the file is sent.\n * @returns {Promise<string>} A promise that resolves with the URL of the uploaded image.\n */ /**\n * Handles file upload and displays the uploaded image.\n * Only JPEG files less than 2 MB can be uploaded.\n * @param {WFComponent} fileInput - The WFComponent instance for the file input field.\n * @param {WFComponent} fileInputError - The WFComponent instance for displaying error messages.\n * @param {WFComponent} fileInputSuccess - The WFComponent instance for displaying success messages.\n * @param {string} uploadEndpoint - The endpoint to which the file is sent.\n * @returns {Promise<string>} A promise that resolves with the URL of the uploaded image.\n */ parcelHelpers.export(exports, \"setupFileUpload\", ()=>setupFileUpload);\nparcelHelpers.export(exports, \"formatPhoneNumber\", ()=>formatPhoneNumber);\nvar _core = require(\"@xatom/core\");\nvar _image = require(\"@xatom/image\");\nvar _apiConfig = require(\"../api/apiConfig\");\nvar _authConfig = require(\"../auth/authConfig\");\nfunction toggleError(errorMessageComponent, message, show) {\n    errorMessageComponent.updateTextViaAttrVar({\n        text: show ? message : \"\"\n    });\n    errorMessageComponent.setStyle({\n        display: show ? \"flex\" : \"none\"\n    });\n}\nfunction setupValidation(inputComponent, errorComponent, validate, requestErrorComponent // Optional component to clear on input change\n) {\n    const validateAndUpdate = ()=>{\n        const errorMessage = validate();\n        toggleError(errorComponent, errorMessage, !!errorMessage);\n        if (requestErrorComponent && errorMessage === \"\") // Clear request error message when the user is correcting the input\n        toggleError(requestErrorComponent, \"\", false);\n    };\n    // Attach event listeners for real-time validation\n    inputComponent.on(\"input\", validateAndUpdate);\n    inputComponent.on(\"blur\", validateAndUpdate);\n    inputComponent.on(\"change\", validateAndUpdate);\n}\nfunction createValidationFunction(inputComponent, validationFn, errorMessage) {\n    return ()=>{\n        const inputElement = inputComponent.getElement();\n        const isValid = validationFn(inputElement.value);\n        return isValid ? \"\" : errorMessage;\n    };\n}\nfunction createCheckboxValidationFunction(checkboxComponent, errorMessage) {\n    return ()=>{\n        const checkbox = checkboxComponent.getElement();\n        return checkbox.checked ? \"\" : errorMessage;\n    };\n}\nfunction setupCheckboxValidation(checkboxComponent, checkboxErrorComponent, errorMessage) {\n    const validate = createCheckboxValidationFunction(checkboxComponent, errorMessage);\n    setupValidation(checkboxComponent, checkboxErrorComponent, validate);\n}\nfunction validateSelectedSessions(selectedSessions, errorMessageComponent, errorMessage) {\n    const isValid = selectedSessions.length > 0 && selectedSessions.some((session)=>session.studentIds.length > 0);\n    if (!isValid) toggleError(errorMessageComponent, errorMessage, true);\n    else toggleError(errorMessageComponent, \"\", false);\n    return isValid;\n}\nfunction setProfilePicUrl(imageUrl) {\n    const user = (0, _authConfig.userAuth).getUser();\n    if (user && user.profile) {\n        // Ensure the profile_picture object exists\n        user.profile.profile_pic = user.profile.profile_pic || {\n            url: \"\"\n        };\n        // Set the profile picture URL\n        user.profile.profile_pic.url = imageUrl;\n        (0, _authConfig.userAuth).setUser(user);\n        localStorage.setItem(\"auth_user\", JSON.stringify(user));\n    }\n}\nfunction setupFileUpload(fileInput, fileInputError, fileInputSuccess, uploadEndpoint) {\n    const profilePictureImage = new (0, _image.WFImage)(\"#profilePictureImage\");\n    const uploadAnimation = new (0, _core.WFComponent)(\"#uploadAnimation\");\n    const overlay = new (0, _core.WFComponent)(\".drop-zone\");\n    let dragCounter = 0;\n    return new Promise((resolve)=>{\n        const handleFile = (file)=>{\n            // Validate file type and size\n            const validTypes = [\n                \"image/jpeg\",\n                \"image/jpg\"\n            ];\n            const maxSizeInBytes = 2097152; // 2 MB\n            if (!validTypes.includes(file.type) && !/\\.(jpg|jpeg)$/i.test(file.name)) {\n                const errorMessage = \"Only JPEG images are allowed.\";\n                toggleError(fileInputError, errorMessage, true);\n                // Reset file input value\n                fileInput.getElement().value = \"\";\n                return;\n            }\n            if (file.size > maxSizeInBytes) {\n                const errorMessage = \"File size must be less than 2 MB.\";\n                toggleError(fileInputError, errorMessage, true);\n                // Reset file input value\n                fileInput.getElement().value = \"\";\n                return;\n            }\n            // Show upload animation immediately\n            uploadAnimation.setStyle({\n                display: \"flex\"\n            });\n            // Hide error and success messages\n            fileInputError.setStyle({\n                display: \"none\"\n            });\n            fileInputSuccess.setStyle({\n                display: \"none\"\n            });\n            const reader = new FileReader();\n            // Display preview image as soon as the file is loaded into memory\n            reader.onload = (event)=>{\n                // Set the preview image for the profile picture\n                const result = event.target?.result;\n                profilePictureImage.setImage(result);\n                // Hide overlay once the image is set\n                overlay.setStyle({\n                    display: \"none\"\n                });\n            };\n            reader.readAsDataURL(file);\n            const formData = new FormData();\n            formData.append(\"profile_picture\", file);\n            const existingStudent = localStorage.getItem(\"current_student\");\n            if (existingStudent) {\n                const student = JSON.parse(existingStudent);\n                formData.append(\"student_profile_id\", student.id.toString());\n            }\n            // Send the file to the server\n            const postRequest = (0, _apiConfig.apiClient).post(uploadEndpoint, {\n                data: formData\n            });\n            postRequest.onData((response)=>{\n                if (response.status === \"success\") {\n                    const imageUrl = response.url.profile_pic.url;\n                    // Update the profile picture URL in the user session and local storage\n                    setProfilePicUrl(imageUrl);\n                    // Update the image for other parts of the UI as well\n                    profilePictureImage.setImage(imageUrl);\n                    // Store the URL in local storage\n                    localStorage.setItem(\"image_upload\", imageUrl);\n                    // Show success message and hide upload animation\n                    fileInputSuccess.setStyle({\n                        display: \"flex\"\n                    });\n                    uploadAnimation.setStyle({\n                        display: \"none\"\n                    });\n                    // Resolve with the uploaded image URL\n                    resolve(imageUrl);\n                } else {\n                    const errorMessage = \"Failed to upload profile picture.\";\n                    toggleError(fileInputError, errorMessage, true);\n                    uploadAnimation.setStyle({\n                        display: \"none\"\n                    });\n                    overlay.setStyle({\n                        display: \"none\"\n                    });\n                    dragCounter = 0;\n                    // Reset file input value\n                    fileInput.getElement().value = \"\";\n                }\n            });\n            postRequest.onError((error)=>{\n                let errorMessage = \"An error occurred during image upload.\";\n                if (error.response && error.response.data) errorMessage = error.response.data.message || errorMessage;\n                else if (error.message) errorMessage = error.message;\n                // Show error message and hide upload animation\n                toggleError(fileInputError, errorMessage, true);\n                uploadAnimation.setStyle({\n                    display: \"none\"\n                });\n                overlay.setStyle({\n                    display: \"none\"\n                });\n                dragCounter = 0;\n                // Reset file input value\n                fileInput.getElement().value = \"\";\n            });\n            // Make the API call\n            postRequest.fetch();\n        };\n        // Event listener for file input changes\n        fileInput.on(\"change\", ()=>{\n            const file = fileInput.getElement().files?.[0];\n            if (file) handleFile(file);\n        });\n        // Event listeners for drag-and-drop\n        const dragZoneElement = document.body;\n        dragZoneElement.addEventListener(\"dragenter\", (event)=>{\n            event.preventDefault();\n            dragCounter++;\n            if (dragCounter === 1) overlay.setStyle({\n                display: \"flex\"\n            });\n        });\n        dragZoneElement.addEventListener(\"dragleave\", ()=>{\n            dragCounter--;\n            if (dragCounter <= 0) {\n                overlay.setStyle({\n                    display: \"none\"\n                });\n                dragCounter = 0;\n            }\n        });\n        dragZoneElement.addEventListener(\"dragover\", (event)=>{\n            event.preventDefault();\n        });\n        dragZoneElement.addEventListener(\"drop\", (event)=>{\n            event.preventDefault();\n            const files = event.dataTransfer?.files;\n            if (files?.length) handleFile(files[0]);\n            overlay.setStyle({\n                display: \"none\"\n            });\n            dragCounter = 0;\n        });\n    });\n}\nconst formatPhoneNumber = (value)=>{\n    const cleaned = value.replace(/\\D/g, \"\"); // Remove all non-digit characters\n    if (cleaned.length <= 3) return cleaned;\n    else if (cleaned.length <= 6) return `(${cleaned.slice(0, 3)}) ${cleaned.slice(3)}`;\n    else if (cleaned.length <= 10) return `(${cleaned.slice(0, 3)}) ${cleaned.slice(3, 6)}-${cleaned.slice(6)}`;\n    else // If more than 10 digits, truncate the extra digits\n    return `(${cleaned.slice(0, 3)}) ${cleaned.slice(3, 6)}-${cleaned.slice(6, 10)}`;\n};\n\n},{\"@xatom/core\":\"65YBq\",\"@xatom/image\":\"bavwf\",\"../api/apiConfig\":\"dUmIV\",\"../auth/authConfig\":\"dHwPR\",\"@parcel/transformer-js/src/esmodule-helpers.js\":\"jiucr\"}],\"gu2z7\":[function(require,module,exports) {\nvar parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"validateNotEmpty\", ()=>validateNotEmpty);\nparcelHelpers.export(exports, \"validateEmail\", ()=>validateEmail);\nparcelHelpers.export(exports, \"validateEmailOptional\", ()=>validateEmailOptional);\nparcelHelpers.export(exports, \"validatePasswordRequirements\", ()=>validatePasswordRequirements);\nparcelHelpers.export(exports, \"validateCheckbox\", ()=>validateCheckbox);\nparcelHelpers.export(exports, \"validatePasswordsMatch\", ()=>validatePasswordsMatch);\nparcelHelpers.export(exports, \"validateSelectField\", ()=>validateSelectField);\nparcelHelpers.export(exports, \"validatePhoneNumber\", ()=>validatePhoneNumber);\nfunction validateNotEmpty(input) {\n    return input !== undefined && input.trim() !== \"\";\n}\nfunction validateEmail(input) {\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    return emailRegex.test(input);\n}\nconst validateEmailOptional = (value)=>{\n    if (value.trim() === \"\") // Email is optional, so empty string is valid\n    return true;\n    // Validate the email format if not empty\n    return validateEmail(value);\n};\nfunction validatePasswordRequirements(password) {\n    const hasLowercase = /[a-z]/.test(password);\n    const hasUppercase = /[A-Z]/.test(password);\n    const hasDigit = /\\d/.test(password);\n    const hasSpecialChar = /[!@#$%^&*(),.?\":{}|<>]/.test(password);\n    const hasValidLength = password.length >= 8;\n    return hasLowercase && hasUppercase && hasDigit && hasSpecialChar && hasValidLength;\n}\nfunction validateCheckbox(checked) {\n    return checked;\n}\nfunction validatePasswordsMatch(originalPassword, confirmPassword) {\n    return originalPassword === confirmPassword;\n}\nfunction validateSelectField(input) {\n    return input !== undefined && input !== \"N/A\";\n}\nfunction validatePhoneNumber(input) {\n    const phoneRegex = /^\\(\\d{3}\\)\\s\\d{3}-\\d{4}$/;\n    return phoneRegex.test(input);\n}\n\n},{\"@parcel/transformer-js/src/esmodule-helpers.js\":\"jiucr\"}],\"Jsdel\":[function(require,module,exports) {\n//../../utils/recaptchaUtils.ts\nvar parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\n/**\n * Asynchronously obtains a reCAPTCHA token for a specified action.\n * @param {string} action - The action name for which the reCAPTCHA token is requested.\n * @returns {Promise<string>} A promise that resolves with the reCAPTCHA token.\n */ parcelHelpers.export(exports, \"getRecaptchaToken\", ()=>getRecaptchaToken);\n/**\n * Validates a reCAPTCHA token with the backend server.\n * @param {string} token - The reCAPTCHA token to validate.\n * @returns {Promise<any>} A promise that resolves with the validation response from the server.\n */ parcelHelpers.export(exports, \"validateRecaptchaToken\", ()=>validateRecaptchaToken);\n/**\n * Handles the full reCAPTCHA verification flow from obtaining the token to validating it.\n * @param {string} action - The action name for which the reCAPTCHA should be processed.\n * @returns {Promise<boolean>} A promise that resolves with true if the reCAPTCHA verification is successful.\n */ parcelHelpers.export(exports, \"handleRecaptcha\", ()=>handleRecaptcha);\nvar _apiConfig = require(\"../api/apiConfig\");\nasync function getRecaptchaToken(action) {\n    return new Promise((resolve, reject)=>{\n        // Ensure grecaptcha is ready and execute the token request.\n        grecaptcha.ready(()=>{\n            grecaptcha.execute(\"6Lekaa8pAAAAAN6qiq0LSP5Akckql4Blg6K5ToUq\", {\n                action: action\n            }).then((token)=>{\n                resolve(token); // Resolve with the obtained token.\n            }, reject); // Reject the promise if there is an error.\n        });\n    });\n}\nasync function validateRecaptchaToken(token) {\n    try {\n        // Send the reCAPTCHA token to the server for validation.\n        const response = await (0, _apiConfig.apiClient).post(\"/recaptcha/validate\", {\n            data: {\n                \"g-recaptcha-response\": token\n            }\n        }).fetch();\n        // Return the server's response directly assuming it's already in JSON format.\n        return response; // Assume response is the direct JSON body.\n    } catch (error) {\n        throw new Error(`ReCAPTCHA validation failed: ${error}`);\n    }\n}\nasync function handleRecaptcha(action) {\n    try {\n        const token = await getRecaptchaToken(action);\n        const validationResponse = await validateRecaptchaToken(token);\n        return validationResponse.status === \"success\";\n    } catch (error) {\n        console.error(\"ReCAPTCHA handling failed:\", error);\n        // If error has a response, log it for more context\n        if (error.response) console.error(\"Error response:\", error.response);\n        return false;\n    }\n}\n\n},{\"../api/apiConfig\":\"dUmIV\",\"@parcel/transformer-js/src/esmodule-helpers.js\":\"jiucr\"}]},[], null, \"parcelRequired346\")\n\n//# sourceMappingURL=dashboard.a81e47e7.js.map\n","// src/pages/dashboard.ts\n\nimport { initializeDynamicStudentList } from \"./listStudents\";\nimport { initializeDynamicAdditionalStudentList } from \"./listAdditionalStudents\";\nimport { initializeDynamicCaregiverList } from \"./listCaregivers\";\nimport { initializeDynamicSubscriptionList } from \"./listRegistration\";\nimport { initializeDynamicTicketOrderList } from \"./listTicketOrders\";\nimport { initializeDynamicDonationList } from \"./listDonations\";\nimport { initializeCaregiverNotifications } from \"./listCaregiverNotifications\";\nimport { initializeDynamicFileList } from \"./listFiles\";\nimport { WFComponent } from \"@xatom/core\";\nimport { userAuth } from \"../../auth/authConfig\";\n\nexport const dashboard = async () => {\n  const firstNameText = new WFComponent(\"#firstNameText\");\n  firstNameText.setText(userAuth.getUser().profile.first_name);\n\n  try {\n    await initializeDynamicStudentList(\"#listStudentProfiles\");\n    await initializeDynamicAdditionalStudentList(\n      \"#listAdditionalStudentProfiles\"\n    );\n    await initializeDynamicFileList(\"#filesList\"); // Corrected selector here\n    await initializeDynamicCaregiverList(\"#caregiversList\");\n    initializeDynamicSubscriptionList(\"#listRegistration\");\n    await initializeDynamicTicketOrderList(\"#listTickets\");\n    await initializeDynamicDonationList(\"#listDonations\");\n    initializeCaregiverNotifications(\"caregiverNotificationList\");\n    triggerSuccessEvent(\".success_trigger\");\n  } catch (error) {\n    // Handle error if needed\n  }\n};\n\nconst triggerSuccessEvent = (selector: string) => {\n  const successTrigger = document.querySelector(selector);\n  if (successTrigger instanceof HTMLElement) {\n    successTrigger.click();\n  }\n};\n","// src/modules/dashboard/listCaregiverNotifications.ts\n\nimport { WFDynamicList, WFComponent } from \"@xatom/core\";\nimport { apiClient } from \"../../api/apiConfig\";\n\n/**\n * Interface representing a single caregiver invite.\n */\ninterface CaregiverInvite {\n  id: number;\n  user_one_id: number;\n  user_two_id: number;\n  initiated_by: number;\n  email_invited: string;\n  status: string;\n  created_at: number;\n  updated_at: number | null;\n  user_one_name: string;\n}\n\n/**\n * Interface representing the API response structure for caregiver invites.\n */\ninterface CaregiverInvitesResponse {\n  caregivers: CaregiverInvite[];\n}\n\n/**\n * Interface representing the API response structure for accept/decline actions.\n */\ninterface ActionResponse {\n  status: string;\n  message?: string; // Made message optional to handle its absence\n}\n\n/**\n * Initializes the caregiver notifications dynamic list.\n * @param containerId - ID of the caregiver notifications container.\n */\nexport async function initializeCaregiverNotifications(containerId: string) {\n  // Select the caregiver notifications container by ID\n  const container = document.getElementById(containerId);\n  if (!container) {\n    console.error(\"Caregiver notifications container not found:\", containerId);\n    return;\n  }\n\n  // Initially hide the container\n  container.style.display = \"none\";\n\n  // Initialize a new WFDynamicList instance with ID selector for rows\n  const list = new WFDynamicList<CaregiverInvite>(`#${containerId}`, {\n    rowSelector: \"#caregiverNotificationRow\", // ID selector\n    // No loaderSelector or emptySelector as per your requirement\n  });\n\n  /**\n   * Array to hold the current caregiver invites.\n   */\n  let caregiverInvites: CaregiverInvite[] = [];\n\n  /**\n   * Customizes the rendering of each caregiver notification row.\n   * @param rowData - Data for the current caregiver invite.\n   * @param rowElement - The HTML element representing the notification row.\n   * @returns The modified rowElement.\n   */\n  list.rowRenderer(({ rowData, rowElement }) => {\n    const notificationCard = new WFComponent(rowElement);\n\n    // Populate the caregiver's name\n    const notificationName = notificationCard.getChildAsComponent(\n      \"#caregiverNotificationName\" // ID selector\n    );\n    notificationName.setText(rowData.user_one_name);\n\n    // Handle the Accept button\n    const acceptButton =\n      notificationCard.getChildAsComponent(\"#acceptCaregiver\"); // ID selector\n    acceptButton.on(\"click\", async () => {\n      try {\n        console.log(`Accepting caregiver invite with ID: ${rowData.id}`);\n\n        // Show loading animation on Accept button\n        const loadingAnimation = notificationCard.getChildAsComponent(\n          \"#requestingAnimationAccept\" // ID selector\n        );\n        if (loadingAnimation) {\n          loadingAnimation.setStyle({ display: \"block\" });\n        } else {\n          console.warn(\n            \"Loading animation element not found: #requestingAnimationAccept\"\n          );\n        }\n\n        // Make API call to accept the invite\n        const response = await apiClient\n          .post<ActionResponse>(`/caregivers/invites/${rowData.id}/accept`)\n          .fetch();\n\n        console.log(\"API response:\", response);\n\n        if (response.status === \"success\") {\n          console.log(\"Caregiver invite accepted successfully.\");\n\n          // Instead of updating the list locally, refresh the page\n          console.log(\"Refreshing the page to reflect changes.\");\n          location.reload();\n        } else {\n          console.warn(\"API response unsuccessful:\", response);\n          alert(response.message || \"Failed to accept caregiver invite.\");\n        }\n      } catch (error) {\n        console.error(\"Error accepting caregiver invite:\", error);\n        alert(\"An error occurred while accepting the invite.\");\n      } finally {\n        // Hide loading animation\n        const loadingAnimation = notificationCard.getChildAsComponent(\n          \"#requestingAnimationAccept\" // ID selector\n        );\n        if (loadingAnimation) {\n          loadingAnimation.setStyle({ display: \"none\" });\n        } else {\n          console.warn(\n            \"Loading animation element not found: #requestingAnimationAccept\"\n          );\n        }\n      }\n    });\n\n    // Handle the Decline button\n    const declineButton =\n      notificationCard.getChildAsComponent(\"#declineCaregiver\"); // ID selector\n    declineButton.on(\"click\", async () => {\n      try {\n        console.log(`Declining caregiver invite with ID: ${rowData.id}`);\n\n        // Show loading animation on Decline button\n        const loadingAnimation = notificationCard.getChildAsComponent(\n          \"#requestingAnimationDecline\" // ID selector\n        );\n        if (loadingAnimation) {\n          loadingAnimation.setStyle({ display: \"block\" });\n        } else {\n          console.warn(\n            \"Loading animation element not found: #requestingAnimationDecline\"\n          );\n        }\n\n        // Make API call to decline the invite\n        const response = await apiClient\n          .post<ActionResponse>(`/caregivers/invites/${rowData.id}/decline`)\n          .fetch();\n\n        console.log(\"API response:\", response);\n\n        if (response.status === \"success\") {\n          console.log(\"Caregiver invite declined successfully.\");\n\n          // Instead of updating the list locally, refresh the page\n          console.log(\"Refreshing the page to reflect changes.\");\n          location.reload();\n        } else {\n          console.warn(\"API response unsuccessful:\", response);\n          alert(response.message || \"Failed to decline caregiver invite.\");\n        }\n      } catch (error) {\n        console.error(\"Error declining caregiver invite:\", error);\n        alert(\"An error occurred while declining the invite.\");\n      } finally {\n        // Hide loading animation\n        const loadingAnimation = notificationCard.getChildAsComponent(\n          \"#requestingAnimationDecline\" // ID selector\n        );\n        if (loadingAnimation) {\n          loadingAnimation.setStyle({ display: \"none\" });\n        } else {\n          console.warn(\n            \"Loading animation element not found: #requestingAnimationDecline\"\n          );\n        }\n      }\n    });\n\n    return rowElement;\n  });\n\n  /**\n   * Fetches caregiver invites from the API and populates the dynamic list.\n   */\n  async function loadCaregiverInvites() {\n    try {\n      console.log(\"Fetching caregiver invites...\");\n      const response = await apiClient\n        .get<CaregiverInvitesResponse>(\"/caregivers/invites\")\n        .fetch();\n\n      console.log(\"Fetched caregiver invites:\", response);\n\n      if (response.caregivers && Array.isArray(response.caregivers)) {\n        // Sort caregivers by creation date (newest first)\n        caregiverInvites = response.caregivers.sort(\n          (a, b) => b.created_at - a.created_at\n        );\n        list.setData(caregiverInvites);\n\n        // Update the container's display based on the fetched invites\n        updateContainerDisplay();\n      } else {\n        console.error(\n          \"Invalid response structure for caregiver invites:\",\n          response\n        );\n        // Do not show anything if the list is empty\n        caregiverInvites = [];\n        list.setData(caregiverInvites);\n\n        // Ensure the container is hidden\n        container.style.display = \"none\";\n      }\n    } catch (error) {\n      console.error(\"Error fetching caregiver invites:\", error);\n      // Do not show anything if the list is empty\n      caregiverInvites = [];\n      list.setData(caregiverInvites);\n\n      // Ensure the container is hidden\n      container.style.display = \"none\";\n    }\n  }\n\n  /**\n   * Updates the container's display property based on the current list.\n   */\n  function updateContainerDisplay() {\n    if (caregiverInvites.length > 0) {\n      container.style.display = \"flex\";\n    } else {\n      container.style.display = \"none\";\n    }\n  }\n\n  // Load caregiver invites when initializing\n  await loadCaregiverInvites();\n}\n","// src/pages/listFiles.ts\n\nimport { WFDynamicList, WFComponent } from \"@xatom/core\";\nimport { apiClient } from \"../../api/apiConfig\";\n\n// Define the FileItem interface based on the API response\ninterface FileItem {\n  id: number;\n  file_name: string;\n  file_url: string;\n  program_id?: string | null;\n  workshop_id?: string | null;\n  session_id?: string | null;\n  user_id: number;\n  created_at: number;\n}\n\n// Function to fetch files from the API\nexport async function fetchFiles(): Promise<FileItem[]> {\n  try {\n    const getFiles = apiClient.get<FileItem[]>(\"/student_files\");\n    const response = await getFiles.fetch();\n    return response;\n  } catch (error) {\n    console.error(\"Error fetching files:\", error);\n    throw error;\n  }\n}\n\n// Function to initialize and render the dynamic file list\nexport async function initializeDynamicFileList(containerSelector: string) {\n  // Initialize a new instance of WFDynamicList for Files\n  const list = new WFDynamicList<FileItem>(containerSelector, {\n    rowSelector: \"#fileCard\", // Using ID selector for template\n    loaderSelector: \"#filesloading\", // Selector for the loader\n    emptySelector: \"#filesEmpty\", // Selector for the empty state\n  });\n\n  // Customize the rendering of the loader\n  list.loaderRenderer((loaderElement) => {\n    loaderElement.setStyle({\n      display: \"flex\",\n    });\n    return loaderElement;\n  });\n\n  // Customize the rendering of the empty state\n  list.emptyRenderer((emptyElement) => {\n    emptyElement.setStyle({\n      display: \"flex\",\n    });\n    return emptyElement;\n  });\n\n  // Customize the rendering of list items (File Cards)\n  list.rowRenderer(({ rowData, rowElement }) => {\n    const fileCard = new WFComponent(rowElement);\n\n    // Set the fileCard's href to file_url\n    fileCard.setAttribute(\"href\", rowData.file_url);\n\n    // Set the fileName to file_name\n    const fileName = fileCard.getChildAsComponent(\"#fileName\");\n    fileName.setText(rowData.file_name);\n\n    // Show the list item\n    rowElement.setStyle({\n      display: \"block\",\n    });\n\n    return rowElement;\n  });\n\n  // Load and display file data\n  try {\n    // Enable the loading state\n    list.changeLoadingStatus(true);\n\n    const files = await fetchFiles();\n\n    // Sort files alphabetically by file_name\n    files.sort((a, b) => a.file_name.localeCompare(b.file_name));\n\n    // Set the data to be displayed in the dynamic list\n    list.setData(files);\n\n    // Disable the loading state\n    list.changeLoadingStatus(false);\n  } catch (error) {\n    console.error(\"Error loading files:\", error);\n\n    // If there's an error, set an empty array to trigger the empty state\n    list.setData([]);\n\n    // Disable the loading state\n    list.changeLoadingStatus(false);\n  }\n}\n","import { WFComponent } from \"@xatom/core\";\nimport { WFImage } from \"@xatom/image\";\nimport { apiClient } from \"../api/apiConfig\";\nimport { userAuth } from \"../auth/authConfig\";\n\nexport function toggleError(\n  errorMessageComponent: WFComponent<any>,\n  message: string,\n  show: boolean\n): void {\n  errorMessageComponent.updateTextViaAttrVar({ text: show ? message : \"\" });\n  errorMessageComponent.setStyle({ display: show ? \"flex\" : \"none\" });\n}\n\nexport function setupValidation(\n  inputComponent: WFComponent,\n  errorComponent: WFComponent,\n  validate: () => string,\n  requestErrorComponent?: WFComponent // Optional component to clear on input change\n) {\n  const validateAndUpdate = () => {\n    const errorMessage = validate();\n    toggleError(errorComponent, errorMessage, !!errorMessage);\n    if (requestErrorComponent && errorMessage === \"\") {\n      // Clear request error message when the user is correcting the input\n      toggleError(requestErrorComponent, \"\", false);\n    }\n  };\n\n  // Attach event listeners for real-time validation\n  inputComponent.on(\"input\", validateAndUpdate);\n  inputComponent.on(\"blur\", validateAndUpdate);\n  inputComponent.on(\"change\", validateAndUpdate);\n}\n\nexport function createValidationFunction(\n  inputComponent: WFComponent,\n  validationFn: (input: string) => boolean,\n  errorMessage: string\n): () => string {\n  return () => {\n    const inputElement = inputComponent.getElement() as HTMLInputElement;\n    const isValid = validationFn(inputElement.value);\n    return isValid ? \"\" : errorMessage;\n  };\n}\n\nexport function createCheckboxValidationFunction(\n  checkboxComponent: WFComponent,\n  errorMessage: string\n): () => string {\n  return () => {\n    const checkbox = checkboxComponent.getElement() as HTMLInputElement;\n    return checkbox.checked ? \"\" : errorMessage;\n  };\n}\n\nexport function setupCheckboxValidation(\n  checkboxComponent: WFComponent,\n  checkboxErrorComponent: WFComponent,\n  errorMessage: string\n) {\n  const validate = createCheckboxValidationFunction(\n    checkboxComponent,\n    errorMessage\n  );\n  setupValidation(checkboxComponent, checkboxErrorComponent, validate);\n}\n\nexport function validateSelectedSessions(\n  selectedSessions: { sessionId: string; studentIds: string[] }[],\n  errorMessageComponent: WFComponent<any>,\n  errorMessage: string\n): boolean {\n  const isValid =\n    selectedSessions.length > 0 &&\n    selectedSessions.some((session) => session.studentIds.length > 0);\n\n  if (!isValid) {\n    toggleError(errorMessageComponent, errorMessage, true);\n  } else {\n    toggleError(errorMessageComponent, \"\", false);\n  }\n\n  return isValid;\n}\n\ntype fileUploadResponse = {\n  status: string;\n  url: {\n    profile_pic: {\n      url: string;\n    };\n  };\n};\n\n/**\n * Updates the user's profile picture URL in the authentication system.\n * @param {string} imageUrl - The URL of the uploaded image.\n */\nexport function setProfilePicUrl(imageUrl: string): void {\n  const user = userAuth.getUser();\n  if (user && user.profile) {\n    // Ensure the profile_picture object exists\n    user.profile.profile_pic = user.profile.profile_pic || { url: \"\" };\n\n    // Set the profile picture URL\n    user.profile.profile_pic.url = imageUrl;\n    userAuth.setUser(user);\n    localStorage.setItem(\"auth_user\", JSON.stringify(user));\n  }\n}\n\n/**\n * Handles file upload and displays the uploaded image.\n * @param {WFComponent} fileInput - The WFComponent instance for the file input field.\n * @param {WFComponent} fileInputError - The WFComponent instance for displaying error messages.\n * @param {WFComponent} fileInputSuccess - The WFComponent instance for displaying success messages.\n * @param {string} uploadEndpoint - The endpoint to which the file is sent.\n * @returns {Promise<string>} A promise that resolves with the URL of the uploaded image.\n */\n/**\n * Handles file upload and displays the uploaded image.\n * Only JPEG files less than 2 MB can be uploaded.\n * @param {WFComponent} fileInput - The WFComponent instance for the file input field.\n * @param {WFComponent} fileInputError - The WFComponent instance for displaying error messages.\n * @param {WFComponent} fileInputSuccess - The WFComponent instance for displaying success messages.\n * @param {string} uploadEndpoint - The endpoint to which the file is sent.\n * @returns {Promise<string>} A promise that resolves with the URL of the uploaded image.\n */\nexport function setupFileUpload(\n  fileInput: WFComponent,\n  fileInputError: WFComponent,\n  fileInputSuccess: WFComponent,\n  uploadEndpoint: string\n): Promise<string> {\n  const profilePictureImage = new WFImage(\"#profilePictureImage\");\n  const uploadAnimation = new WFComponent(\"#uploadAnimation\");\n\n  const overlay = new WFComponent(\".drop-zone\");\n  let dragCounter = 0;\n\n  return new Promise<string>((resolve) => {\n    const handleFile = (file: File) => {\n      // Validate file type and size\n      const validTypes = [\"image/jpeg\", \"image/jpg\"];\n      const maxSizeInBytes = 2 * 1024 * 1024; // 2 MB\n\n      if (\n        !validTypes.includes(file.type) &&\n        !/\\.(jpg|jpeg)$/i.test(file.name)\n      ) {\n        const errorMessage = \"Only JPEG images are allowed.\";\n        toggleError(fileInputError, errorMessage, true);\n        // Reset file input value\n        (fileInput.getElement() as HTMLInputElement).value = \"\";\n        return;\n      }\n\n      if (file.size > maxSizeInBytes) {\n        const errorMessage = \"File size must be less than 2 MB.\";\n        toggleError(fileInputError, errorMessage, true);\n        // Reset file input value\n        (fileInput.getElement() as HTMLInputElement).value = \"\";\n        return;\n      }\n\n      // Show upload animation immediately\n      uploadAnimation.setStyle({ display: \"flex\" });\n\n      // Hide error and success messages\n      fileInputError.setStyle({ display: \"none\" });\n      fileInputSuccess.setStyle({ display: \"none\" });\n\n      const reader = new FileReader();\n\n      // Display preview image as soon as the file is loaded into memory\n      reader.onload = (event) => {\n        // Set the preview image for the profile picture\n        const result = event.target?.result as string;\n        profilePictureImage.setImage(result);\n\n        // Hide overlay once the image is set\n        overlay.setStyle({ display: \"none\" });\n      };\n\n      reader.readAsDataURL(file);\n\n      const formData = new FormData();\n      formData.append(\"profile_picture\", file);\n\n      const existingStudent = localStorage.getItem(\"current_student\");\n      if (existingStudent) {\n        const student = JSON.parse(existingStudent);\n        formData.append(\"student_profile_id\", student.id.toString());\n      }\n\n      // Send the file to the server\n      const postRequest = apiClient.post<fileUploadResponse>(uploadEndpoint, {\n        data: formData,\n      });\n\n      postRequest.onData((response) => {\n        if (response.status === \"success\") {\n          const imageUrl = response.url.profile_pic.url;\n\n          // Update the profile picture URL in the user session and local storage\n          setProfilePicUrl(imageUrl);\n\n          // Update the image for other parts of the UI as well\n          profilePictureImage.setImage(imageUrl);\n\n          // Store the URL in local storage\n          localStorage.setItem(\"image_upload\", imageUrl);\n\n          // Show success message and hide upload animation\n          fileInputSuccess.setStyle({ display: \"flex\" });\n          uploadAnimation.setStyle({ display: \"none\" });\n\n          // Resolve with the uploaded image URL\n          resolve(imageUrl);\n        } else {\n          const errorMessage = \"Failed to upload profile picture.\";\n          toggleError(fileInputError, errorMessage, true);\n          uploadAnimation.setStyle({ display: \"none\" });\n          overlay.setStyle({ display: \"none\" });\n          dragCounter = 0;\n          // Reset file input value\n          (fileInput.getElement() as HTMLInputElement).value = \"\";\n        }\n      });\n\n      postRequest.onError((error) => {\n        let errorMessage = \"An error occurred during image upload.\";\n        if (error.response && error.response.data) {\n          errorMessage = error.response.data.message || errorMessage;\n        } else if (error.message) {\n          errorMessage = error.message;\n        }\n\n        // Show error message and hide upload animation\n        toggleError(fileInputError, errorMessage, true);\n        uploadAnimation.setStyle({ display: \"none\" });\n        overlay.setStyle({ display: \"none\" });\n        dragCounter = 0;\n        // Reset file input value\n        (fileInput.getElement() as HTMLInputElement).value = \"\";\n      });\n\n      // Make the API call\n      postRequest.fetch();\n    };\n\n    // Event listener for file input changes\n    fileInput.on(\"change\", () => {\n      const file = (fileInput.getElement() as HTMLInputElement).files?.[0];\n      if (file) {\n        handleFile(file);\n      }\n    });\n\n    // Event listeners for drag-and-drop\n    const dragZoneElement = document.body;\n    dragZoneElement.addEventListener(\"dragenter\", (event) => {\n      event.preventDefault();\n      dragCounter++;\n      if (dragCounter === 1) {\n        overlay.setStyle({ display: \"flex\" });\n      }\n    });\n\n    dragZoneElement.addEventListener(\"dragleave\", () => {\n      dragCounter--;\n      if (dragCounter <= 0) {\n        overlay.setStyle({ display: \"none\" });\n        dragCounter = 0;\n      }\n    });\n\n    dragZoneElement.addEventListener(\"dragover\", (event) => {\n      event.preventDefault();\n    });\n\n    dragZoneElement.addEventListener(\"drop\", (event) => {\n      event.preventDefault();\n\n      const files = event.dataTransfer?.files;\n      if (files?.length) {\n        handleFile(files[0]);\n      }\n\n      overlay.setStyle({ display: \"none\" });\n      dragCounter = 0;\n    });\n  });\n}\n\n// src/utils/formUtils.ts\n\n/**\n * Formats a phone number string to the format (xxx) xxx-xxxx.\n * If the input contains more than 10 digits, it truncates the extra digits.\n * If it contains fewer, it formats as much as possible.\n *\n * @param value - The raw phone number string.\n * @returns The formatted phone number string.\n */\nexport const formatPhoneNumber = (value: string): string => {\n  const cleaned = value.replace(/\\D/g, \"\"); // Remove all non-digit characters\n\n  if (cleaned.length <= 3) {\n    return cleaned;\n  } else if (cleaned.length <= 6) {\n    return `(${cleaned.slice(0, 3)}) ${cleaned.slice(3)}`;\n  } else if (cleaned.length <= 10) {\n    return `(${cleaned.slice(0, 3)}) ${cleaned.slice(3, 6)}-${cleaned.slice(\n      6\n    )}`;\n  } else {\n    // If more than 10 digits, truncate the extra digits\n    return `(${cleaned.slice(0, 3)}) ${cleaned.slice(3, 6)}-${cleaned.slice(\n      6,\n      10\n    )}`;\n  }\n};\n","import { WFComponent } from \"@xatom/core\";\nimport { toggleError } from \"./formUtils\";\n\nexport function validateNotEmpty(input: string | undefined): boolean {\n  return input !== undefined && input.trim() !== \"\";\n}\n\nexport function validateEmail(input: string): boolean {\n  const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n  return emailRegex.test(input);\n}\n\n/**\n * Validates that the email is either empty or correctly formatted.\n * @param value The email input value.\n * @returns True if valid, false otherwise.\n */\nexport const validateEmailOptional = (value: string): boolean => {\n  if (value.trim() === \"\") {\n    // Email is optional, so empty string is valid\n    return true;\n  }\n  // Validate the email format if not empty\n  return validateEmail(value);\n};\n\nexport function validatePasswordRequirements(password: string): boolean {\n  const hasLowercase = /[a-z]/.test(password);\n  const hasUppercase = /[A-Z]/.test(password);\n  const hasDigit = /\\d/.test(password);\n  const hasSpecialChar = /[!@#$%^&*(),.?\":{}|<>]/.test(password);\n  const hasValidLength = password.length >= 8;\n  return (\n    hasLowercase && hasUppercase && hasDigit && hasSpecialChar && hasValidLength\n  );\n}\n\nexport function validateCheckbox(checked: boolean): boolean {\n  return checked;\n}\n\nexport function validatePasswordsMatch(\n  originalPassword: string,\n  confirmPassword: string\n): boolean {\n  return originalPassword === confirmPassword;\n}\n\nexport function validateSelectField(input: string | undefined): boolean {\n  return input !== undefined && input !== \"N/A\";\n}\n\nexport function validatePhoneNumber(input: string): boolean {\n  const phoneRegex = /^\\(\\d{3}\\)\\s\\d{3}-\\d{4}$/;\n  return phoneRegex.test(input);\n}\n","//../../utils/recaptchaUtils.ts\nimport { apiClient } from \"../api/apiConfig\";\n\n// Declaration for the global reCAPTCHA variable.\ndeclare const grecaptcha: any;\n\n/**\n * Asynchronously obtains a reCAPTCHA token for a specified action.\n * @param {string} action - The action name for which the reCAPTCHA token is requested.\n * @returns {Promise<string>} A promise that resolves with the reCAPTCHA token.\n */\nexport async function getRecaptchaToken(action: string): Promise<string> {\n  return new Promise<string>((resolve, reject) => {\n    // Ensure grecaptcha is ready and execute the token request.\n    grecaptcha.ready(() => {\n      grecaptcha\n        .execute(\"6Lekaa8pAAAAAN6qiq0LSP5Akckql4Blg6K5ToUq\", { action: action })\n        .then((token: string) => {\n          resolve(token); // Resolve with the obtained token.\n        }, reject); // Reject the promise if there is an error.\n    });\n  });\n}\n\n/**\n * Validates a reCAPTCHA token with the backend server.\n * @param {string} token - The reCAPTCHA token to validate.\n * @returns {Promise<any>} A promise that resolves with the validation response from the server.\n */\nexport async function validateRecaptchaToken(token: string): Promise<any> {\n  try {\n    // Send the reCAPTCHA token to the server for validation.\n    const response = await apiClient\n      .post(\"/recaptcha/validate\", {\n        data: { \"g-recaptcha-response\": token },\n      })\n      .fetch();\n\n    // Return the server's response directly assuming it's already in JSON format.\n    return response; // Assume response is the direct JSON body.\n  } catch (error) {\n    throw new Error(`ReCAPTCHA validation failed: ${error}`);\n  }\n}\n\n/**\n * Handles the full reCAPTCHA verification flow from obtaining the token to validating it.\n * @param {string} action - The action name for which the reCAPTCHA should be processed.\n * @returns {Promise<boolean>} A promise that resolves with true if the reCAPTCHA verification is successful.\n */\nexport async function handleRecaptcha(action: string): Promise<boolean> {\n  try {\n    const token = await getRecaptchaToken(action);\n    const validationResponse = await validateRecaptchaToken(token);\n    return validationResponse.status === \"success\";\n  } catch (error) {\n    console.error(\"ReCAPTCHA handling failed:\", error);\n    // If error has a response, log it for more context\n    if (error.response) {\n      console.error(\"Error response:\", error.response);\n    }\n    return false;\n  }\n}\n"],"names":["modules","entry","mainEntry","parcelRequireName","globalName","globalObject","globalThis","self","window","global","previousRequire","cache","nodeRequire","module","require","bind","newRequire","name","jumped","currentRequire","err","Error","code","localRequire","resolve","x","id","Module","call","exports","res","isParcelRequire","moduleName","bundle","parent","register","Object","defineProperty","get","i","length","parcelHelpers","defineInteropFlag","export","dashboard","_listStudents","_listAdditionalStudents","_listCaregivers","_listRegistration","_listTicketOrders","_listDonations","_listCaregiverNotifications","_listFiles","_core","_authConfig","firstNameText","WFComponent","setText","userAuth","getUser","profile","first_name","initializeDynamicStudentList","initializeDynamicAdditionalStudentList","initializeDynamicFileList","initializeDynamicCaregiverList","initializeDynamicSubscriptionList","initializeDynamicTicketOrderList","initializeDynamicDonationList","initializeCaregiverNotifications","triggerSuccessEvent","error","selector","successTrigger","document","querySelector","HTMLElement","click","_apiConfig","containerId","container","getElementById","console","style","display","list","WFDynamicList","rowSelector","caregiverInvites","loadCaregiverInvites","log","response","apiClient","fetch","caregivers","Array","isArray","sort","a","b","created_at","setData","rowRenderer","rowData","rowElement","notificationCard","notificationName","getChildAsComponent","user_one_name","acceptButton","on","loadingAnimation","setStyle","warn","post","status","location","reload","alert","message","declineButton","fetchFiles","getFiles","containerSelector","loaderSelector","emptySelector","loaderRenderer","loaderElement","emptyRenderer","emptyElement","fileCard","setAttribute","file_url","fileName","file_name","changeLoadingStatus","files","localeCompare","toggleError","setupValidation","createValidationFunction","createCheckboxValidationFunction","setupCheckboxValidation","validateSelectedSessions","setProfilePicUrl","setupFileUpload","formatPhoneNumber","_image","errorMessageComponent","show","updateTextViaAttrVar","text","inputComponent","errorComponent","validate","requestErrorComponent","validateAndUpdate","errorMessage","validationFn","isValid","inputElement","getElement","value","checkboxComponent","checkbox","checked","checkboxErrorComponent","selectedSessions","some","session","studentIds","imageUrl","user","profile_pic","url","setUser","localStorage","setItem","JSON","stringify","fileInput","fileInputError","fileInputSuccess","uploadEndpoint","profilePictureImage","WFImage","uploadAnimation","overlay","dragCounter","Promise","handleFile","file","validTypes","includes","type","test","size","reader","FileReader","onload","event","result","target","setImage","readAsDataURL","formData","FormData","append","existingStudent","getItem","student","parse","toString","postRequest","data","onData","onError","dragZoneElement","body","addEventListener","preventDefault","dataTransfer","cleaned","replace","slice","validateNotEmpty","input","undefined","trim","validateEmail","emailRegex","validateEmailOptional","validatePasswordRequirements","validateCheckbox","validatePasswordsMatch","validateSelectField","validatePhoneNumber","password","hasLowercase","hasUppercase","hasDigit","hasSpecialChar","hasValidLength","originalPassword","confirmPassword","phoneRegex","getRecaptchaToken","validateRecaptchaToken","handleRecaptcha","action","reject","grecaptcha","ready","execute","then","token","validationResponse"],"version":3,"file":"dashboard.a81e47e7.js.map"}